{"paraphrased": "relationship status of employees who finish after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_9", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with students graduating in 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1702", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "list the birthplaces of people who quit their jobs before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2710", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is thre relationship status of students who started no later than 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city was the employee that started after 2004 born in", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the city of birth for all employees that quit in 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2490", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where were the people that started school in or before 2004 born", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1971", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of employees whose last day is before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person who started working after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3070", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the employees relationship status who ended in 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender is the student whose end date is 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of students whose end date is after 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of students who start before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of the employees who stoped working for us before 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_681", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of people that stopped working before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_92", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name the city where an employee was born who started no later than 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what are students relationship status who started in 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_521", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of students who started no earlier than 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplaces of students starting after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_695", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of students born before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1893", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all the relationship statuses of the students that started in 2004 and before", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of employees who have a start date greater than 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_0", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of students with an end date ealier than 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3077", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of students who have a start date after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the genders of students who attended after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what are the relationship statuses of employees whose start date is earlier than 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employees who start before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the employee who started no later than 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_125", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with students that have an end date of 2004", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1984", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of student who was a smaller date then 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1815", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of all students who started earlier than 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2120", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of students who graduated no later than 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender of employees started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of students graduating after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of people that stopped school in or after 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of a student who was enrolled after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3004", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "sex of students that started school in 2004 or earlier", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me friends of people who joined their jobs before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1528", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name the friend of an employee who quit after 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_770", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with employees whose last day of work was no earlier than 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_829", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of all students who started after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2461", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "locate the gender of students who have an end date of 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1764", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employee joining after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of employees with 2004 end dates or later", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2657", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of employees who left before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the friends of employees with an end date no later than 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all the relationship statuses of employees who started job after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_45", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth place  of students whose start date is smaller than 2004 and 2010", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of employees who finish after or in 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the genders of students whom have start dates earlier than 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2584", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of student whose end date is at least 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplaces of people joined studies before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is birthplace of employees starting in 2004 and after", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of employees who started after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of people who quit their job after 2003", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the employee who started in 2004 or later", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find alices friends", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_684", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people that alice is friends with are friends with alice", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is male and is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_486", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friend is single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2708", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people have a birthplace of new york who are also friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_180", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find friends of alice that are single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2356", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a man who is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_447", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a person that alice is friends with", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1856", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all of alices friends that were born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_464", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is born in new york and friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2442", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find alices friends who were born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people with a gender of male whom alice is friends with", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2690", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people who have alices as a mutual friend", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who have a relationship status of single who are also friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_370", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name the friend of alice whose birthplace is new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all single people that are friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who are alices single friends", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_23", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people from new york that are friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_730", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find singlestatus people who are alices friend", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a friend of alice who was born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_989", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with alice and male", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2000", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_692", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is alice friends with that is single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2646", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people are mutual friends of alice", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_773", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who are alices male friends", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2101", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me student whose end date is after student alices", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_310", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit working before alice graduated from school", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_670", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish on or after alice starts", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2863", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who quit after student alice quit her job", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3260", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the student who started on the same day as alices departure", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2040", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have a start date earlier than the end date of the employee alice", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2371", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have start dates greater than those of the end date of student alice", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2151", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the student who left school before alice started", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_96", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after alice started", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3220", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2133", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date that is no earlier than the start date of alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1954", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working after alice started school", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_614", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee that ends before alice begins", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_480", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started before alice quit her job", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_722", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who are starting before alices last day", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2447", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who began on or before the day student alice started", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2596", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose end date is before end date of student alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1371", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students starting before alice finishes", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3248", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee ending before alice starts", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1035", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting on or after alices last day", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_53", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees whose last day was after alice started school", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_363", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is not before end date of student alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1125", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who finishes earlier than alice enrollment", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_816", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a student who will graduate no later than alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2701", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student starting after alice ends", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3509", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduated no later than alices last day of work", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_211", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started no later than alice did", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_812", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find student with start date before or on alices start date", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3075", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee with a start date after alices", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1683", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school before alice stopped working", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_102", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date no later than that of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2705", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who started after student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_494", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee that ends before alice starts", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1149", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finish after alice starts", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1413", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started work when alice started school  or before", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2655", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student had started working after alice quitted", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_264", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school on or before the day alice started school", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_127", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students have larger end dates than alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1897", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who will have their last day before alice quits her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1827", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school when alice stopped working or after", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2105", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student graduated before alice quit her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1325", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose quit date of job is same as employee alices ", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3145", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date that is no greater than employee alices start date", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_498", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is not after the end date of employee alice", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3405", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has an end date smaller than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1758", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date earlier than that of employee alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3409", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students are leaving prior to the date alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_356", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date that is lower than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_731", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined work after alice", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1342", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who joined after alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1184", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee whose last day at work is before alices start date", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3309", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who started working after the student alice did", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_415", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees have an eend date that is earlier than that of student alice", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3211", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day is no later than alices first day", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2988", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who started working before alice quit her job", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2078", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee starting when or before alice ends", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1913", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student ended earlier than alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3270", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the end date of employee alice", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2677", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born in any year except 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3127", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find all people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find people with birth date not in 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1896", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find me people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "who is not born on 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_553", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people who were not born in 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people who were born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3071", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find me the people born in any year but 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3245", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "when did alice stop working as a software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_2881", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "does alice work at mckinsey", "source": "employer of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_3186", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alices job title while working for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_test_677", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice stop working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_311", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "is alices field of study computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_3385", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find students from brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_2807", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did mckinseys employe alice start", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1141", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which university did alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_2213", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "alice who is a student of computer science is a student of which university", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_1389", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the end date of alice at mckinseys", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2976", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice start working for mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_246", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice graduate after studying computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_1642", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what was alices job title while working for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2004", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who employees alice as a software engineer", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_2123", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice stop working as a software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_711", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "person named alice who studies computer science at a university", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_247", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the last date of alice who is a student of brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_559", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice graduate from brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2262", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "alices field of study is computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_1491", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "start date of alice at mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1521", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice join at brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_20", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find when students named alice started attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_test_386", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the end date of alices job as software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_882", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what university does alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_test_331", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice start studying computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_677", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did student of computer science alice finish", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_2589", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the job title of alice who works for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2158", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice quit her software engineer job", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_3383", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who employs alice as a software engineer", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_test_536", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what was alices last day of going to brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_test_27", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what does alice study at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3423", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alices first day as a software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2543", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find out if alice attended brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_test_374", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which date alice the software engineer started", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_3228", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did software engineer alice left", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_1253", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alices job title at mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_1757", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice finish studying computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_771", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all end dates of all employees named alice who studied at brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2782", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice quit job at mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2364", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice start at mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1380", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "alices graduation date in computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_test_213", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find the date that alice started her software engineer job", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2520", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what university did alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_3143", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alices start date as software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_test_452", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what did alice study at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1874", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which software engineer has employed alice", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_1069", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alices start date at brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3480", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the job title of alice whose employer is mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2429", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the field of study of student alice whose university is brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1531", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice quit working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_1942", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which date did computer science student alice start", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2736", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice start attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_1416", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what field is alice studying in brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3086", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alices first date of studying computer science in school", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2873", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "is alice going to brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_1890", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "did alice study computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_869", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is alice studying at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1285", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "when did alice start attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3284", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of a person born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_855", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the birthplaces of people born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the gender of the person whose birthdate is in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3381", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what relationship statuses are claimed by people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find friends of person born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find birthplace cities of persons born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_295", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "which city a person is born in whose year of birth is 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2839", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_47", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who is friends with someone born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3341", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what genders are the people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the gender of person who is born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1559", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who has friends born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_817", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "a friend of someone born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3017", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find friends of people born is 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3282", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what is the birthplace of the person born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2950", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find friends of people who were born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_66", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "friends of all the people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "friends of people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what gender does the person born in 2004 have", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1049", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what cities were people born in 2004 born in", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who are people with a birthdate of 2004 friends with", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2915", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find the gender of people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "name a persons friend who was born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_886", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "relationship status that is the same as a person born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_843", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "either single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_test_572", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either mckinsey or google", "source": "mckinsey or google", "target": "(call listValue (call concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_1708", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_2694", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people that studied at brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_3335", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people that are software engineers or program managers", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_962", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find me a program manager or a software engineer", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2220", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "person whose name is alive or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_920", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people who study computer science or history", "source": "computer science or history", "target": "(call listValue (call concat en.field.computer_science en.field.history))", "qid": "socialnetwork_test_820", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "history or computer science", "source": "computer science or history", "target": "(call listValue (call concat en.field.computer_science en.field.history))", "qid": "socialnetwork_train_2644", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what is the gender", "source": "male or female", "target": "(call listValue (call concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_1879", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people who work at mckinsey or google", "source": "mckinsey or google", "target": "(call listValue (call concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_16", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "is this person male or female", "source": "male or female", "target": "(call listValue (call concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_2680", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "is the person single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_310", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find people who went to brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_test_544", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "who is a software engineer or program manager", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_3408", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people who are software engineers or project managers", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2309", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "ulca or brown univercity", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_1016", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find alice or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_test_871", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "is this person single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_488", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either alice or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_453", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "either new york or beijing", "source": "new york or beijing", "target": "(call listValue (call concat en.city.new_york en.city.bejing))", "qid": "socialnetwork_train_2142", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "select new york or beijing", "source": "new york or beijing", "target": "(call listValue (call concat en.city.new_york en.city.bejing))", "qid": "socialnetwork_train_3101", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "who has a single friend", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are a friend of a friend of alices", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who are alices friends friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is friends with alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1572", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1425", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who have single friends", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what people are friends with those who are friends with alice", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people who are friends of alices friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people with male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person is friends with the person who was born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "person who has male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the friends of all people who list their relationship status as single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3531", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "anyone friend of a male", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that are friends with someone that is single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who have friends that were born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that are friends with someone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all people who has a friend born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "any friend of anyone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2091", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "a friend of alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2389", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "persons presently logged in who were born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people that are single and currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "online male member", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_71", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person is logged in and was born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2576", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all males that are currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are currently online and friends with alice", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1779", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are male and currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3263", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "males who are online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_908", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "presently logged in persons whose relationship status is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1941", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "single people that are currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1083", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is from new york and logged in", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1068", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are currently online and born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born in new york that are currently online", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which of alices friends are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_126", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "anyone single who is logged in", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3046", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friend who is logged in", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "any male who has logged in", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2513", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person is online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1992", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "find all people that are currently online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what student has the most majors", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1085", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has worked for the fewest employers", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_496", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees with the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3058", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student that has no less than one field of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_458", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with least number of job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1562", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_54", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "studens with the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_377", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has the greatest number of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2942", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with smallest job history", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2102", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has the greatest number of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_18", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2409", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person that is studying the most things at school", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3367", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find student who attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_262", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has the most jobs", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_770", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person that has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2265", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have the least amount of employers", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2165", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_690", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_771", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student with most number of field of studies", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2374", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the employee with the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1794", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who has most number of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_448", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees have the fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1142", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person that has the smallest number of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_528", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has the fewest majors", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_486", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose fields of study are smallest", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2354", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employer has the least number of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_723", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student lists the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_147", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1514", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have the greatest amount of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_593", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student who has studied at the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3182", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_389", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student with the highest number of subjects", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_680", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_896", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has been employed by the most employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3316", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is studying the most things", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1394", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students that have the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2702", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_109", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what worker has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1715", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employer has the least amount of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2998", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has the most previous employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1015", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the employee who has had the most previous jobs", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2844", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee that has the lowest job status", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1292", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2977", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "working person with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_560", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students that have the largest number of field studies", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_326", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with the largest number of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1851", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees has the largest amount of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2510", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who has minimum number of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_531", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have the fewest number of job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1440", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students with the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2352", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has the fewest jobs", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_743", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who attended the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1417", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students went to the smallest amount of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_276", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student that is enrolled in the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_89", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who do the most people work for", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_873", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who attended college the longest", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1042", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who worked with highest number of employees", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_466", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student with the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_112", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who have friends who did not begin working in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1953", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have a friend that started school in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of employees who didnt start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2569", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of employees who dont finish in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1368", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose end date is not 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are friend with students that have an end date not of 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people whom are friends with employees who have an end date that is not 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1845", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with employees who started working before or after 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have employed friends that did not start working in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2964", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that did not stop working in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have student friends who did not graduate in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of students not starting in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_710", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people are friens with students that have a start date not equal to 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_749", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose start date is not 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1713", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with the employee that does not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2798", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with somebody who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_144", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a person whose employee friend didnt leave in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_810", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are the friends of employees who did not quit in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me people that are friends with students leaving before and after 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3349", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with the new employee that will be starting before before or after 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2668", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is friends with a student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with students who did not start in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2739", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with employees who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2508", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of a student not starting in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with an employee who started in a year other than 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3010", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are friends with empoyees whose last day was not in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students friends with last days other than 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_957", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students friends who started in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3111", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends who employees who didnt quit in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees friends with last day other than 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1060", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with students who do not graudate in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is the friend of the employee whose start date is at least 2005", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2020", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which person is friends with the employee whos end date isnt 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_884", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that finished school in any year but 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_887", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all  friends with student with end date other than 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with student that didnt end in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of students who joined in years except 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with a student who did not start in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2903", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices quit date", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3390", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices end date", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3473", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2769", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices termination date", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2006", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what day does alice start", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_test_53", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did employee alice started", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_1198", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "alice is a student at which university", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1645", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start her job", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_2134", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices field of study as a student", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1363", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2146", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find alice a student at university", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1660", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice begin as an employee", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_317", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start her job", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_417", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices field of study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1726", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the job title of alice", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2367", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice finish school", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3510", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what did alice study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_938", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is alices employer", "source": "employer of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_564", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what university does alice study at", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_3356", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1388", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices first day of work", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_470", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is employer of alice", "source": "employer of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_848", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices field of study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_2723", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice quit", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_test_601", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which is the field of study of alice", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_3325", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which date did student alice left", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_1907", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what university did alice attend", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_2433", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start attending school", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_52", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the university of alice", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1427", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices last day of work", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3037", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start school", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1335", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice stop working", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2981", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is schooling start date of alice", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1567", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices end date when she was a student", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_11", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is job title of employee alice", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1433", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is born on or after start date of employee alice", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2014", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what person has a birthdate with at most that of alices", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which people were born after alice left her job", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born before alice finished school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1242", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find someone born after alices graduation date", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_21", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people that were born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3327", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who is born after student alice started", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2898", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people that were born before alice started school", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "whose birthdate is on or after alices start date", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "person who was born before alice start date", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born on or before alices final day of employment", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_642", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who has a birthdate at the end of alices employment", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born on or after alices first day of school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "person born after alice graduated", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born before alice quit her job", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born after alice started", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3168", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what person has a birthdate larger than that of alice", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born before alices last day of school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find me a person born after alices first day of school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "persons born before start date of alice", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1811", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what persons birthdate is at most the same as alices start date", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born after alice finished school", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_3105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born after alices first day of school", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_707", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born after alice quit her job", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born on or before the date alice stopped attending school", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born on or after alices last day of employment", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice started school", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1063", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born on or after the day alice quit her job", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_2209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find all people who were born before alice started", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born after alice started working", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1537", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find a person born before alice started working", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born before alices last day of employment", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice quit her job", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_391", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born on or before the day alice started school", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what person has a birthdate sooner than alice", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1595", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born before alice left", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_821", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "person who is older then alice", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find people who were born after alice quit her job", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find all people born after alice quitted", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born on a date before alices start date", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "persons who were born on or after start date of alices study", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_523", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice graduated school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_617", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who was born after alice left", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_309", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born on or before the day alice started her job", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_637", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born the same day as or after alice started school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find people born before the employment end date of alice", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_757", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "person born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_970", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born on or after the date alice started working", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_4", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find people born after alices graduation from school", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2905", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born after alice started working", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people born on or after the day alice quit working", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3035", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find people born after the employment of alice", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_781", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "person born on or after end of alices employment", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_782", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "person born in new york in 2004", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2030", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me a person born in 2004 in new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2625", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people with a birthdate of 2004 are also friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1628", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2452", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people born in 2004 that are friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_786", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "singles who were born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_414", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people who are not in a relationship and were born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_349", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who was born in 2004 and is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2326", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with alice and born in 2004", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1355", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people born in 2004 who are friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3001", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "anyone single born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3465", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "whose birthdate is 2004 that is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_340", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is born in 2004 at new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_738", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born in 2004 that are single", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_77", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3442", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who was born in 2004 and is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1785", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who were born in 2004 and born in new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2414", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who were born in 2004 and are single", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "any male born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2978", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a person born in 2004 who is friends with alice", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_73", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "friend of alice with birthdate in 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_864", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "whome is alice friends with who also have a birthdate of 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3322", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which student started earlier than 2004", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_826", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school in or before 2004 or in or before 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_101", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have end date names that are either 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2417", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all employees whore start date is either 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_598", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees left their jobs either in or after 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_306", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school after 2004 or after 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2338", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all employees that started working after 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1445", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student that started between 2001 and 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_595", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students finishing before 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_529", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started in or before 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2869", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people joined work before 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3347", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started earlier than 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1157", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started work after 2004 or after 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3300", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have a start date that is either 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_175", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who began working either by 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1403", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student ended school before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3054", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day was no later than 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_587", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date earlier than 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_231", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started in 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1711", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees finishing after 2004", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3518", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date that is bigger than 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1056", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finish after 2004", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_633", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who began school in 2004 or later", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1408", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the employees who quit between 2004 and 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2879", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with start dates after 2004", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2361", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_500", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started no sooner than 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2457", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduate before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3180", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which emloyees had their last no earlier than 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_619", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students starting after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1518", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a list of employees whose start date was in 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_588", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting before 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2536", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working in or after 2004 or in or after 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1251", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is either 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_879", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date that is either 2004 or 2010 and no greater", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3400", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who start after 2004", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1429", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who quit their job in or after 2004", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1597", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students started between 2004 and 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1991", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has an end date that is at least either 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2403", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined the institution after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3302", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped working in or after 2004 or in or after 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_325", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose end date is larger than 2004 and 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3026", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "show me all students that will leave in 2004 or oe 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_526", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students starte before 2004 or 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_620", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date no later than 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3449", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student who started before 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_43", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose start date is smaller than 2004 and 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2674", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting in 2010 or earlier", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2772", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who quit theri job before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2415", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working before 2004 or before 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_582", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whose last day was before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_794", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who finishes at most on 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3047", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_584", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name an employee who started in 2004 but before 2011", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1101", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students began school either after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_676", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who joined before 2004 or in 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3265", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduate no later than 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_348", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date that is later than either 2004 or 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_104", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
