{"paraphrased": "what is the birthdate of the person with a height of 180 cm", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2631", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "students who started before or on alices birthdate", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_876", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "all 180 cm tall singles", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2796", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee has the most previous employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1015", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which of alices friends is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1081", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "friend of alice who was born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1087", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what student has a start date close to the start date of alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1632", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of people who do not work at mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3129", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the relationship statuses of students whom do not study computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whos 180 cm tall and in the same sort of relationship situaiton as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_686", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all people who were born in new york", "source": "person whose birthplace is new york and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_623", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "when did alice start studying computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_677", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find me all the people who quit during or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3267", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the person whose birthplace is new york and whose height is 180 cm", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_725", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which employees had their last day no later than alices graduation", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_758", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is the tallest", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1235", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find students with one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2223", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who did not start in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1358", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee is leaving the company on the same date that alice starts her job", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2669", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting after alices birthday", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3526", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after alice left", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1236", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student who left on or before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2840", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has only one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2788", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finish with or after alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1037", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who have a birthplace of new york and their friends", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employees have jobs whose title is the same as employee alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2498", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are the relationship statuses of people who quit their job in or after 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student that has no less than one field of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_458", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of students whose start date is not 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3213", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of an employee who has a start date later than 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2941", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all people who are 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_955", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which employee started their job on alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_924", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of the students who dont graduate in 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2985", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of an employee who does not work for mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3502", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students left by the end of 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_79", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date no earlier than 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_338", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall who are alices gender", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_574", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a friend of alice who is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1489", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which student had started working after alice quitted", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_264", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the relationship statuses of employees who do not have the job title of software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_719", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is 180 cm tall and born in the same city as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1195", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is 180 cm tall and has the same birth date as alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_test_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is studying computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1074", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of a student not attending brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_305", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_1490", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name the friend of a person not employed by mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all the online singles", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2475", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "transgendered people", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_1288", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what employee has no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1150", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "list the birthplaces of people who completed their studies before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with either alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_64", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find the relationship status of students whose university is not that of brown", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2759", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the employee whose start date is in 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_737", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person who started school before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3323", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has a start date that is no earlier than the birthdate of alice", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2272", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who joined before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_963", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is a student that started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1032", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students friends who started in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3111", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of an employee that isnt a software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1784", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which person is friends with someone who goes to somewhere besides brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_793", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of max two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3031", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who studied at the least number of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2682", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "cities of employees who were hired after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1662", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "this employee has an ending date that is almost the same as alices", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_628", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all single people that are friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what city was the student born in that has 2004 as end date", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_330", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with friends who did not start work in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what date did alice quit studying in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1553", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what students have start dates greater than those of the end date of student alice", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2151", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who has two or more friends", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1957", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which employee started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_124", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is thre relationship status of students who started no sooner than 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1139", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student quit on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_215", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who are alices male friends", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2101", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "when did alice start her study in the field of computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2854", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "birthplaces of employees starting before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3501", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with relationship status as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_710", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "name an employee who started in 2004 but before 2011", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1101", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of employees terminated on or after 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1700", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender are those two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_590", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who has friends whos end date is before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2169", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of no more than two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3490", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "student whose start date is not before birth date of alice", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3242", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with a relationship status of single and a total height of 180 cm", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1013", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the birth city of all employees who have an end date less than 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_493", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started later than 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2629", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of the student not in computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2339", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date is after start date of student alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1245", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose start date is after end date of employee alice", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1593", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people born the same day alice ended school", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is the shortest", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1697", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find me the student who graduated on alices birthdate", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1852", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "sex of people who began school in 2004 or later", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2888", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the field of study of all persons with a height of 180 cm", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which is the university of studen alice who finished in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_981", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find students with a start date no later than 2004 and their friends", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_202", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student started earlier than 2004", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_826", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started no later than alices first day of work", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_471", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born on the date alice left", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1728", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what was alices job title from 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1254", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "who is friends with the online person", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2577", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "employees who started on alices start date or later", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1431", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day was the same day as alices graduation day", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1969", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school at the same time or before alice did", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2594", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with less than two genders", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_764", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "friends of people worked in companies other than mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee that has the lowest job status", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1292", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1487", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee started no earlier than alices end date", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_800", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city is the birthplace of less than two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1894", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who are friends with alice and born in new york", "source": "person whose birthplace is new york and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1047", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people with employment end date as 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_864", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what employee has a start date earlier than the start date of alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_674", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who have less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2025", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "friends of friends of all singles", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_196", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "name an employee who left after alice started", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1736", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are single", "source": "person whose relationship status is single and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1892", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students with last day after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2587", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the employee that is leaving the company by 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of students who have an end date that is from 2004 or greater", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of employee whose start date is after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2081", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee ending before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_204", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who started school before alice", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_923", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_240", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who have only 1 relationship status", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_1760", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "gender of employees starting before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2707", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who do not have more than two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_670", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employees who quit their job in 2005 or later", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2756", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee starting before or when alice ends", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_263", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students finishing in or after 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1669", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has friends born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_817", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "friends of employees who started after 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "list the birthplaces of people who quit their jobs before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship statuses of students who ended school in or before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students finishing contemporaneous or before alice", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1023", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of a student whose end date is not 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_728", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who start before or when alice finishes", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_133", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has the least number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_2399", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "people that started working when alice was born or before", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1044", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees start date is not 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_366", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee with one job title", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_426", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has same end date as that of alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_302", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the most end date of student 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1140", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1837", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people have at least two relationship statuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_1471", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "gender of employees who left before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person alices height or taller", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2012", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "a student who has studied at the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3182", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has an end date that is the same as the start date of alice", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_72", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "two or more gendered people", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_2855", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "relationship status of student whose start date is before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3185", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "friend of student whose end date is not after 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1931", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who quit after alice started her job", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_264", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "either single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_test_572", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what are the birthplaces of people logged in", "source": "city that is birthplace of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_385", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "employees who joined before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_390", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student started earlier than alices birthdate", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_279", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of people that stopped school in or after 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with students whose end date is 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_701", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is alices employer since 2004", "source": "employer of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which student is in the same field of study as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_272", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find alices friends who were born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2764", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person has a birthdate no later than 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find people who are employees with an end date no later than 2004 and their friends", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_277", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students whose last day was after employee alices", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_219", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees that have the greatest amount of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2024", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which gender had more employees start after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2588", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who did not begin school before 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1284", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which of alices friends are online right now", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "birth city of student whose end date is before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1446", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what are the birthplaces of alices friends", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the birthplace of people who are 6 feet tall", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3052", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employee who was born when alice quit the job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1667", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is not before 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_794", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_11", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people that stopped school when alice started", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2794", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find relationship statuses for students with an end date that is no later than 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_118", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have a start date that is equal to alices birthday or later", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2858", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the friends of employees that quit in 2004 or later", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1094", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is the oldest person in my network", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2347", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "people who are 180 cm tall and left their job in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2111", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what employee quit their job last", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_707", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who joined after alice left", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_255", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who graduated before alice was born", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2033", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name the student who was born after alice ", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_964", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employees who are not software engineers", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_179", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student with most number of field of studies", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2374", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends with students that have a start date of 2004 or later", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people are friend with students who have a start date later than 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_760", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born after 2004", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "what worker left before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3027", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_109", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after the employee alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_687", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students friends who started before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is a person whose height is 180 cm and thats friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2803", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is alices employer", "source": "employer of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_999", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find birthplaces of employees who started after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of students who started before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_443", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "is this person single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_488", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people who quit their jobs after alice born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1341", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone with the same gender as alice", "source": "person whose gender is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call getProperty en.person.alice (string gender))))", "qid": "socialnetwork_test_620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "sex of students that started school in 2004 or earlier", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose university is either brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3194", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alice studying at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1285", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "where are people born who are 180 cm in height", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1877", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which students graduated any year but 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1503", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have their field of study in computer science of history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2714", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who first quit hisher job", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_589", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person 180 cm tall who is friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2372", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of a person whose height is 180 cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2232", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who is friends with the person who didnt start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2961", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee started earlier than 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1157", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of student whose end date is after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3195", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who left when alice started as a student", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_366", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped working after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3411", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where wa alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all of alices guy friends", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1052", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who joined the institution with alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_315", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have a start date that is the same as employee alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1174", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have a start date the same as employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2125", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee finished the same time alice started", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2473", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where was the 180 cm tall person born", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_461", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is alices field of study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1726", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who studied in universities other than brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1225", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person born after alice graduated", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_68", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "connections of friends who started dating before 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_546", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "how many companies are there", "source": "number of company", "target": "(call listValue (call .size (call getProperty (call singleton en.company) (string !type))))", "qid": "socialnetwork_train_2048", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which student left school before alice left school", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1555", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends of students who have a start date no earlier than 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped working when alice started working", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2551", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who quit at the same time or after alice did", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2072", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students start date is on or before alices end date", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1122", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is friends with an employee who had an end date no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_880", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have an end date earlier than 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_231", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people who are friends with less than two other people", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2887", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which city has minimum number of people born in", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_571", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "start date of alice at mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1521", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find students that have the latest start date", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2124", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are not male", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the gender of the student that graduated before 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_483", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what logged in person was born in new york", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_test_468", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "person who has male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3312", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employee has a start date that is the same as the end date of alice", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_76", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the relationship status of employees with an end date earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1878", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of employee whose employer is not mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee ending in 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2523", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people who joined studies before alice joined work", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_598", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me everyone born in new york who is single", "source": "person whose birthplace is new york and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2501", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find student with last day on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2918", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose end date is not after end date of student alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2570", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are friend with students that have an end date not of 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is the boss of alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_566", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is after the start date of employee alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_359", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with employees how started after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started school after 2004 or after 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3042", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee with last day before alices start date", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_715", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees start date is the same as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_9", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who joined on in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2815", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people who are single that are currently online", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_3064", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "how many males or females are there", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_2574", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who quit their job before alice joined", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_618", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people born in 2004 that are friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_786", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices friends who are single", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1310", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name the student who the quit the job with alice", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3311", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the number of the city", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_1836", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that work for less than two employers", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_29", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school when alice was born or after", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2566", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the field of study for people who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1280", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find students whose fields are computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_788", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is not after end date of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_846", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with the new emplyee starting before2994", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2485", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees who have a start date later than that of the end date of employee alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3406", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are the relationships statuses of students who started school before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_300", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student started on alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2653", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of student who ended in 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3297", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends who are 180 cm tall like alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1949", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee whose start date is not before start date of student alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3276", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of employees starting after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1283", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who have a relationship status of single who are also friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_370", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students start school the same day alice starts work", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1751", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are shorter than 181 cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "student whose end date is before end date of student alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1371", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students finishing on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_158", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person that is a friend of student who will graduate by 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_874", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee quit working before alice graduated from school", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_670", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birthplace cities of employees whom have a start date not equal to 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who joined study in years other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3304", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the university of someone 180 cm tall", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1618", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all end dates of all employees named alice who studied at brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2782", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what cities are the birthplaces of people who have a height of 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3497", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employees whose end date is after alices end date", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3034", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone who is as tall or shorter than alice", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2439", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which employee is not the software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2254", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone born after alices graduation date", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_21", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find all people who are not in a relationship and were born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_349", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee with one employer", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_833", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is anything but 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3084", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices gender", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_547", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find employee starting on alices first day or later", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1079", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who stopped school on or after the date alice started school", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1912", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that have a friend that stopped school in or after 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_228", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is a 180 cm tall male", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_37", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "give me the genders of the students who graduate in 2004 or sooner", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3372", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of student who is not student of brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_171", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_847", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has a relationship that started after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees starting in or before 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is born after student alice started", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1620", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what person has two relationship statuses", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1649", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find alices friend who is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_235", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what worker has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1715", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1347", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people with three genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2818", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who has over two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_297", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find employees friend with start date after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of the person that is 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1223", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what people have a relationship status of single whom are also friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_600", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees whose start date is before or on alices end date", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_137", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose start date is before start date of student alice", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2445", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people whose birthplace is new york", "source": "person whose gender is male and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_556", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "student who has 2004 as a date", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_353", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people who quit their job before alice joined her study", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_446", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1886", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what employee started after student alice left", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_792", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started employment before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2464", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee that ends before alice", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1411", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date that is later than the start date of student alice", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_832", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who quit their jobs after 2003", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_856", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what relationship status do two people share", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2203", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all people who are not in a relationship with alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2300", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what student stopped before alice was born", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1554", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is after birth date of alice", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_346", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the employee who quit later than 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1269", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of student who started after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_508", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with the person currently logged in", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_1014", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what gender is the student who started in 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1906", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of students who stated before 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3492", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of alice born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1266", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what field is alice studying in brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3086", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which students graduated in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2804", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped working before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1338", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me people that are friends with students leaving before and after 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3349", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with employess whose job title isnt softare engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1465", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with friends that finished school in or before 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_655", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is friends with a student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student has the latest start date", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_4", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find relationship status of employees not with mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_455", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people who are 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "gender of employee whose job title is not software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2299", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person with same gender as that of person 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1414", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what person has two friends", "source": "person that two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1997", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that stopped working when alice did or after", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_721", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student started in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3387", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting on or after alices last day", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_53", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended in 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2758", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city is the birthplace of students before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_700", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of students who started no earlier than 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_863", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is the student whose start date was at least 2004 friends with", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student started after alice stopped going to school", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2486", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone who is female", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_1317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has three or more relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2914", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find all the students that started after alice was hired", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_334", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the place of birth for all employees starting before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me a person who is not 180cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_682", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find friends of students who started in 2004 and after", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_657", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth places of employees who quit in 2004 or before", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2642", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started school before alice stopped", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_149", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is the same gender as the 180 cm tall person", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "friend of emmployee whose end date is after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_943", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who started working on 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_63", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born before alice quit her job", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "birthplace of students whose end date is before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_332", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which person has the most number of friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_703", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which student goes to the same university as student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_852", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting after alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1036", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has an end date before 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1703", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which person has a relationship status of single", "source": "person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_503", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the gender of students who started no later than 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "how many job titles are there", "source": "number of job title", "target": "(call listValue (call .size (call getProperty (call singleton en.job_title) (string !type))))", "qid": "socialnetwork_train_320", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "relationship status of employee whose end date is not before 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2846", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the date that alice started studying computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2324", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people that started school before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1003", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students starting before or contemporaneous to when alice finishes", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_622", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are friends with employees who have an end date no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1311", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student ending after or when alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_954", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that finished school in or before 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1151", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of an employee who didnt start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_388", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of employee whose job title is not software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_601", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has an end date that is not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3476", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting before or contemporaneous to alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_98", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is 180 cm tall with computer science as field of study", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2533", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people have the same gender as fewer than two people", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_781", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person who isnt a software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_40", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have single friends", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2201", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people whose gender is same as alice", "source": "person whose gender is gender that is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2615", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what person has a relationship status the same as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "who stopped school before alice started", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1698", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with a person that is friends with alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_934", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which employee ended on the same date as alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_454", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me an employee whose end date is equal to or earlier than the birthdate of student alice", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_367", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee starting before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_722", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the gender of an employee starting before or during 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_382", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "how many fields are there", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_1108", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the birthdays of employees who left before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are 180 cm tall and have a birthdate of 2004", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1875", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find employees whose end date is the start date of student alice or later", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_411", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the friends of people who joined their studies after 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1790", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is a person whose friends with alice that is single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3045", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person born in 2004 is 180 cm tall", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_122", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "gender of students finishing on or after 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2542", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of all employees who started in 2004 or later", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who left their job the longest time ago", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1651", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the person who stopped working after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2310", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1377", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "whose birthdate is on or after alices start date", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what gender are people that started working before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employee finishing contemporaneous to or after 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose end date is not before 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_5", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the average height of all the people in my network", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1100", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what was alices job title while working for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2004", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find alices friends who are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2948", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find company employing those who are 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_516", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the birth city of employees whose start date is less than 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_702", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of employee without title of software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "students whose graduation year is at least 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_786", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where were the people that started work in or after 2004 born", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_406", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where were employees who are not software engineers born", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people born after alice", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2916", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what student has an end date before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1112", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are 180 cm tall and are software engineers", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_652", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find relationship status of employees starting in 2004 or earlier", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_877", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employee whose end date is not after 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2830", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_457", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "gender of employees who finish after or in 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has friends that are students whos start date before 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_976", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have employed friends that did not start working in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2964", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is alices first day as a software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2543", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the gender of students not attending brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3161", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who joined their work with or after alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_767", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of employees who have an end date that is not 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2550", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "in what city was the 180cm tall person born", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employees who start with or after alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_529", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who started the same day as alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_161", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with employees whose last day of work was no earlier than 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_829", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who finish with alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_720", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students not at brown", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2751", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose start date not after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_718", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1388", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school before 2004 or before 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2630", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are not 180 cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2876", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "students who have the same end date as the start date of student alice", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_937", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birthplaces of people who are male", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1515", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "employees who joined after alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1184", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started no sooner than 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2457", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with last day not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3357", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices start date at brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3480", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "person that has two genders", "source": "person that has at most two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_train_1373", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what are students relationship status who started in 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_521", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name a student who will graduate no later than alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2701", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice stop working as a software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_711", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "friends of alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find a person who is taller than 180 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2545", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find the friends of people who quit their job after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3051", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that studied at at most two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3038", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall and logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1899", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "people alice is friends with that were also born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_564", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that started working before alice did", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2070", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended earlier than 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_44", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is younger than alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2192", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "student who did not join in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_608", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which company employees the person who is 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1865", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is alices start date as software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_test_452", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what are the current relationship statuses of employees who have a start date that is anything but 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2865", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find someone with two or less birthplaces", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_1952", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_3225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students who started before or on alices last day", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_323", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what cities were students born in who started after 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2975", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee whose end date is not after start date of employee alice", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_806", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a person whose friend started on or before 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2530", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "genders of people whom are single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which employees are working jobs other than softwhere engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_547", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student not ending in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2358", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who works for the same employer as ailce", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3236", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who shares a birthday with alice and is 180 cm tall", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1137", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "the birthplace of someone not employed by mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of an employee who is not a software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_425", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student started earliest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_579", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has a start date that is no less than alice", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_52", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which city is the birthplace of two or less people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3016", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that started school after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2425", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student starting after alice ends", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3509", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me students whose end dates are the same as the start date of alice", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3374", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find a person with less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2047", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee whose start date is not 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1526", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are at least 180 cm tall", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_600", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "find employees with one or two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1798", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the job title of people who have a height of 180 cm", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all the people that are 180 cm tall and were born in the same place as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1982", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are friends with students who have a start date of 2004 or later", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees with last days of either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_191", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the least common birthplace", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_784", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "is there a gender less than two people have", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1038", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which employees has the least recent start date", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_783", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is the same as the end date of alice", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1268", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplaces of students starting after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_695", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "fins birthplaces of employees with last day after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3028", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees have no more than 2 job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2382", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are currently online and born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3197", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people shorter than 200 cm", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_1887", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "students who began school after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_778", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of employee whose end date is before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_984", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are the students starting at the same time or before alice starts", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2771", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish when alice starts", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2017", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2357", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped working the same day as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_745", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees friends who started in 2004 or before", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of the student who started in 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2263", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "locate the gender of students who have an end date of 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1764", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which 180 cm tall people started in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2931", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "birth place of people who completed education after 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2663", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender are the two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1171", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "birthplaces of people joined studies before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with friends who are not software engineers", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1299", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender are those who are 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_835", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who has the most friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_847", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that are friends with either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_176", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find students who joined after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3240", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the most common relationship status", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_83", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what employee has an end date that is at least the end date for the employee alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3039", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person who is friends with more than two other people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1451", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "relationship status of two persons", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2895", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what person is younger than alice", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "all 180 cm tall people who studied computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_82", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which gender is the student who ended after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student stopped before student alice started", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_746", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school when alice stopped", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2362", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "180 cm tall friends of alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_805", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people are friends of employees that have a start date before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1898", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of people whose height is 180cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_995", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "single people who was born in new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2650", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "whats the gender of students who started school before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_141", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are in a relationship", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_1458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees who quit the job after 2004 ", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_862", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student with two or fewer majors", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2913", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "whats the relationship status of students who graduated before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of employees not working for mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_497", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the student who did not start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of student whose end date is after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1058", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what genders are the people that started school in or before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city were more than two people born in", "source": "city that is birthplace of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_67", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what person is at least the same height as that of alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what employee started after employee alice did", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2540", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student no more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_250", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplaces of employees who started working in 2004 or earlier", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2174", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the start date of a student who started before alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1196", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has the greatest end date", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1199", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people that alice is friends with are friends with alice", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_121", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person has at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_501", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is younger than or same as alic", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_441", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which students started school latest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2689", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee started no greater than alices end date", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_580", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of a student whose start date is not in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2465", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are not male", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has the most birthplaces listed", "source": "person that has the most number of birthplace", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string birthplace)))", "qid": "socialnetwork_train_1590", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "people that started school after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_503", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is a person whose field of study is computer science and whose height is 180 cm", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students with a start date that is the same or greater than student alice", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_838", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with the people who quit after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the relationship status of students who graduated since 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1739", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with those who joined studies in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_634", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "males who are online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_1324", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who is friends with the person who quit before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_323", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born in new york that are 180 cm tall", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3452", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees who start after alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2620", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_232", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find birth cities of employees who have a job title that is not software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_150", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees starting on or after alices birthdate", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_269", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "alices male friends", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_972", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "relationship status that is relationship status of one person", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_312", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who are a friend of a friend of alices", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends with alice and born in 2004", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1355", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who completed their study before alice was born", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_850", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with not more than two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1462", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where was the person born who is 180 cm tall", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who has friends that are students and whos end date is 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of people who completed their study in an year other than 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3106", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with an employee who start date is not 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1424", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what single person is friends with alice", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_849", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2060", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "students who ended school after the day alice ended school", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_820", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a persons friend who was born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_886", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "which students major in computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_393", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_314", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "someone with over two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1780", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "singles who were born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_414", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who have a birthplace the same as those with a height of 180 cm", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find me all people who are 180 cm tall and currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_2019", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "which worker left on or before the day student alice started", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2013", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has the fewest jobs", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_743", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of people that finished school before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_476", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are all of alices guy friends", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3530", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what student started the job before alice quit", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_456", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of person not employed by mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_108", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student has the fewest majors", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_486", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has maximum two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_762", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find people that have more than two birthplaces", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_988", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is alices exact start date in 2004", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_3431", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what person who ended in 2004 is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_789", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "name a male who is 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3359", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what students have an end date that is earlier than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_271", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices end date when she was a student", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_11", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student started earliest", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1393", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "fine me all employees who start by 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1138", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where was alices friend born", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1644", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "field of study of people who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is height of alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_3363", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "employees finishing before 2004", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1744", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the person who stopped working before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices birthplace", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2365", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "employee whose start date is not after start date of student alice", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_672", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have an end date that is equal or later to that of student alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3080", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with an employee whos end date is 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_655", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of people 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find birthplace of males", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1944", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "all 180 cm tall people who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1905", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find all people who born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2847", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people who have a birthday on the same day alice started her job", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employee whose start ate is before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3183", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students with the same field of study as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1693", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is students gender with last day other than 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_418", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who studied subjects other than computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_840", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name the friend of a student who began prior to 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_700", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people share the birthdate of alice and have a height of 180 cm", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_test_740", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of people that started working before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2539", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which cities were people 180 cm tall born in", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2621", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what student started after alices end date", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_590", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of employees that started before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the average height of a person", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1548", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what employees before working before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3251", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is studying less than two things", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2277", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that have a friend that started school in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are people who are employees with a start date not of 2004 friends with", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_314", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of student whose university of not brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the relationship statuses of students with a start date later than 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees who quit on or after 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose start date is before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of employees who started after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the bithplace of an employee who did not start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students starting before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_575", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students finishing on or before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3474", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working after alice was born", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2605", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who started not after 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1633", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who started school on or before the day alice finished school", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1197", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has a height of 180 cm and a job title of software engineer", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3434", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that have less than two genders listed", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_1778", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people that started school after alice stopped school", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1934", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender are the two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_942", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which students started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_676", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of a student whom has the end date not equal to 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is gender of the student whose end date is before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of alice who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_831", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people completed study before alice started study", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_576", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started working after alice quit her job", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_215", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who were born in 2004 or later", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1587", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people who quit their job in or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1231", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find relationship statuses for employees with a start date later than 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1771", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are logged in who are alices friends", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_392", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "birth city of employee whose end date is not after 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_27", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students whose end date is on or before alices birthdate", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_726", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of employees who are not employed by mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_752", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "single person 180 cm tall", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_137", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is alice friend born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2108", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students starting the same day as alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_478", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the gender of a student starting before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2481", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1448", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with the new employee that will be starting before before or after 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2668", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender employee whose end date is not 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_909", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who are friends with people who dont work for mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of only one person", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2692", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "whats the relationships status of the employee that doesnt work at mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_699", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the most common gender", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2779", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which emloyees had their last no earlier than 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_619", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who were hired either in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1387", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who have the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_387", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of student who was a smaller date then 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1815", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people born after alices graduation from school", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2905", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which person is friends with a student who started earlier than 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_241", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date is end date of student alice", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2670", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is the same as employee alices end date or later", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1749", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender that is shared by two persons", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1382", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the employee who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find university of people who are 180cm tall", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_283", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find friends that are friends with alice", "source": "person that person that is friends with alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_438", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find employees who have an employer different from that of alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_563", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm and is in the field of computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_3499", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people have birthdates between 2004 and 2010", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2703", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "where were the people that started school after 2004 born", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_921", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of people who are logged in", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_211", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find people who are students with a field of study that is not computer science and their friends", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_969", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student has a start date before the birthdate of alice", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1212", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students finishing after alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_394", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_test_355", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find employee with latest last day", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_913", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have an end date the same as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2066", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the gender of a worker who didnt start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2204", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student started earliest", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2110", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what online person is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_559", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "what person is friends with alice", "source": "person that is friends with alice and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_352", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who was born on start date of alice", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_878", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employer has the least number of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_723", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who shares end date with employee alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3301", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started earlier than alices birthdate", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_413", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "job titles of people who are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_875", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "people that are friends with someone that started working before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1770", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have friends that are currently online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_254", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "person who studied in most fields", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1027", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has lowest number of friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_597", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employees whose last day is before alice", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_6", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of employees whose job title isnt software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1061", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of students starting before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1449", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student who started earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_615", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "whome is alice friends with who also have a birthdate of 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3322", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "all single or married persons", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_997", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people who have friends that were born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who is single and is friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3295", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people whose end date is not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3049", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "how many employees share alices job title", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2094", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who graduated before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_653", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with someone that stopped working in or before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2476", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are not the same gender as alice", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees with the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3058", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender has the most people", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_48", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which employee ended in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_857", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is single male", "source": "person whose relationship status is single and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees with last day on or after alices first day", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3377", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "show me all employees leaving before alices last day", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1950", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2616", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "name an employee who started before alice quit", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_340", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people who are friends with alice and are 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_837", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what students started after alice left", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_704", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit the day alice started", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3439", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with last day is on or after alices last day", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2622", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has a birthdate larger than that of alice", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which employees last day was most recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1215", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "someone 180 cm tall who stopped in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_811", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "name a person in more than two relationships", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2911", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is alices friend", "source": "person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2215", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are friends with a working person that isnt a software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are logged in who are also friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1724", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "gender of student whose field of study is not computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3157", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students with end date in 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_766", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with those who completed studies before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2693", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name an employee whose end date is similar to that of alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1168", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of students who did not graduate in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me a person with the same or later birthday as alice", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2891", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find people who are friends with students whom are not part of brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_26", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the single person", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_268", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what gender does the person born in 2004 have", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1049", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who started school most recently", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3447", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are friends with employees who have a start date of 2004 or later", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_85", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees last day was after alices first day", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_552", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "all people born in new york", "source": "city that is birthplace of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_154", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what are the start and end employment dates of alice", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_107", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices first day of work", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_470", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which city were alices friends born in", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1983", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what day did alice stop school in 2004", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_test_651", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "student whose start date is after end date of student alice", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2810", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working the same time as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2917", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what relationship statuses are claimed by people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people who are friends with students who ended school after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_46", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who stopped working in 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3093", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who completed their studies in an year other than 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2902", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has a start date that is the same as alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2258", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students began school before alice began working", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1694", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find an employee who left after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_813", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of current or former students excluding those that started in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1476", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that work for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1158", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are friends with empoyees whose last day was not in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which guys are also 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_912", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "students who began school on the same day alice started working", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2494", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started no greater than alices", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_438", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "this student who finishes school at al most the same time as alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_609", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are single and friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2346", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who is friends with employees before or on 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has an end date that is before the end date of alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1055", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with an employee who started after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of the person who is 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_993", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who was born on alices first day of school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_2095", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are the same height as or shorter than alice", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find people whose height is 180 cm that are also friends with alice", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1603", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2452", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what students have an end date that is before the birthday of alice", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1296", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is friends with student that did not graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "the gender of a student that starts after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose start date is larger than 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_166", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that started school in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3012", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee whose start date is after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_459", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have the earliest start date", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_254", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whos end date is equal to alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1920", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with someone that did not start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_303", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is total number of univeristies", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_3172", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what students began school either after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_676", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the male friends of alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1550", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees joining before 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_513", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student who left before alice started", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2843", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee with start date on or before alices", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2826", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where were working people that did not stop in 2004 born", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_41", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status for two people", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_787", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find males that alice is friends with", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1549", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees who started on or after alices last day", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1264", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit their job before alice started school", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_660", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are born in new york and are 180cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_865", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find employees who quit theri job before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2415", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student who started after student alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1663", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student that does not stufy computer science was born in this city", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_761", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with a height of 180 cm that go to brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3014", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me all people who are older than alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3467", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people that stopped working after alice was born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1041", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school on or after the day alice stopped working", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1612", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who quit their jobs in an year other than 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2959", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name the city where an employee was born who started no later than 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started before alices start date", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_932", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who share a workplace with alive", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_251", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a person born in either 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_357", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "people that stopped school after alice started school", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_278", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me friends of people studying somewhere other than brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the person that is 180 cm tall and is also female", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1463", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what employees started on or before alices start date", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1923", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who started their studies in an year other than 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_610", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city were two or fewer people born in", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3112", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find friends of employee with end date not in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1374", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who start before alice finishes", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_328", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people born after the employment of alice", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_781", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find the friends of people who joined their studies before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2727", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is male and 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3021", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name a friend of the person who is 180 cm tall", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1962", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which students started no earlier than 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2427", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "working people that are not software engineers", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2472", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who started after alice left", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2921", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee ending before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2115", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "cities where alices friends were born", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_596", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which person has the fewest number of friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_784", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which university did people who are 180 cm tall attend", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2518", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find employees starting in 2010 or earlier", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2772", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined study after 2003", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_522", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have a start date that is no greater than that of employee alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_642", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of student whose end date is not 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "single people that are currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1083", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee whos last day was between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1017", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who began working either by 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1403", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people who are 180 cm tall", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1723", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees who started working the same day alice was born", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2628", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the friends of the people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_36", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employee has the latest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1244", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people with the same relationship status as alice and are also 180 cm tall", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_test_537", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with alice and single", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_472", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the university of a person whose height is 180 cm", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "people born before alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_8", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which employee has less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2864", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of student who is not student of brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3287", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "the person logged in who is born in 2004", "source": "person whose birthdate is 2004 and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_80", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "student who started after alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1978", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who stopped school before alice stopped working", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1106", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date less than that of the start date of employee alice", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1444", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who share the same job titles as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1846", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduate after alice started school", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3237", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices gender", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_test_161", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what employee has a start date that is earlier than the birthdate of alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_359", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people that are currently online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "who is male and is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_486", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that are friends with a student who started before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender is the employee who started in 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_13", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees has the largest amount of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2510", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of employee whose start date is at least 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_604", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a person 180 cm tall and has same birthdate as alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1610", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people born before the employment end date of alice", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_757", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people who were born before alice started school", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1063", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "gender of student whose start date is not after 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_224", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find birthplaces of students starting in 2004 and later", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_84", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students are leaving prior to the date alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_356", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born in the most cities", "source": "person that has the most number of birthplace", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string birthplace)))", "qid": "socialnetwork_test_597", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "gender of someone who is single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_966", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me all people born after 2004", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_713", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find a person who is 180 cm or taller", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_859", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "all 180 cm tall people who joined in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that started school after alice started working", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_59", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what does alice study at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3423", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is no later than the end date of employee alice", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1918", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with birth date same as employment end date of alice", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1976", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students starting before or with alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3076", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees have start dates the same as alices last day", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_105", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date that is either 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1673", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date no later than 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_852", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a friend of an employee who did not quit in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_830", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student ending at the same time as alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3371", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "genders of students not finishing in 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_477", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person who started going to school after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_675", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who studied in two or less fields", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1117", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city was the student that started after 2004 born in", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_715", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2074", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who has the same birthday as the person who is 180 cm tall", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2793", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who did alice start to work for in 2004", "source": "employer of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_610", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which employees last day was in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2054", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is at least either 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1372", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started working before the day alice was born", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_393", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people born in 2004 who are friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3001", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students graduate after alice starts her new job", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_391", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship statuses of students who began school in or after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees who have a start date that is at least the same as employee alices end date", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_58", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of all employees who did not quit in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student ending after alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_135", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students end date happends the same time as  alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2379", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of employees whose last day was not in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3003", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what relationships status represents the fewest people", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_542", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which students have larger end dates than alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1897", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are friends with alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2459", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find employees with last day before or on alices last day", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1293", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school when alice stopped working or before", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_477", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "whats the gender of the student that did not attend brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started on alices end date", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1136", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working after alice did", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1626", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me people who have the same relationship status of people who are 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_717", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "birthplace of employees who finish before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1748", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of a student starting before or during 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1025", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees starting before alices birthday", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_588", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students that ended school on the day alice was born", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2355", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student started last", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1854", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "show me all employees that leave the company before alice starts", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1477", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find males who are 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2507", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which employee has the earliest end date", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_796", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit job in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_686", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the city of birth for all employees that quit in 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2490", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are not friends with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_3097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of a person born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_855", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "relationship status of employees who finish before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_747", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are the same height as alice or shorter", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_3104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "students who started school after alice quit her job", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2808", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the youngest person", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1737", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "people who are friends with the employee thats leaving before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_774", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has an end date later than the start date of alice", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_859", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born in 2004 and is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1785", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find relationship statuses for students who have an end date that is not 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name the relationships status of an employee who started no later than 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_819", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of alice that are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2762", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee started in 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_330", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status for students with a start date not equal to 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "persons presently logged in who were born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "when did alice start attending school", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_52", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees whose end date is the same as alices", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1806", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of students whos end date is 2004 or more", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3005", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "when did alice join at brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_20", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "employees who began working before alice finished school", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_194", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all people who belong to one gender", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_1213", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who are not studying computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2483", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who are people who are students with an end date no greater than 2004 friends with", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1086", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1346", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are 180 cm tall with 2004 start dates", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1217", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that finished school before 2004 or before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2842", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of students with an end date ealier than 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3077", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices 2004 employment start date", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_1454", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what day did alice start her job in 2004", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2688", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "where is the birthplace of the student not going to brown  university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_802", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of students with start dates other than 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2096", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of the student that graduated after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1756", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born before alice graduated school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_617", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who has the same gender as alice and is 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1735", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which date alice the software engineer started", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_3228", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which students who strated before alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2271", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the gender of an employee that started before 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has friends with a start date after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_47", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what person was born earlier than that of alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what people are logged in and whom are they friends with", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_603", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "a friend of a student not starting in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3384", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees strated before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3094", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "of all the people who are 180 cm tall which of them share birthdays", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_806", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who is friends with students starting before on in 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_689", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that were born before alice started school", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find students with last day before or on alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1599", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date that is greater than that of student alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_468", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employers of all people who are 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "gender of people who joined their study after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1147", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "places of birth of employees who quit their job in 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1686", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with students who started before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1222", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students not finishing in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1714", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped working before 2004 or before 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_488", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people at brown university are 180 cm in height", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_test_509", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is 180 cm tall and is female", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3443", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which employeess last day was least recently", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1099", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of employees who start before or in 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_828", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_test_581", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people who were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_594", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find me friends of single people", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find employees who have a start date no later than student alices start date", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3029", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with employees whos end date is larger than 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2453", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person from new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_557", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is a person whose start date was after 2004 friends with", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_783", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees with two employers or less", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_855", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a end date that is after the start date of student alice", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_315", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm tall and born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1604", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people born on the same day as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_926", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "which employee ended between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2181", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born the same day as or after alice started school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people that stopped working before alice started working", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2761", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who have the same birthday as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the gender of the student who started in 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1103", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the relationship status for people with a height of 180 cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2586", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find people  born in 2004 whose height is 180 cm", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1592", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "person with the most friends", "source": "person that is friends with the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_67", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employees who started on the day that alice graduated", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_157", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whose last day is the same or later than alices", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2005", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student with two or less universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2777", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who started in 2004 or before", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1959", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has friends who are 180 cm tall", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1980", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "people that started school on or after the day alice stopped school", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3369", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting contemporaneous to alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_790", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1648", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has friends with students that have a start date of 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3375", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where is the birthplace of the student who started before 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find someone born after alices last day of work", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1352", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people that started school on or after alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2755", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_442", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_54", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is gender of students with last day in 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of a worker who left before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3074", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee has the earliest start date", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1636", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the gender of people that started school before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "180 cm tall person with same relationship status as that of alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2970", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the birthplace of employees who quit since 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2983", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the friends of the employee who started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_18", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees starting before or on same day as alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2443", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students go to the same university as student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2248", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of a person who started before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_646", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who finish in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3283", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees called software engineers who are 180 cm tall", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_1930", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what male is friends with alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_772", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees whose end date is later than alices start date", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_47", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is before start ate of employee alice", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2823", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name the person with a height of 180 cm who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1929", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "the relationship statues of a student ending in 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2478", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of students with last day in 2004 or before", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3081", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who started before 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1485", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees whose last day was in or before 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_292", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have an end date that is the same of later than student alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2590", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have start dates later than 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1773", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with alice and was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3450", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people are friends of alices friends", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the birth city of all students whoes end date is 2004 or later", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1637", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all  friends with student with end date other than 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2525", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have the latest end date", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_148", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee start after alice leaves", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1045", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with alice and was born on 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1211", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "someone 180 cm tall and same gender as alice", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1252", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which relationship status is of at most two person", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1010", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employees with fewer than two employers", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2728", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people whom are friends with alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1627", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find everyone born in new york who is 180 cm", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2302", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "name the friend of alice whose birthplace is new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people have a birthplace of new york and a height of 180 cm", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2348", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "employees with the fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1885", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student has at least 2 university to go to", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_128", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "whose relationship status is single", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_714", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employee quit their job on the day alice started", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1054", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who started in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3288", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find me students end date equal to student alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1257", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with students who dont major in computer sience", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "when was alice born", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_1925", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "name an employee who began in 2004 or later", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1541", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended earlier than alices start date", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3503", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices height", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_584", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "birthplaces of employees not finishing in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2055", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people whom are friends with employees who have an end date that is not 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1845", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees whose last day is the same as alices first day at the job", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3379", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student from brown university is 180 cm tall", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_1301", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what employee started on or after alices birthdate", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2132", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with someone in school studying something other than computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students that will begin to work on the same day alices leaves her job", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3313", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who last joined the study", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2749", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose end date is after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3144", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are employees of a employer that is not mckinsey friends with", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1263", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have a start date no later than that of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2705", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees finishing contemporaneous to or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2645", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which relationship status do less than two people have", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_767", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a friend of a student starting after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_684", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employe that has a smaller start date than alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1030", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduate the day alice starts school", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2984", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students whose end date is not in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whos end date is 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_874", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what person hast the most number of relationship statuses", "source": "person that has the most number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_2249", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "relationship status of employees not finishing in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1857", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who started when alice quit her job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1512", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student left school after alice quit her job", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1709", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are the relationship statuses of employees whose start date is earlier than 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2606", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "sex of students who didnt start school in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_354", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which university did alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_2213", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people who have a different relationship status than alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1543", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "friends of people who quit their jobs before 2005", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_876", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born on or after the day alice quit her job", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_2209", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who has same relationship status as that of alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2297", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what are genders of employees whose last day was after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_585", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which person is friends with the employee whos end date isnt 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_884", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee started at the same time as alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_490", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who are the friends of employees who did not quit in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee that ends before alice begins", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_480", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice quit", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_test_601", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employer of alices ended in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2966", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which employees have the fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1142", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are between 180 cm and 200 cm tall", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_822", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "find me at least two person with the same relationship status", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_73", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "name a person 180 cm tall who started working in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_665", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "employees who began working by 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_519", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student that started between 2001 and 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_595", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student left most recently", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_990", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born in new york and are male", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_432", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where is alice born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_57", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what is the employees relationship status who started no later than 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_139", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is shorter than 181cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2699", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "which students started no earlier than alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2923", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_250", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is not after 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_342", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has two or more relationship status", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_2719", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2898", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people that have a friend that started school in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2390", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started working after alice stopped working", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_792", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the oldest person", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1000", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "how many genders are there", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_441", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is friends with the employee starting in 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1302", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what did alice stop studying in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_1314", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "relationship status of students starting after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3314", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees who have a start date of 2004 or later and their friends", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_916", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student who started before 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_43", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has a friend who is a student at a university other than brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2664", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is thre relationship status of employees who started no earlier than 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_308", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the employee who began later than 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started school before alice was born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2470", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of students with an end date that is not 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_270", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who finish after alices birthday", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3196", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of alices friend", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_511", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what student has a start date no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_475", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with students who started no earlier than 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person who started school during or after 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_86", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender are people that started working in or after 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1323", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who joined study on the day alice was born", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_893", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender that is the gender of at most two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_267", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which people were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_233", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "birth city of employees whose end date is not 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people have a birthdate that is 2004 and whose height is 180 cm", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2330", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is the employer of the person who is 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "gender of an employee that ends during or before 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2064", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is in the most relationships", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_287", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city was the male born", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find student whose last day is after alices birthday", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_512", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a person whose employee friend didnt leave in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_810", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all people who are mutual friends with alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3056", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students with a start date that is earlier than that of fellow student alice", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3011", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has a birthdate earlier than 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find friends of students whose last day is 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1679", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the genders of employees who have an end date no later than 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_815", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "how many relationship statuses are there", "source": "number of relationship status", "target": "(call listValue (call .size (call getProperty (call singleton en.relationship_status) (string !type))))", "qid": "socialnetwork_train_828", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which people are alice not friends with", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2781", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "gender of employees who start before or in 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_279", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has the fewest friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1844", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find fields of study for those 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_716", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who is not born on 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_553", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is the birthplace of employees whose last day was after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2994", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of employees who started in 2004 or later", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what job did alice start in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2578", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is no greater than employee alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1883", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who graduated after alices first work day", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2079", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with a height of 180 cm who also have a birthdate of 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_166", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which employee started earliest", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2886", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with an end date that is equal to or greater than the birthdate of alice", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2553", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of employees with the job title that is not software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who is same sex who left more other employee started in 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_95", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the employees who quit between 2004 and 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2879", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of employees whose end date is not 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_272", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is friends with the person who was born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_535", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the gender of students with a start date no later than 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1578", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students whose end date is later than the end date of alice", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3358", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student with start date not after end date of student alice", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_309", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who will have their last day before alice quits her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1827", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birthplaces of people born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "students that graduate on the same day alice starts her new job", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2805", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is relationship status of students starting in 2004 and after", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1981", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of people that are friends with alice", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "employees starting on or after alice finishes", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2632", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are currently online and friends with alice", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1779", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee whose start date is after the end date of employee alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3155", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all single people", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3446", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people born in new york", "source": "person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1539", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which student has an end date smaller than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1758", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices first date of studying computer science in school", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2873", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what city were people who are single born in", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1538", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is 180 cm and from the same place as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1165", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a 180 cm tall person born in same place as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_892", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "person born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_970", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "people joined their study before alice born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3326", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find out if alice attended brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_test_374", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people that stopped school in or after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1188", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is 180 or 200cm tall", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_test_252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "find employee with same job title as alices", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2774", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of friends of people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_753", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the person with the least friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2441", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who started first", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3082", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are the relationship statuses of people that are currently online", "source": "relationship status that is relationship status of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_77", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find students who attended the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1417", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who started working on the day alice quit her job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_262", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which of alices friends are male", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_198", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me one of alices male friends", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2288", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what gender is more than two people", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_721", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which date did computer science student alice start", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2736", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "employees who started before alice quit school", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3126", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "persons whose height is 180 cm or higher", "source": "person whose height is at least 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find all males who are 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_59", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "friend of someone who quit before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_431", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the job title of alice whose employer is mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2429", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what university does alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_test_331", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what person has the same gender as alice", "source": "person whose gender is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call getProperty en.person.alice (string gender))))", "qid": "socialnetwork_train_2597", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "students who share alices field of study", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1617", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of students who strated no earlier than 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_643", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee starting when alice was born", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_880", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city is the birthplace of employees before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_106", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee started after alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2133", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth city of student whose university is not brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born in new york that are single", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1039", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students who graduated before alice started work", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2522", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of employees who started in 2004 or before", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_174", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students graduate before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3180", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthdate of people who are 180 cm tall", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_513", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find males who are 180cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1725", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "a student who left at the same time as alice or before", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3002", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends with employees who have an end date before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1678", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a worker whose company isnt mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1822", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find a person whom is friends with students whose field of study is not computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_416", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who finish after 2004", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_633", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of students graduating after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student who joined after 2004", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1964", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the students relationship status who ended greater than 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1339", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "universities where all 180 cm tall people studied", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3373", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find phone number of university", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_3063", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "students friend whose university is not brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who quit before alice joined", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_136", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "who is alice friends with that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1817", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "employee who is not employed by mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3352", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school in or after 2004 or in or after 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_511", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "is the person single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_310", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find me employees who were no longer employed after alices start date", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2235", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1322", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what are genders of students not attending brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3065", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the universitys number", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_2980", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee whose start date is after start date of student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_862", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of students who strated no later than 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with an employee that started later than 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2564", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with only one birthplace", "source": "person that has less than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_test_208", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which students have the same major as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1588", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person whos birthday is before alice graduates", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2342", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "employee whose employer is either mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1753", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees that are starting their new job on alices birthday", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1096", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth place of two persons", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_904", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who was born on or before alices final day of employment", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_642", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what employees have an end date that is no later than that of student alice", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_411", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name of employees friends who started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_106", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who began school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3360", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees left their jobs either in or after 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_306", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of people born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employee quit their job the same day or after alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_593", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the most common relationship status", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2706", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what city was alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2563", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "who is born is 2004 and is a male", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_260", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find students starting on or after employee alices first day", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3095", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with students who didnt graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee starting before alice was born", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1966", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is  birth date of alice", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_487", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with a gender that less than two people have", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2747", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is friend of either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2790", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find people that are friends with students who have quit after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3424", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started after alice", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2696", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of persons who are 180 cm tall", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2416", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employees finishing when or after alice starts", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_854", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of working people that did not start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1570", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "cities where alice was not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_test_372", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees who joined after  alice joined", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1840", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are taller than 180 cm or 200 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what city were most people born", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2001", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employees who started before alice started school", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2468", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth city of student whose start date is after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2408", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose start date is smaller than 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3389", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are 180 cm at brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_986", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "student whose start date is not after start date of employee alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2082", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students not studying computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2806", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with start dates other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2424", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school in or before 2004 or in or before 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_101", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of employee whose employer is not mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all people that were born in new york that are currently online", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_2043", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "gender of students whose end date is later than 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person that was only born in one place", "source": "person that has less than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_test_421", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who are some of my noncomputer science major connections friends with", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_946", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which working people have less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1901", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is online and is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1258", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find employee with a start date after alices", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1683", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who started in 2004 or later", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3135", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the job title of alice who works for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2158", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find employees starting before 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1455", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose end date is before the birthdate of alice", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_506", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the relationship status of a student not starting in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1453", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has a birthdate at the end of alices employment", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what city was alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find employees who have a start date earlier than that of employee alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3477", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined their studies after alice quit her job", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2109", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students friends not studying computer science field", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1175", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of employees who start date was 2004 or before", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_698", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find student who attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_262", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started working in or after 2004 or in or after 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1251", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose start date is before end date of employee alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_290", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with alice and has a birthdate on 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3019", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what person has the least friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3044", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is alices birthdate", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_2567", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "which of alices friends are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2944", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what date in 2004 did alice stop working", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3321", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "students who started school on the same day as or before alive started", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_147", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which computer science students are 180 cm tall", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2572", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what people have two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_3159", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "friends of students finishing before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_530", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of alices friend", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2073", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends with someone who started working before 2005", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1786", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplaces of people who studied in fields other than computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2084", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who study computer science or history", "source": "computer science or history", "target": "(call listValue (call concat en.field.computer_science en.field.history))", "qid": "socialnetwork_test_820", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find someone taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_661", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "employee whose end date is before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1145", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student had an end date that is later than the birthdate of alice", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2241", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of a student studying something other than computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city was two people born in", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2190", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find everybody who has two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_312", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the birthplace of an employee who left in 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of 180 cm tall person", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2410", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "when did alice who started working in 2004 finish working", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_test_462", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "name a person who is 180 cm who started working in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1192", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is the student end date at least 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2907", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students with last days on or before alices first day", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3514", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has more than two relationship status", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_573", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is born on or after start date of employee alice", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2014", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find alices friend that was born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_798", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "students whose start date is no later than alices", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_152", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students friend who started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_75", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of employees who quit the job after 2004 ", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the relationship status of the person that does not work for mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_376", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of student whose start date is not before 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1381", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the student who graduated on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2090", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of people who started their job before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_407", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of people studying something other than computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2053", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "list the relationship status of people who quit their jobs before 2005", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees started at the same time as alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2816", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who quit before alice graduated", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1677", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of student whose end date is not before 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_987", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee whose end date is before after end date of employee alice", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1067", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of employee whose employer is not mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3436", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped working in 2004 or before", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2559", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends with a person whose height is 180 cm", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1304", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what person is friends with the employee that quit before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_221", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "when did alice start school", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1335", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people who joined their work before 2005", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3133", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose start date is smaller than 2004 and 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2674", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has an end date no earlier than alices end date", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1665", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find birthplaces of nonmckinsey employees", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of people who quit their jobs after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1279", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started working when alice stopped working or after", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2147", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is older then alice", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "how many gender options are there", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_3223", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find me all males that are currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_915", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students who attend alices university", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_725", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who quit after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2521", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person of the same gender as alice who is 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3521", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me the student who started before alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_335", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_551", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "birthplace of students who started no earlier than 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3343", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee ended no greater than alices", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2114", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started the same day alice did", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1716", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice quit working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_1942", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people who quit their job after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2825", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find student with the latest starting date", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2029", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of most", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_718", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person who is friends with a student that graduated in 2004 or before", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2945", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have a end date that is no greater than the start date of student alice", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_140", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1880", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what is the relationship status of employees who left before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "someone not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1029", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "whats the relationship status of the student that is leaving her job after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born in new york that are currently online", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_583", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has different relationship status to alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1841", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "a friend of someone emplyed after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_91", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are male and born in new york", "source": "person whose gender is male and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_930", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who were born in new york", "source": "person whose birthplace is new york and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3397", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students who didnt graduate in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2875", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people with a birthdate of 2004 are also friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1628", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that started school before alice stopped working", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_102", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is employees gender who started in 2004 or earlier", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1866", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is logged in as well as logged in", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2744", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the gender of employees whose last day was no later than 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1884", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is gender of employees who started before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of fewer than two people", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_824", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "where are the birth cities of employees who have a start date of no earlier than 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born in 2004 and is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2326", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a person who is 180 cm tall the same height as alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_2144", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students who started in 2004 or in 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2233", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person born in 2004 who is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2704", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what employee was terminated after alice started working", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_208", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what genders are the people whom alice is friends with", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "person who completed the education latest", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_532", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started school after 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_724", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people with friends who are single", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1007", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "gender of employee whose start date is not 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_19", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date  is before alices", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2516", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is minimum the end date of employee alice", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1316", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started before the day alice graduated", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_54", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the gender of students who did not begin school in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1859", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who did alice quit working for in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2295", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find all males who have friends", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1088", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which relationship status represents no more than two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3410", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find all people with friends who finished school before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_44", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of students that started after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the student who started in 2004 or earlier", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2313", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born after alice started working", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1537", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which single people are 180 cm tall", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3141", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_3494", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "people who are th gender of alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_750", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is same gender as of at least two persons", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2856", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who are friends with a student that started no earlier than 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with students not attending brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees started before alices last day", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2170", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose end date is before alices", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_168", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of people who started school in 2004 at the latest", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2928", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of an employee who has worked since 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2037", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students graduate after alices last day at work", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_624", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "genders of employees not finishing in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born on or before the day alice started school", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2482", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what is the relationship status of students who graduated before 2003", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_3121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what is the gender of the employee who started in 2004 or later", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3350", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name a person friends with a person that is 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1345", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what are the birth cities of students who have an end date that is not 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3108", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are at most 180 cm tall", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_736", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people who are friends with a student whose start date is before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1558", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee that isnt a software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2737", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with over two people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1146", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "when did alice graduate from brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2262", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "persons born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_test_145", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "people who were born on or after alices first day of school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what students have a start date that is the same as student alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_38", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who began working in or after 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_435", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of people that stopped working before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_92", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees last day was no earlier than alices first day", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2698", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee with last day same as or before alices", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1076", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born in 2004 and are single", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3422", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people employed by mckinsey who are 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_test_574", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_339", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find me friends of people who joined their jobs before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1528", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have friends that were born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which people have at least two birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_3173", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "birth city of employee whose start date is at most 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is a person whose university is not brown university friends with", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_293", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all friends that are not software engineers", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2366", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of students who do not go to brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1676", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students started in years other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2765", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with someone that stopped working in or before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_498", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who studied at only one university", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_763", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students not starting in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2238", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_771", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of a student who began at 2004 or before", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_978", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what are the friends like for people who started working before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_170", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with employees who quit their job in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who joined before alice quit the job", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2168", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees stared the same day alice started school", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1661", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birth city of students who have a field of study other than computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees have fewer than 2 job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2901", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee that started before 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_811", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of one or two individuals", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2582", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is relationship status of students starting in 2003 or before", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date is before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3346", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students studying either computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_974", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting before alices last day at work", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1295", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all people are are taller than 180 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_726", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which students graduate no sooner than alices first work day", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1421", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_305", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "friend of student whose end date is at most 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started before alice quit her job", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_722", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit job with and after alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_683", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who began school after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1008", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has a relationship status of not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_602", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "an employee who left after alice was born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1228", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of an employee who does not have mckinsey as an employer", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students whom have the earliest end date", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2456", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what do people study who are 180 cm", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3167", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find friends of people who were born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2267", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "where were the people that started school in or after 2004 born", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_800", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of employees who started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3033", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student who was a smaller start date than alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2320", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose start date is not after end date of employee alice", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3472", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student does not attend brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2113", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people have more than two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2279", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what city is the birthplace of an employee who quit after 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_589", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name an employee who started before the student named alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2316", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice stop working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2962", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find the employees that were hired before alice quit her job", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2529", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who completed education before alice joined work", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_561", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who has not more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2906", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of people that started school after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee is starting by the time alice leaves the company", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1682", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students birthplace who started on or after 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_316", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees started on or before alices birthdate", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1516", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are shorter than 180 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3255", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "what is the gender of employees who started no later than 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2395", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "most popular birthplace", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2656", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the citys number", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_658", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "birth  city of student whose end date is not 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2638", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all students who graduated after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1619", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who are the friends of those not employed by mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of people who joined their jobs after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2859", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who is friends with students who joined in and after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_89", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees whose start date is earlier than 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_644", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of the student leaving his job by 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_760", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees with one job title", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1050", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is friends with an employee who does not work for mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "180 cm tall person who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_823", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "whats the gender of the student that leaves before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1234", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started school when alice did or after", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_20", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students born before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1893", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find relationship status of employee with last day in 2004 or before", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3339", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of students who graduated no later than 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student with less than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_159", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student ended on alices start date", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_189", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees leaving the company no earlier than alices start date", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_143", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with friends that finished school in 2004 at the latest", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_785", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of students that did not study computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2050", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "is this person male or female", "source": "male or female", "target": "(call listValue (call concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_2680", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "who is a person that is a male and whose height is 180 cm", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_217", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what person that is online is friends with alice", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1864", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "how many relationship status options are there", "source": "number of relationship status", "target": "(call listValue (call .size (call getProperty (call singleton en.relationship_status) (string !type))))", "qid": "socialnetwork_train_2156", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which gender is the employee who ended after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2862", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people are friends with students whom have an end date that is no greater than 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3083", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who is shorter than 180 cm or 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3500", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "which employee started right when alice quit her job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_171", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace city of a student who started during or before 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people have two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_2896", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which students end date is greater than alices start date", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_416", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of the person born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2950", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who is friends with the person graduating in 2004 or earlier", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1294", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students finishing contemporaneous to or before alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3483", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is younger than alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_635", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "who are friends with connection who started school before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name a friend of a student who did not study at brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that studied at brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_3335", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "find me all people whose height is 180 cm and born in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_740", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "name a person born in 2004 who is friends with alice", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_73", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that have at least 2 genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_test_204", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee has the same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_285", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find the gender of students who were born after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of studetns who started after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2208", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "anyone who is alices friend", "source": "person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2360", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students ending date is greater than 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1988", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "anyone friend of a male", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2426", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the gender of students who have a field of study in something other than computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2986", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name a friend of the student who started no later than 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1492", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students field of study is computer science of history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2202", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is gender of students who started in 2004 and later", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are the friends of person who is 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the birthplace of students who started no earlier than 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_37", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find everyone who is either single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_2099", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what city were alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1565", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "friends of students starting in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1998", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all the people with at least two birthdays", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_test_120", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find friends of alice that are single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2356", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students with last day in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_631", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of student whose end date is not less than 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_123", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices 6 foot tall friend", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_756", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find the birth city of employees who have an end date of 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3478", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student goes to another university besides brown", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1080", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find friends that have friends that are 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_632", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "name the relationship of thie student who started before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1456", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person that has an employee friend who starts to work by 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2035", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find alices singlestatus friends", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2935", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee with the largest number of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1851", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city was alices friend born in", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the gender of employees starting before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1802", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with the same relationship status as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2229", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "person who was born before alice start date", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what students have an end date that is no greater than employee alices start date", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_498", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of students whose field of study is not computer science ", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2388", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "the gender of a student ending before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_484", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthdate of the person who is 180 cm", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3460", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "relationship status of people who quit their job after 2003", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_240", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who quit before alice was hired", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2246", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who attended one or two universites", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3079", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student lists the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_147", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people who are friends with males", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_877", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is alices friend that is from new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1166", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what person is shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1689", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "what gender are employees whose job title isnt software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1340", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with friends who started university in 2004 or later", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender has more than two people", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_343", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a student who left before student alice did", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_759", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose start date is after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2218", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who quit their job in or after 2004", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1597", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has a start date of 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student has an end date no later than the end date of alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2821", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "field of study of someone 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1249", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "students who ended school on or after the day alice was born", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1598", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has the same birthdate as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_992", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "relationship statuses of students that dont go to brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2093", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all the students that started in 2004 and after", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2515", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born on or before the day alice quit her job", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3179", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "employees who have the same start date as alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_7", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student that ends before alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1843", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone born on or after alices first day of employment", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "name a friend of the student who graduated after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that started school before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender is the person who 180 cm tall", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employee whose start date is not after the end date of employee alice", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3405", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3284", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "180 cm tall persons who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3256", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people born between 2004 and 2010", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3158", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "people who are friends with the smployee starting by 2994", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_475", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student had a start date no earlier than alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3088", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student started after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2028", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find birthplaces of students whose last day was 2004 or before", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_839", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices friends with a height of 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_467", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people those who are friends of friends of alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the relationship status of the employee that did not start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_539", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students start no sooner than alices graduation day", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1154", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find alices friends that were born in 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_801", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what employee has fewer than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2245", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of student who does not finish by 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3072", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have a start date that is no later than alices birthday", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1135", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of people who did not start school in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with a student who graduated in 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students am i friends with who didnt start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2512", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who did not start in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_65", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is before the end date of employee alice", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_863", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is job title of alice whose employment end date is in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3504", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which student started before alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3234", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has the same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_823", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of working people that did not stop in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of students who graduated before 2002", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_60", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1026", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is 180 cm tall and is alices friend", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2328", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which of alices friends is 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_341", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is the the student whose end date was 2004 friends with", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_104", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who start with alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_875", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who finished working when alice started or before", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1506", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is friends with the employee that was hired before 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_372", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are currently online that are single", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2624", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find the city that is the birthplace of only one person", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2990", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "relationship status of employees whose start date is before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2259", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "single people born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2568", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people born in or before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_422", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "what is the students birthplace city who started at the most in 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_889", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the employee that quit in 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_577", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have a start date no later than 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3169", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with employees that are not named mickinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what student graduated before alice quit her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1325", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students who finish contemporaneous to or before 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2402", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has friends that are not employees at mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1579", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the student who left school before alice started", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_96", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people who have more than two friends", "source": "person that more than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3138", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person who first joined his study", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2637", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who didnt start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3217", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of students not starting in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_710", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of alice who are 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_129", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all people that are single and currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "birthplace of students who start before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2119", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students at brown or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1635", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1985", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee whose start date is not after birth date of alice", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_813", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what date in 2004 is alices last day of work", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3214", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "who is born on same date that of alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_test_583", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people who are greater in height than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_450", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "who has over two relationship status", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_3498", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "whose friend is logged in", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_370", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find employees whose end date is less than 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1788", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what persons birthdate is at most the same as alices start date", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2504", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which people have less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2773", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what person is 200 cm or shorter", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "find me all people with less than two birthplaces", "source": "person that has less than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_train_1820", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who are 180 cm tall and quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_994", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "students who started at or after the end date of alice", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_881", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with employees who started work before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_737", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with student that didnt end in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_231", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "studens with the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_377", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have the greatest amount of job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_337", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who does mckinsey employ who is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2910", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the birth date of alice", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_test_50", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "the birthplace of a student not starting in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_432", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees with an end date that is not 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1361", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are logged in who are also friends with alice", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3435", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of people that started school in or before 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1378", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1591", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee left their job after alice started", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1143", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student ended after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2643", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of employees whose last day was no earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_172", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with a person who didnt stop working in 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1876", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "in what cities were students who started before or in 2004 born", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2654", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of students who have a start date after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_814", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees whose last day is the same or later than alices", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_115", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who started before start date of employee alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2266", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what genders are the people that finished school after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_948", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who work at mckinsey or google", "source": "mckinsey or google", "target": "(call listValue (call concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_16", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people who completed studies with or before alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2026", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the friend of the employee whose start date is at least 2005", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2020", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the employee who quit before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_82", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee starting the soonest", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_367", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth city of employee whose start date is not after 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1406", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "when did alice start working as a software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2932", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people that are friends with someone that started school in or before 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_659", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the birth city of two people", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_738", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "students whose quit date of job is same as employee alices ", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3145", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined the institution after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3302", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender of employees started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_507", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who left before alice started", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1848", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of students finishing before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_301", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what are genders of students whose last day is before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_869", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student with the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_112", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with a relationship status that more than two people have", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1935", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "student whose start date is start date of employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3493", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplaces of students that started school after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1624", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started work when alice started school or after", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3032", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of males", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_265", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me an employee who has worked at two or less jobs", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_542", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the student whose field of study is not computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the realtionship status of employees who are not employed by mickinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2725", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date is not before 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2454", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was the gender of employees who left before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1459", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birth city of employee whose end date is before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1668", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people have the same birthdate as those whose height is 180 cm", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1903", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "when is the end date of alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_552", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students graduate before alice does", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_362", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends with those who are friends with alice", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people 180 cm tall with 2004 end dates", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3018", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is alices end date", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3473", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day is no later than alices first day", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2988", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the employees relationship status who ended in 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_81", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person whos 6 feet tall and studies computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2836", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with the person who is graduating in 2004 at the earliest", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students started no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_749", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students friend with last day in 2004 or later", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_41", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of employee whose job title is not software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_355", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the status of alices relationship", "source": "relationship status of alice", "target": "(call listValue (call getProperty en.person.alice (string relationship_status)))", "qid": "socialnetwork_train_2936", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "what student hast the earliest start date", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2083", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with the employee that will be leaving by 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2449", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is job title of employee alice whose end date is 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3202", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find people with a gender of male whom alice is friends with", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2690", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that stopped going to school when alice started working or before", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_492", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what university do those that are 180 cm tall go to", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_554", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "gender of a student who was enrolled after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3004", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has the same relationship status as alice and is 180 cm tall", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_693", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is the student whose end date was at least 2004 friends with", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_842", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students finishing on or after alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2834", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has a start date later than the end date of alice", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_649", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is before birth date of alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_336", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "can not parapharase", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_420", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who enrolled on or after the date on which alice completed her studies", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2641", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with a start date that is equal to the end date of employee alice", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_141", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "city with birthplace of two person", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_567", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee whose end date is before start date of student alice", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1229", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the student that started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1089", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of student who was born in at most 2004 ", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2780", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is a friend exclusively to alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2754", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students starting on or after 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2746", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with last day same or later than alices", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_679", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the shortest person in my network", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_test_114", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which students go to the same university as alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2305", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of people that started school after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with someone who didnt go to brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "any male who is logged in", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_371", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what city were more than two people in my social network born in", "source": "city that is birthplace of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1306", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person who is not a friend of alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_test_560", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born on or before the day alice started her job", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_637", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find people who are friends with employees who have a start date of no later than 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1575", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the person who graduated during or before 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1484", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students who are not part of brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2548", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of students sho started before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_658", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student not taking computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1858", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all people with the same gender as alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_258", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what was alices last day of her job from 2004", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_769", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what is the gender of students with a start date that is not the same as 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2061", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of people that started working in or before 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3386", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "one student who started on the same day as employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2018", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day was before the day alice started school", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_385", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which men are 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_114", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees who started on the same date as alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1816", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who quit after alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1594", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students friends with last days other than 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_957", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of an employee that is not a software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2973", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with an employee from at least 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who started in 2004 and are 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_850", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which employee has an end date earlier than alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_679", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who studied the fields other than computer science", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2325", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people have an end date of 2004 and height of 180 cm", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_56", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "whats the relationship status of people who are male", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the relation status of people who are 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the birth city of a student who didnt stop in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1057", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "genders of employees starting in or after 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_155", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where were employees who finish on or before 2004 born", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who left by the time alice left", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2883", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "ulca or brown univercity", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_1016", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people that are friends with someone that started working in or before 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_60", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices friend who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2077", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "person born on or after end of alices employment", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_782", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "all people currently online", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_35", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "what people have more than two birthplaces", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_test_484", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what university did alice attend in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_1650", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "find employees friends with last day other than 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1060", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of students who are not studying computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_358", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started no later than the start date of alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1123", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose university of is same as that of student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_844", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who enrolled in or before 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_496", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are taller than 200 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "people that are friends with someone that stopped working before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1200", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person has a height of at the most 180 cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2785", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "people in a mutually exclusive relationship", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_515", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employees not starting in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_265", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which of alices friends were born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1585", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what student started on the same day as alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1664", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of people attending any university but brown", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students starting after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1518", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who joined before 2004 or in 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3265", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "was the student who graduated before 2004 a male or a female", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_205", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born after 2004 that is friends with alice", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3394", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees with job title not software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2514", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended no later than 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_336", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who began on or before the day student alice started", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2596", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a list of employees whose start date was in 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_588", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is thre relationship status of students who started no later than 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1156", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that finished school in any year but 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_887", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are the friends of students with an end date that is not 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3020", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee with at most two jobs", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_494", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "alices friends who are logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_580", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has two different relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_1970", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "is alices field of study computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_3385", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall and single", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_843", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where is the birthplace of the student who left school before 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started working on or after alice was born", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1189", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined their study before alice completed", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2652", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends with alice and have a birthplace of new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_561", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students who ended school after alice started working", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_212", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student that is enrolled in the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_89", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where was the employee born who does not work for mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1064", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that have the least number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_75", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace city of a student whose end date was not in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees starting when alice finishes", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1312", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of students starting after or in 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_562", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find student with earliest last day", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1031", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1004", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "person named alice who studies computer science at a university", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_247", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what person has a birthdate sooner than alice", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1595", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find friends of people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find all employees whose start date matches alices", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1500", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of no more than two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1919", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "birthplaces of alices friends", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_186", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employees had start dates on 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3354", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth city of no more than two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2015", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is one worker who left on or before the day employee alice left", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2716", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with same birth date as alice or later", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2845", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people that stopped working when alice stopped school or after", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2056", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "city where at least two people were born", "source": "city that is birthplace of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_401", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what people have two or more genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_1622", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the birthplace of employees whose last day was no later than 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3364", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with someone who graduated after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1075", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employee whose last day at work is before alices start date", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3309", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person with two or more birthplaces", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_test_591", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "students that will start before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_261", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find student whose last day matches alices start date", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1781", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who quit the same day as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2422", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of the student who finished before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1655", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the genders of students who attended after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_32", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees starting on alices last day", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_551", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of alice or bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1124", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "name a person with whom alice is not friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3427", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that started working the same time or after alice did", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_445", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is alices employer", "source": "employer of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_564", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting before alices last day", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_464", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has a start date before alices birthday", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2503", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who joined their studies before 2011", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_861", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who finishes at most on 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3047", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is after student alices start date", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2179", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city were students born in that started before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1681", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the people who joined their studies before alice was born", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2314", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of people who quit work in 2004 at the latest", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1809", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are 180 cm or less in height", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2800", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "who has two or more relationship statuses at once", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_3215", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who completed their studies before alice joined", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1946", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people born after alice quitted", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3250", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "friends of male people", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2581", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people that have two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_243", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the birthplace of people who did not start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1704", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is gender of employees with last days other than 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_401", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who arent alices friend", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2032", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with students that have an end date of 2004", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1984", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date is before birth date of alice", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_268", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of a person who is single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_853", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is studying two things or less", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3415", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the person that is 180 cm tall and is a software engineer", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2695", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what gender is the student that graduated by 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_450", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the birth city of students with an end date later than 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1227", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_125", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "people 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_198", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who were born after alice quit her job", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_162", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "friends of people who quit their jobs before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2333", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of students who joined in years except 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_471", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which of my friends is at some school other than brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3464", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students started no earlier than the day alice started school", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2819", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has the latest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1297", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth  city of employee whose start date is not 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1348", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the total number of genders", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_1674", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of employees who quit after 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3262", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of that person", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_236", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that are friends with someone that did not stop working in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the students whose end date is either 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2919", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of employees other than software engineers", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2809", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee whose start date is after end date of student alice", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1833", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are genders of students not studying computer science field", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_611", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend is someone not employed by mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1407", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the friends of employees with an end date no later than 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2474", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has an end date that is 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3232", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish before alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_373", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who quit their job after 2003", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_445", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date that is employee alices start date or later", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3062", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting after student alices last day", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3275", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends of alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_183", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that started school after alice stopped working", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2122", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who are not studying computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_71", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people who were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3334", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people born on or after the day alice stopped attending school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_248", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "where were the people that go to a university other than brown born", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3319", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student quit at the same time the employee alice did", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2726", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where were employees at companies other than mckinsey born", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3092", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose start date is the largest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2321", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started before alices birthdate", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2991", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date that is alices birthday or later", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1218", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city is the birthplace of an employee whose end date is not in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1776", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1498", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "whos friends with someone who left a company or retired before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3113", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of a student that isnt in computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_599", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all students who graduated between 2004 and 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_618", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person is friends with the person logged in", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2097", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find alices friends who are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1729", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what employee has the same or bigger end date of employee alice", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_540", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find birthplace of student not studying computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is born in a city that alice was born in", "source": "city that is birthplace of alice and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1631", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "locate the gender of employees whom are not employeed by mickinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who did not graduate before alice enrolled", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1613", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender are people that started school in or after 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1995", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who started working up until alice started working", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_277", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who are the students studying computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2045", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start working for mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_2092", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "job titles of people that are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find all the people with two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_test_146", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who is taller then 180 cm logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1719", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING)))"}
{"paraphrased": "find people with same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1607", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "find people who have the same gender as alice and are 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_test_206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees who have a start day at the same time as alices birthdate", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_78", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of the person whose birthdate is in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3381", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "a student ending before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2317", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the the relationship status of the employee who started in 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1996", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students not starting in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_648", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of student whose start date is before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2874", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the alices 2004 end date", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_313", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "180 cm tall persons who were born in the same place where alice was born", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_3512", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which person claims the most genders", "source": "person that has the most number of gender", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string gender)))", "qid": "socialnetwork_train_1307", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "which employee quit after alices birthday", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_911", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is thre relationship status of students who graduated after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_697", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2386", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of students with an end date earlier than 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_466", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplaces of all 180 cm tall people", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1019", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what is the relationship status of people born in new york", "source": "relationship status that is relationship status of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_363", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employees started the same day as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_32", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finish after alice", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1842", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all male singles", "source": "person whose gender is male and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1153", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born on or before the date alice stopped attending school", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "find students with a start date that is no greater than student alices start date", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1360", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a list of employees who are employed by mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_526", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of employees who started in or after 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2069", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee started no later than alice", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3142", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has an end date no later than the end date of alice", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_397", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who started before alice left", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_839", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of all people logged in with a height of 180 cm", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "students starting before alice finishes", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1034", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people not studying computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2733", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee started on the same date as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_636", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with a start date that is later than 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_743", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who went to brown university and are single", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_83", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people are friends with employees who strated before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_79", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the birth city of employees with an end date later than 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the person with the most friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_662", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee who left the day alice joined", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1439", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_324", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who has two or more genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_919", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find employees who have the fewest number of job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1440", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of student whose field of study is not computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_320", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employes whom have a start day that is later than the start date of student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_102", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born in over two places", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_3368", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "employees who quit their job on the same day alice started her job", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2253", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person 180 cm tall who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2376", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "who are alices friends from her hometown", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_808", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is the friend of the student who quit in or after 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1510", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees who didnt start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3244", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born after alice finished school", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_3105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what person is friends with employee who ended earlier than 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_169", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person is logged in and was born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2576", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that did not stop working in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3329", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has an end date that is before the end date of alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_656", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the person who started working after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3070", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where were the people that stopped working before 2004 born", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1921", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me a list of students whose start date was in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1442", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friens with students that have a start date not equal to 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_749", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of students who joined after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_858", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with a height of 180 cm and their relationship status", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1803", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who is shorter than 180cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3417", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "single people who are 180 cm tall", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_348", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is the employee leaving the company after alice leaves", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3462", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth city of person whose height is 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_844", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who has two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_833", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which student started on alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2927", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a friend of someone who quit after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1614", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who went to brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_test_544", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "which employees strated after 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_213", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the date that alice started her software engineer job", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2520", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "friend of employee whose end date is after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1130", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that started working in or after 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "male friend of alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3087", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which student ended at most on alices birthdate", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_439", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_872", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_538", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees working for the most employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2421", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the friend of the employee who employment end date is at least 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status that is not similar to alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2952", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what students have an end date that is the same as student alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1609", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with no birthplaces", "source": "person that has the least number of birthplace", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string birthplace)))", "qid": "socialnetwork_train_853", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "employee who works as a software engineer or manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_448", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all people with relationship status of two people", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_649", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find people who have friends that are 180 cm tall", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_296", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "gender of employees that started before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students starting on or after alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_324", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the number of city", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_1727", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that stopped working when alice stopped school or before", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_103", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a worker who started after student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_494", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of student who does not graduate by 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3132", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whos got more than 2 genders down", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2832", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "persons who were born on or after start date of alices study", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_523", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "a friend of someone born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3017", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "which employees started after alices birthdate", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1102", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee started their job on the same day as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1821", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are the birthplaces of employees starting after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1415", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who stopped working after 2004  and has connections to me", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_165", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student started earlier than alices end date", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_550", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what males were born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3308", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is the relationship status of a student whose end date is no later than 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_907", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started school on or before the day alice stopped working", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2662", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a friend of alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find me the employee who started around the time alice departed", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_469", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "whats the relationship status of the student starting on or before 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2419", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees whom have an end date bigger than the start date for employee alice", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3189", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student started the day alice quit", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1860", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a person born after alices first day of school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_121", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what employee has less than two jobs", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3324", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student ending date is earlier than 2004", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2555", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice quit her software engineer job", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_3383", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find people who are students of a university that is not brown and their friends", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1741", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what genders are alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2499", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which employee quit their job first", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_395", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all employees who started in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_625", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the employee whose last day was on alices birthdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_695", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started school before alice started school", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_947", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the status of the two peoples relationship", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_761", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which people are friends with students who did not start in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2739", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped school after alice was born", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2311", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with students who graduated no sooner than 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1383", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has less than two previous job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2228", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started before alice stopped being a student", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1443", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who began school after alice graduated", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2894", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "whats the relationship status of employees who are not software engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped school when alice started working", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1401", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish on alices birthday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_645", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what cities were people born in 2004 born in", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_744", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "working people with two or less job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_109", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone born during or after 2004", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_831", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "find single friends of alice", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1882", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "when did alice finish studying computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_771", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which people are friends with students who graduate after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_667", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what sex are the employees who did not start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have an end date that is the start date of employee alice or later", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2598", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee of mckinsey is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2541", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are 180 cm tall and in a relationship with ailce", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2649", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "student who graduated before alice quit her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2822", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where were students born who started after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_193", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "city where person whose relationship status is single born", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1375", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which date did alice start who finished in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1121", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "people who have the same birthplace as alice and are 180 cm tall", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_test_693", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students whose end date is 2004 or earlier", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3041", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee ending before alice starts", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1035", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2451", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born in 2004 and are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2286", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who is the employee", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2145", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees friends with last date of work before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2827", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is thre relationships status of employees whose last day was before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_549", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender do at least two people have", "source": "gender that is gender of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_111", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what students have a field of study that is the same as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3268", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people have a height of 180 cm and field of study that is computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_183", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students graduate no later than alices first day of work", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2517", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has been employed by the most employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3316", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who finished school the earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_613", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what university does the 180 cm tall person go to", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_711", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "birthplace of less than two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_185", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "friends of employees who are not software engineers", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1706", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students who have an end date greater than the start date of employee alice", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1557", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birth city of employees with an end date that is not 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_805", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started in 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1711", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that have friends that alice is friends with", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1178", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what employee has a start date later than the end date of alice", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2129", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm tall working at mckinsey", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2532", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is the student whose start date is at least 2004 friends with", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_397", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who quit before alice quit her job", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1291", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which peolpe are exactly 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3458", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "student whose end date is not before end date of employee alice", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1630", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students studying fields other than computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3096", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started no later than alice did", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2993", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who have more than two relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_478", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find employees starting on or after alices last day", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1289", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee who started on or after alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_523", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of students that did not finish school in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3412", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are not alices friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1743", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with someone whos birthdate is 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2136", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find birthplaces of students not attending brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2086", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "180 cm tall persons studied in brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3482", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "an employee who left the company before alice began with it", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_24", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "is alices job title software engineer", "source": "job title of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "qid": "socialnetwork_train_571", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "online people who were born in 2004", "source": "person that is logged in and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_881", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "a friend of someone with a start date of at least 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_625", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have a start date later than the birthdate of alice", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_129", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me an employee whose start date is before or equal to the end date of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2982", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "current users who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3366", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who are software engineers or project managers", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2309", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what is the gender of employee who started in year other than 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who started their job before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_289", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have a start date that is the same as employee alice or greater", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_687", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of people that stopped working after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1534", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have friends that go to a school other than brown", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_674", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "genders of people that are currently online", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what did alice study at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1874", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people who have friends that are currently online", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_356", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "people with three or more friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_608", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what companies employ people with a height of 180 cm", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the names of all students who graduated between 2004 and 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_239", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "180 cm tall person with same birth place as that of alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_3271", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what university did alice stop attending in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_test_814", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "who are friends of people who werent working until at least 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_490", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people of the most numerous gender", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2167", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "a 180 cm tall person with same relationship status as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_test_605", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who were not born in 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_51", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "male 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3437", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has a smaller end date than 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1814", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with last day matching alices first day at school", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2799", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_184", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is relationship status of employees with start dates other than 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_374", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have a start date that is no later than student alices end date", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_764", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3115", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people that have two or less friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1937", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that are male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1321", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "employee whose start date is not before end date of student alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1125", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school when alice stopped working", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2511", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the same height as alice at 180 cm", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1527", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which person has a relationship status the same as alice", "source": "person whose relationship status is relationship status that is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3527", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what city is the birthplace of a student that is not studying computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3206", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started after alice quit her job", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_317", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the oldest person", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_729", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "which employee started earlier than 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2458", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2495", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "students who died before alice was born", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1391", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of the person born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_657", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "students who began school in 2004 or later", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1408", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started no earlier than alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3272", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has friends who are single", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3137", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "alices friends who born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_692", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "where were people that started school in any year but 2004 born", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3239", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who are people with a birthdate of 2004 friends with", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2915", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "birthplace of people who did not start their job in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3344", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees with an end date that is less than alices birthday", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2264", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are male and born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_382", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "people that are friends with someone that stopped working in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_380", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the students that graduated before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_218", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did student of computer science alice finish", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_2589", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "student who graduated after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1502", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of people that started school in or after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of two or less people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_621", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee whose end date is not after alices end date", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1320", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_500", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which person was born in more than 2 places", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_1233", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "show me which cities the people starting before or after 2004 were born in", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2236", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me employees with less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_127", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who joined their jobs in years other than 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_681", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employer with the least employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_440", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person was born in new york", "source": "person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "person born before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_2789", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "when did alice quit job at mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2364", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what student has a start date after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3286", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who started working on or after the day alice ended school", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3523", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students completed school the same year alice began", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_123", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "persons born in or before 2004", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2634", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "relationship status of employee whose job title is not software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2922", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has most friends", "source": "person that is friends with the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_660", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "any friend of alice that is logged in", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1796", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find employees starting before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2579", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the employee that was hired closest to the date alice was hired", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2303", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of people studied in fields other than computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3102", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2710", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birth city of a student who didnt start in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the employee who did not start in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_609", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find singlestatus people who are alices friend", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that stopped working after alice started school", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_901", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born before 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_284", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "find someone shorter than 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_765", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (ANON_NUMBER) (ANON_NUMBER)))))"}
{"paraphrased": "friend of employee whose end date is not after 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_338", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who started on or after alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_361", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with employees who strated in or after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have a field of study that is not computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_313", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who started to work before alices enrollment in school", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1745", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is online and is friends with", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2912", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students with last day before or same as alices", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3336", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born the same day as or after alice", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what employees left when alice started", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2149", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_656", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is friends with someone who doesnt work for mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who stopped working the day alice was born", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_223", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with not more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_421", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born before alice quit her job", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_391", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "birth city of student whose start date is not 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2925", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status  of the employee who does not work for mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_253", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who finished before alice started", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_851", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of alice and bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1873", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "which employees had an end date before alice started school", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2614", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school after 2004 or after 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2338", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting in or after 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2138", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees finishing contemporaneous to or before alice", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_798", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "males who were born in new york", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1870", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what city were less than two people born in", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2007", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find employees starting on or before alices last day", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2571", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the student who began school no later than 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which student started school on the last day alice worked", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_495", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with employees whose last day was no sooner than 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_520", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is youngest", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1616", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "people that have two or more relationship stutuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_1782", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find people with a height of 180 cm and micknsey as their employer", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2206", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "is alice going to brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_1890", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what students have an end date later than 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_790", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started school when alice was born", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2557", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of students whose last day is before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_7", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born in 2004 and born in new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2414", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "alices quit date", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3390", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student with the most recent end date", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_750", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "anyone has similar relationship as of anyone logged in", "source": "relationship status that is relationship status of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2276", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "people who are friends with an employee that started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2960", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who finish before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_311", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that have two or less birthplaces", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_417", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find gender of persons born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3278", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people with a height of 180 cm", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_742", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "students who ended school the day alice started working", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2127", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with someone who started working during or before 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1214", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the student who graduates in 2004 or later", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_492", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who has the least friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_58", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people with two or more birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_1909", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which person has the birthdate of alice", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_1169", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which students last day was the around the same day as alices last day", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2608", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what genders are people that started school in any year but 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3000", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who joined work after alice", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1342", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "either 180cm or 200cm", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_824", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "which one of alices friends was born in new york", "source": "person whose birthplace is new york and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_412", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what city is the birthplace of at most two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_260", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find student with last day other than 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1481", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of employees who joined before 2005", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1904", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who quit before alice started", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3216", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who is enrolled on the day of alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_774", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who quit before alice was hired", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_644", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a man who is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_447", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what student has a start date that is later than that of student alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1024", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of all students who started after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2461", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who left before 2004 or in 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_592", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people who joined their jobs before 2005", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_237", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the field of study of alice who finished in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_test_527", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which employees are not employed by mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2022", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people with an end date of 2004 are 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1107", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "find relationship statuses of students with a start date that is 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3226", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with employees who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2508", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is relationship status of employee whose last day was after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3420", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "find students who have a start date that is either 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_175", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school on or before the day alice started school", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_127", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city is the birthplace of two people", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_518", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "height of a person", "source": "total height of person", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_test_694", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find people that have at least two birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_2437", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "employees who quit their job before alice started working", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_403", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students go to brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_150", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_803", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the birthplace of a person whose height is 180 cm", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employees who started work before alice started school", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1437", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a friend of the person who is online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_1629", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what gender is not claimed by alice", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is born in new york and friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2442", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "gender of student whose end date is at least 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_62", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with height either 180 or 200 cm", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_2336", "anonymized_target": "(call listValue (call concat (ANON_NUMBER) (ANON_NUMBER)))"}
{"paraphrased": "what sex are the students who ended from 2004 on", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2256", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who start after alice leaves", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2544", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose start date is minimum 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2400", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender is the online person", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_95", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "students starting at the same time as alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_108", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are friends with students hired to start on or before 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3109", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of did not attend brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_22", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee who left before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_959", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is single from new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2191", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee whose last date was before the day alice started", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3461", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who were born in new york who are 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3230", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what employee started on the same day alice quit her job", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_212", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with students who started school in 2005 or later", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1576", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where were people that started school before 2004 born", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_97", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee whose end date is start date of employee alice", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_225", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship statuses of students who began school after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_55", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of everyone currently online", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_3285", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "who went to school but did not start in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2153", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who quit as late as alice", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_236", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of an employee starting before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_222", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the people joined work after alices birth", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_751", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who start on alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2393", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm tall and is studying computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_1810", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees friend with a last day in 2004 or before", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_120", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of students not starting in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1685", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with two or less friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2636", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "employee whose end date after end date of student alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_882", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find males that are single", "source": "person whose gender is male and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2380", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the number of the field", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_3134", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what are the birth cities of employees who are not employed by mickinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2639", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students whose last day was 2004 or later", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_193", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of people that finished school after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2283", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who is not friend with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_181", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find me everyone at least as tall as alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2676", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "people who work at mckinsey and are 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_389", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people who are friends with employees who started working in or before 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_968", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who quit their job on the same day or after alice got hired", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_371", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the person who stopped working in 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1545", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with a gender of male and their friends", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_669", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "genders of students not at brown", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_269", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find oneperson birthplaces", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_232", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "frinds of alice currently logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_481", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "name a person in at least two relationships", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_799", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who has less than two friends", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3454", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "students who graduated on or before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1365", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is studying the most things", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1394", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which person is friends with an employee who was here in 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee ended no greater than alices start date", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_614", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the gender of students whose end date is no later than 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1286", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of a student who graduated 2004 or after", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3078", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people were born after alice left her job", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_266", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who is friends of employees who have a job titale other than software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3110", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the single people", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1932", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "employees who started after alice graduated", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2199", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees starting on or after alices first day", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2593", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with a start date no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3190", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who have friends who left their jobs in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1807", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born before alices last day of employment", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_225", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "where were people that stopped working after 2004 born", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_105", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people that are friends with employees who have an end date no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2413", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alices friend who is logged in", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the relationship status of employees whose last day was after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_845", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is relationship status of employees starting after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_630", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "how many students in this field", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_2731", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what person was born on the last day of alices employment", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_2068", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped school before alice started working", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_870", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship of the student who did not attend brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2290", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person was not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_2098", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students graduate in 2004 or 2010 or before", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1186", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person born in new york and who is 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2963", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "when did alice leave in 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_2489", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "who are some of alices friends connections", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1891", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are single and were born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1755", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what employees have two or fewer job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1926", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born after alices first day of school", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_707", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what employees have an end date that is later than that of student alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_321", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "males that are currently online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_test_502", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "student who left on or before alices joining", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2870", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students finishing contemporaneous to or after alice", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2349", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a program manager or a software engineer", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2220", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "who is taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_195", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "find those that are friends with students who have start dates earlier than 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1688", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who works at mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_284", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student was the last to finish", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1659", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a friend of a student ending in 2004 or before", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3306", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city is the birthplace of the employees who stoped working for us before 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_681", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person whose name is alive or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_920", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "what is job title of employee alice", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1433", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who stopped working at the same time as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1298", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the employees relationship status who started after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_328", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of people who quit their jobs in 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_734", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has the same end date as alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1812", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of people born is 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3282", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "what person is friends with the online person", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "student whose fields of study are smallest", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2354", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birth city of all employees who have a start date that is 2004 or later", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3289", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of alice with birthdate in 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_864", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "friend of employee whose start date is at most 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_922", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the students that studied either computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_689", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are 180 cm tall and study computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_1402", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which women are 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_test_755", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people who are friends with alice and are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_167", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "relationship status of students finished after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the employee who who left after alice started", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1640", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with students who start date is 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_12", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee with smallest end date", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1546", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the 180 cm tall persons job title", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_617", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which singles are 180 cm tall", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1092", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who was hired after alice quit", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_90", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of students who did not graduate in 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_612", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplace of employees who are not employed by mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_885", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students whose end date is later than 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1404", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name the employees who quit the job when alice was born ", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_857", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that have a friend that works for someone other than mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have an end date after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2924", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the students gender who ended at least in 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3444", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what city has the least births", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3330", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which employees last day is no later than alices birthdate", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_777", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is the newest employee", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1638", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1986", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students with the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2352", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3252", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "friends of people who became students in 2004 or earlier", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_626", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friend of student whose end date is before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_776", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_28", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what student started after alices birthdate", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1522", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find someone who lists 2 birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_1066", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee has the largest end date", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3280", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of employee whose end date is not 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_69", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the students relationship status who didnt start in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1911", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "the relationship status of a worker who didnt leave in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3393", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started school when alice started work or after", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2538", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employee with the earliest start date", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_133", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "is the person single", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_74", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find alices friends born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_515", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "person that stopped working before alice stopped school", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1309", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city was alice and bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_3505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what university did alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_3143", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what employees started on alices birthday", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2609", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finished school by 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2227", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees with the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2002", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "180 cm tall people worked at mckinsey", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2157", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find friends connections who graduated after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1584", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people are friens with alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1517", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that stopped working before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_116", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me 2 people in a relationship", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_2341", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who was born on a date before alices start date", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3148", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "a 180 cm tall person", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1072", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the relationship status of people studying anything but computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2691", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of working people that dont work for mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1799", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of the students that did not start in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2820", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the student who ended after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_688", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has a start date that is no earlier than the end date of alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_454", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees friend with title other than software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3404", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with students who started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1600", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what people are friends with alice and have a height of 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_622", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "all 180 cm tall people who were born in new york", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_101", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the relationship status of alices friends", "source": "relationship status that is relationship status of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_672", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find people born between 2004 and 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3246", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "people born anywhere but new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_409", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people born in 2004 and who are 180 cm tall", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2684", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which male has a relationship status of single", "source": "person whose relationship status is single and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1623", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees that are not employed by mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_115", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of employees who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_288", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender are the working people that are not software engineers", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_759", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "friends of alice in similar relationships", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_442", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which employee was most recently hired", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_167", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender has two or fewer people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_61", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what was the graduation date of alice in 2004", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_1181", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of an employee whose start date is later than 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have the greatest amount of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_593", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who leave after alices birthday", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2687", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who completed study before alice joined the job", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3060", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who began school before alice graduated", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_33", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplaces of people who quit their jobs after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_46", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student who started on birthdate of alice", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_747", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what relationship status is claimed by more than two people", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1973", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who was born on or after alices last day of employment", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which employee has no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_753", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the relationship statuses of employees who have an end date that is no more that 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_462", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the gender of the students who are not studying computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1938", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who quit their job before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_673", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with a height of 180 cm and their friends", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2712", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "name a city that fewer than two of the people were born in", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3511", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "alices friends born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1201", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is the field of study of those who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_619", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employees who started working in or after 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_666", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what sex are the employees who did not quit in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_424", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people with less than two friends", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_325", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who are people who work anywhere but mckinsey friends with", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_180", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "show me the students starting at the same time or after alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_664", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students who have fewer than two field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_350", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have an end date of 2004 or later and who are their friends", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_447", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all people with friends that finished school in 2004", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_709", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the city that is the birthplace of at least two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3089", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find all people who is friend with people born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1924", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "persons born in new york", "source": "person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1722", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that started working before alice stopped working", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1221", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with the student leaving by 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_489", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee that ends before alice starts", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1149", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of nonsoftware engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1369", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "friends of people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_524", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "people that have two or fewer employers listed", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1337", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are single and born in new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_754", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students started at the same time the employee alice did", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2186", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who left on the same day or later as alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_451", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is friends with someone whose start date is no later than 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1194", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of a student with an end date of 2004 or later", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_699", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which of my friends have a single status", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_96", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "180 cm tall brown university student", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3205", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees friends not employed at mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees with a start date no later than 2004 and their friends", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1608", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born in 2004 who are 180 cm", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_830", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "who was born in 2004 who is friends with alice", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3150", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what student has an end date that is later than the start date of alice", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_950", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "job titles of all people who are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3067", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find the employee that has less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_638", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee with the longest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3418", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has two genders", "source": "person that has at most two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_train_2444", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find me the two people born in the same city", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1734", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "students who finish after alice starts", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1413", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students graduate when alice was hired", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1409", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find alice or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_test_871", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "people that are friends with the new emplyees that stars after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_832", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped working when alice did or before", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1006", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who was born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_1177", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "what is the average height of everyone", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_400", "anonymized_target": "(call listValue (call aggregate (ANON_STRING) (call getProperty (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "what is alices termination date", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2006", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did software engineer alice left", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_1253", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find employees whose last day is after student alices first day", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2477", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birthplace city of students who have a start date later than 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_21", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the people who joined their job before alice joined her studies", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1305", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date that is the same as student alice or greater", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2814", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are the same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_train_2440", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "who is 180 cm tall and has an end date of 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2298", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "relationship status of students who joined before 2005", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3315", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who is a friend of an employee that has worked since 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_237", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people that started work in or before 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3107", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose end date is before end date of employee alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_130", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "relationship status of students finishing after 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_671", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the field of study of student alice whose university is brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1531", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "presently logged in persons whose relationship status is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1941", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find friends of people who started work in 2004 at the earliest", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_845", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are friends with the employees leaving the company after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_694", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee quit before alice quit her job", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_409", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born in 2004 or later", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1353", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "people that stopped school the day alice was born", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1133", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people are friends with alice and also have a relationship status of single", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_733", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "student whose end date is not before start date of student alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3451", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "did alice study computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_869", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people that are friends with people that quit their jobs before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_151", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee whose start date is birth date of alice", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_604", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplaces of employees who started after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_834", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees that have a start date that is earlier than the birthdate of alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_373", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of students joining before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_627", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student who does not graduate by 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_333", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student started the day alice left her job", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_902", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what are the relationship statuses of student who did not graduate in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_197", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me the employee who quit between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_119", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with an end date that is no later than alices birthday", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2904", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "one student who didnt stop in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1747", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices job when she started in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3243", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which student has an end date after alices birthdate", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_214", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city were the most people born in", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3310", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people that are 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2748", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "people who are friends of bob or alice", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2051", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "people that started work when alice did or before", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3362", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "any male who is born in new york", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2757", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students graduated after 2004 or 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_865", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student is not from brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_321", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student started before alice was born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3192", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of students starting on or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_696", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees starting before alice finishes", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1179", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students whose end date is either greater than 2004 or 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2778", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_624", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the gender of employees with a start date not equal to 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_730", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "persons whose height is 180 cm or more", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2173", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (ANON_NUMBER))))"}
{"paraphrased": "who is alices male friend", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1011", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who has two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_1480", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people who joined after alice was born", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1090", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birthplace of employees whose last day is not in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_848", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of someone born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_479", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find the people who are friends with students whose end date is farther than 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find employees starting other than in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_780", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people with friends that went to school but not brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_210", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has friends who do not have computer science as a major", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what university did alice graduate from in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_605", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "what students graduated in 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_174", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are the same gender as alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_45", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what student graduates the earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1202", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students have a start date that is no earlier than the end date of alice", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2269", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who were born after alice started working", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "who is born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_100", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find people who are friends of alices friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3318", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "students who ended school the same day that alice ended school", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1243", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the student whose start date is on alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_741", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me students whose start date is either 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_334", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm tall and the same relationship status as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2908", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "men that are friends with alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_797", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find all male friends of alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2882", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what birthplace has at least two people in it", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1705", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "when did alice stop working as a software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_2881", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "employee who started in alices end date", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3292", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born after 2003", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3463", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "find the gender of employees who have an end date that is 2004 or later", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_594", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of students with a start date less than 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2987", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employees start the day alice starts", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1333", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that finished school at the same time as or before alice did", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2214", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who finished by the time alice finished", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2217", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee ended on alices start date", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1551", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has a start date of at least 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_459", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city is the birthplace of students with an end date no later than 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3317", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who completed in or after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_222", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a student who started in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1542", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who has minimum number of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_531", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started after alice did", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_327", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who graduated before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1933", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender are employees who have a start date of 2004 or greater", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_712", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name a person who is friends with alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_640", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "connections from friends who dont work at mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2152", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose field of study is not computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2042", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish on or after alice starts", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2863", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices job title from company she left in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1468", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "student whose start date is not after start date of student alice", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_110", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has the same start date as alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_257", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date later than 2004 and who are they friends with", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1838", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "anyone single who is logged in", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3046", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "student that has studied at no more than 2 universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3123", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what was alices job title in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_test_139", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is not after birth date of alice", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3426", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who finishes earlier than alice enrollment", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_816", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with a start date the same as employee alices end date", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_460", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of those who are friends with alice", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1046", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "employee who quit before birthdate of alice", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1398", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee with least number of job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1562", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of those two people", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1975", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "relationship statuses of employees who quit their job before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3290", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a mutual friend of alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2633", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "one worker who is a software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_419", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is born in 2004 at new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_738", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the gender", "source": "male or female", "target": "(call listValue (call concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_1879", "anonymized_target": "(call listValue (call concat ANON_ENTITY ANON_ENTITY))"}
{"paraphrased": "alice who is a student of computer science is a student of which university", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_1389", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which employees had a quit date that was not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1438", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee has end date equal to employee alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3277", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student that graduates at least before alice starts school", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_35", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me friends of students graduating before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_497", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what day does alice start", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_test_53", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who have a height of 180 cm and a relationship status of single", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2750", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people that started working when alice stopped working or before", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_410", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "alices graduation date in computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_test_213", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "a friend of alice that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_375", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of one employee whos not a software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_975", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who finish before alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1209", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the employer of a person that is 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_627", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find students whom have a start date of 2004 or later", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_404", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started no later than 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_243", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born most recently", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2467", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "what person is friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1425", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find someone born during or before 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_514", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "find students whose last day is after alices first day", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_93", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has friends that are students who have a start date before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3513", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender represents the least number of people", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3204", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find employees whom have an end date that is equal or greater to the birthday of alice", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1769", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the people with the only one gender", "source": "person that has the least number of gender", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string gender)))", "qid": "socialnetwork_train_2221", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "what gender is claimed by more than two people", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2738", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people who were born in 2004 or earlier", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1849", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1))))"}
{"paraphrased": "students finishing before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_827", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the friends of people who are currently online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_428", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "find people who are 180 cm tall with last day in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1889", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "gender which is same as at least two persons", "source": "gender that is gender of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_570", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person with the same birthday as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_3187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING))))"}
{"paraphrased": "what is relationship status of students with end dates other than 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2080", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of people who stopped working in 2004 or later", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2766", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all students that will start at the same time or after alice starts", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_282", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of employees who began working by 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2899", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who was born after alice started", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3168", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what employees have a start date that is the same as student alice or later", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_343", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started on alices last day", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2683", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting after alices last day", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2786", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who are studying the same field as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2547", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has similar relationship status that of alice", "source": "relationship status that is relationship status of alice and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_3146", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people with the most friends", "source": "person that is friends with the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1113", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "which students have the fewest majors", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1574", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "one student who started in or after 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_691", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me employees that have worked for no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3432", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee who left after alice started", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_0", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "where were alices friends born", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1582", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "students who have no more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1707", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did alice start attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_1416", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm tall and single", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_13", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what is the employees relationship status who did not end in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2021", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3221", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all students who attended either brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_56", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose job title is not software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2003", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student left first", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1993", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what student has a start date the same time as the birthdate of alice", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2974", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with employees that have an end date of 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1131", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the non computer science major", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_696", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who have friends and did not quit their job in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_182", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find friends of employees who started in 2004 or after", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2304", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "one person whose friend started studies before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1247", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is friends with the student who began school later than 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_791", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person with minimum two relationship statuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_2375", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which students attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_389", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born in the same place as the 180 cm tall person", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2150", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what students have been at college for the least amount of time", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3395", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "alices online friends", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_test_157", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "who are the friends of employees with a start date before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_12", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what gender are the people that finished school in or before 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2261", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are logged in and has the birth place as newyork", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_1731", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "where were the people that finished school before 2004 born", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1159", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who ate 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2900", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "when did alice start working for mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_246", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "birth city of all students who started earlier than 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2120", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born on the day alice started school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_test_665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees are either software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2685", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with last day on or before alices first day", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1671", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth city of student whose end date is not after 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_929", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find birthplace of student with last day other than 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_702", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student that is enrolled in brown or ucla university", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1461", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me the emplotee who started after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3273", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where were the people that started school in or before 2004 born", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1971", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "gender of employee whose end date is before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_365", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students with last days before alices first day", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2296", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is alice friends with thats 180 cm tall", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_736", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "an employee ending before or when alice ends", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_26", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which relationship statuses are claimed by the males in my network", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2884", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what university does alice study at", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_3356", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who graduates before alice starts", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1441", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of employee with title other than software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_785", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find the gender of no more than two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_680", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find employees who have a start date that is either less than 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_769", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees with fewer than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1250", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what city has a birthplace of a person who is at least 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what employee has no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2182", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with someone born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_837", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what student has an end date that is at least either 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2403", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the birth cities of students who have a start date in 2004 or greater", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_292", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who started after alice quit her job", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_698", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose end date is after alices birth date", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1048", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the friends of singlestatus people", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_719", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "all 180 cm tall people born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3200", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what students have end date names that are either 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2417", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people with male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_434", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "find students of same gender who quit the job before 2004 ", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_632", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee started after or during when alice started school", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_826", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees whom have a end date that is no later than the start date of employee alice", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1963", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what gender is the student whose end date is 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2274", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of student that left school before or on 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3441", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is 180 cm tall and has the same birthdate as alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1868", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people with the same gender as alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2387", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "what employees have an end date that is either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2671", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me a male born in new york", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3516", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee who quit on alices birthdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2502", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students last day was the same as alices", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_453", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all of alices friends that were born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_464", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees whose last day was before or on alices last day", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_63", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student ending when alice starts", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1384", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that started work after alice stopped school", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_650", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_1967", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "students that will begin after 2004 and no later than 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_112", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person has two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_3024", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee quit their job after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_804", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employee whose last day was also alices last day", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_577", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the relationship status of employees whom have an end date that is bigger than 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_126", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who were born between 2004 and 2010", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3331", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "find student whose first day if before alices last day", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_258", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "locate students who have an end date that is no greater than employee alices", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1400", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who were born after alice quit her job", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_851", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "which student has attended less than two universitys", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_668", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student started after alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3057", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which genders are alice and bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2665", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "find friends of employees who did not start in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_568", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees have an end date that is smaller than that of employee alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2995", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students who have a start date smaller than that of the end date for employee alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2679", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born in new york and is 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_358", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find students with fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2977", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who stopped working in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1053", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is the gender of working people that did not stop in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_856", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2405", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that stopped working in or after 2004 or in or after 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_325", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "in what city was the employee who is not a software engineer born", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_153", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who quit in 2003 or earlier", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2391", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which friend of alice is online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2353", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "which employee has the same boss as alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2660", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the relationship status of working people that are not software engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_640", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who are 180 cm tall and are single", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_280", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is the shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_test_724", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "who has the fewest number of friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_286", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "friends of people who completed their studies after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3128", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people who are friends with alice and born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1479", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which students went to the smallest amount of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_276", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day is no earlier than 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_504", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_903", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "find me the student who started on the same day as alices departure", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2040", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are male and 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1672", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "find the gender of people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_216", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "who was born in two places", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_550", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "where were the people that started working in any year but 2004 born", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1862", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employee has the longest employment", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1805", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birth place  of students whose start date is smaller than 2004 and 2010", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_801", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_945", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which students graduate the day of alices last day at work", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_107", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is 180 cm tall and has a start date in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1690", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "which employees last day was not n 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2107", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the gender of a 180 cm person", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_807", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "find employees who started on student alices last day", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3125", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with employees who started working before or after 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3398", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which students ended school in 2004 and 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_449", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with a student who did not start in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2903", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find someone born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_941", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that stopped school before alice did", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1020", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with the person is quit no later than 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1532", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of two people with the same status", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1847", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the birth city of the student who didnt end in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_476", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees whose last day was after alice started school", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_363", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people with only one friend", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_437", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who works for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3445", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who is friends with an employee who retired at least 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_739", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has a single friend", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2867", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what is the birth city of people who are friends with alice", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3291", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "the person who has the most genders", "source": "person that has the most number of gender", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string gender)))", "qid": "socialnetwork_train_586", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "mention the name of an employee whose end date is either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2989", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees starting after 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1028", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose end date is not after 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3279", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "the gender of a student who started before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3208", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which employee ended later than alices birthdate", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_810", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "gender of employee who left before 2005", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_573", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have an end date before 2004 and who are their friends", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_505", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "whats the relationship status of the student leaving prior to 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_647", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee with same start date as that of employee alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_595", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are 180 cm or 200 cm tall", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3396", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (ANON_NUMBER) (ANON_NUMBER))))"}
{"paraphrased": "people who joined study on the day alice completed", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1308", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends of employees with a 2004 end date", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_773", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "anyone single born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_281", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students who started no later than 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_732", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me an employee whose end date is later than the end date of student alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2763", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person who is 180 cm tall and who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2999", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "a person with a friend whos not a computer science major", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1908", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has minimum number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_3085", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING)))"}
{"paraphrased": "a student starting when alice ends", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1111", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student of only one university", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2195", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with alices friends", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people who are friends with the employee that does not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2798", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "name an employee who quit after alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3165", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what company employs an 180 cm tall person", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_952", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "which student ended school right when alice started her job", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1331", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a person 180 cm tall who was born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1219", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "whose relationship status is unique", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_606", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find the birthdplaces of new employees we have starting by 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_164", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people who started in 2004 and are 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1040", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "student whose start date is end date of employee alice", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_433", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "number of cities people are from", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_209", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people born in 2004 that are single", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_77", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that were born on the day alice started work", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_329", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has minimum two friends", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2546", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "gender of employees whose end date is later than 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_394", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who start after 2004", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1429", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_433", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what is a person who has two genders called", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_860", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "start date of alices study which ended in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_967", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "people completed their study before alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_194", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born on or before alices birthday", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3486", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the relationship status of a friend of male", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_199", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "which students went to fewer than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_88", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee quit school before alice started", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_858", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the least common relationship status", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3413", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find relationship status of students whose last day was after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_160", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of students who started no earlier than", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2813", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "males who are online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_908", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "students who finish before alices birthday", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2562", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who quit after alice quit school", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_146", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is alices date of birth", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_3361", "anonymized_target": "(call listValue (call getProperty ANON_ENTITY (ANON_STRING)))"}
{"paraphrased": "find employees with the latest end dates", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1777", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "does alice work at mckinsey", "source": "employer of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_3186", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall and attend brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_508", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees with an end date that is the same or later than student alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1561", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find friends of student who started later than 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2852", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find someone who was born before alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_168", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "what is the last date of employee alice who started in 2004", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3419", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "friend of student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1392", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that started working when alice stopped school", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2257", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is friends with a student who started", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2237", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employee who left on or after alice joinde", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_136", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "someone who has studied at less than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_894", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what cities are the birthplace of students later than 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_197", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "students who started no later than alices birthdate", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1483", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born before alices last day of school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1792", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what people are friends with alice and have a birthdate of 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_808", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what employees have mickinsey as their employer", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2850", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace of students who did not join in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3116", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2389", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find friends of alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1447", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY)))"}
{"paraphrased": "name all students who quit before alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_199", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which gender is present in most number", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_76", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "people 180 cm tall who are single", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3466", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "people that stopped working after alice stopped school", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1823", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all relationship statuses for employees whose start date is no later than 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1795", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people from new york that are friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_730", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employees  city of birth who was born at or before 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_351", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "employees who are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2121", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3465", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "employee whose end date is before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_807", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2595", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING)))))"}
{"paraphrased": "which students started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2997", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "when did employee alice started", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_1198", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was born before alice left", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_821", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "an employee starting after alice ends", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2711", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who quit working most recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1241", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees last day was after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_516", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people born in 2004 are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_782", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who measures 180 cm and quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_623", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "what city is the birthplace of no more than two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_540", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "students who started in 2004 or before", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1162", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students started before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2603", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_2775", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))"}
{"paraphrased": "which students graduate no sooner than alices graduation day", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_246", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me all employees who quit before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1740", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student whose field of study is either computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2282", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat ANON_ENTITY ANON_ENTITY))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "students whose end date is larger than 2004 and 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3026", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me employees whose end date is the same as alices bithdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_628", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty ANON_ENTITY (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_24", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a single person who is friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_216", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what relationship status is that of two people at the most", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2860", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "find employees whose end date is the same as the start date for student alice", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1910", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all employees who quit in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_554", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employees started no later than 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3421", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who started in either 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_727", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people who are friends with alice whose height is 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_207", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "when did alice finish school", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3510", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who starts at least before alice finishes", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2322", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_591", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which people are friends with students who strated before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1720", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what employees started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1863", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people born in new york and currently online", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_525", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what person has a birthdate between 2004 and 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2335", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))"}
{"paraphrased": "what is number of a person", "source": "number of person", "target": "(call listValue (call .size (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_469", "anonymized_target": "(call listValue (call .size (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "where were students that did not finish in 2004 born", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2811", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with a height of 180 cm and the same birthplace as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_928", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people with birth date not in 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1896", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "an employer with at least two employees", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2721", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are currently online", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1469", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)))"}
{"paraphrased": "gender of student whose end date is after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2934", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "an employee starting when or before alice ends", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1913", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people have two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_956", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "who has maximum two relationship status", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1488", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "2004 graduates friends", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_25", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the job title of the person that is 180 cm", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1134", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "people that stopped working when alice started school or after", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2197", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people with two relationship statuses or less", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_3224", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what is the birthplace of the employee who didnt start in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1552", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "alice is a student at which university", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1645", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what students had a start date of 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2937", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3533", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "who is alice friends with that is single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2646", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what cities were the males in my social network born in", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2187", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "who is 180 cm tall and goes to brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_test_319", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employees who have a start date earlier than the end date of the employee alice", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2371", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people have a birthplace of new york who are also friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_180", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "which student stopped at the same time employee alice did", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1434", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what is the birthplace of students that dont go to brown", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_377", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees who did not stop working in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3091", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person who hasnt been in 3 relationships", "source": "person that has less than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_2344", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "what people have a height of 180 cm and a birth city of new york", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3298", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "when did alice start the job she left in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_94", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "name the friend of an employee who quit after 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_770", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find me all students with a single major", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_637", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students starting before 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2536", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "birthplace cities of students who started before 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2492", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "birthplaces of students who ended school in or after 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1208", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that are not friends with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_275", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "least common relationship status", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1152", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "relationship status of students who are not studying at brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_307", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people that are friends with employees whose start date is later than 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2059", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find people with a height of 180 cm and a state date of 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_647", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "friends of employees starting in or after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2610", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who has the most jobs", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_770", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who has the same relationship status as the 180 cm tall person", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2787", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what students started after or at the same time as alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1987", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friend of student whose start date is before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_931", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find students starting after alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_691", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "all 180 cm tall software engineers", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3455", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "what employee started the same day as alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2418", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find me friends of people logged in", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2431", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING))))"}
{"paraphrased": "birthplace of only one person", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_201", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the relationship status of students who are not majoring in compuer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2965", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "either 2004 or 2010", "source": "2004 or 2010", "target": "(call listValue (call concat (date 2004 -1 -1) (date 2010 -1 -1)))", "qid": "socialnetwork_train_2023", "anonymized_target": "(call listValue (call concat (date 2004 -1 -1) (date 2010 -1 -1)))"}
{"paraphrased": "the gender of one worker who left in 2004 or before", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_973", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student whose end date is on the date student alice started", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1634", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what person doesnt have the height of 180 cm", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2435", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee has the same relationship status as the employee who started earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_816", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what students have an end date that is no earlier than the start date of alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1954", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "in which university does alice study", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_227", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "city where the least number of people were born", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_256", "anonymized_target": "(call listValue (call countSuperlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call reverse (ANON_STRING)) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the gender of employees who left their jobs before 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_143", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "person that stopped school most recently", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1472", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who finish before alices birthday", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1605", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "working person with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_560", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have a start date before that of student alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2957", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "alices friends who were born in 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2767", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "people that started work when alice was born or earlier", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3299", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees who did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1684", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which student ended no later than alice", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1167", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people who are 180 cm tall and quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_383", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)))"}
{"paraphrased": "employee whose job title is same job title as of employee alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1204", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees with the fewest employers", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1071", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (ANON_STRING) (ANON_STRING))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find employees who have a start date other than 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2251", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "an employee starting before or when alice was born", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_645", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "student who started at or before 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2681", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find people logged in who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2956", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)))"}
{"paraphrased": "which employee quit most recently", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1589", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employees have been here less time then alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2659", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what employee had a start date as early as or later than alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2446", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find students with a start date earlier than 2004 and their friends", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_652", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "relationship status of employees whose end date is no earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_430", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who is now friends with the person who was born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3191", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "people that stopped school when alice stopped working", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_407", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that stopped school when alice stopped working or after", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2105", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_474", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who employs alice as a software engineer", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_test_536", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "people who are currently in a relationship", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_818", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find employee who starts after alices last day", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3114", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which students do not attend brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1641", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "what people have a height of 180 and are friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_834", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who is in the same type of relationship as alice and is 180 cm tall", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_756", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "who started school when alice started working", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_25", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "employees with less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_87", "anonymized_target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "name a male who is friends with alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1956", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "city of birth for people employed since 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_846", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find all people who have alices as a mutual friend", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2176", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (call reverse (ANON_STRING)) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find people with only one or two friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_802", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "what is the birthplace of employee who ended after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1207", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a student starting after alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2930", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the friends of all people who list their relationship status as single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3531", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY)))"}
{"paraphrased": "what was alices field of study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_2723", "anonymized_target": "(call listValue (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "who was the first person to start working", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_151", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "fine me friends of people who joined their jobs after 2003", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2292", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what person has only two friends", "source": "person that two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_714", "anonymized_target": "(call listValue (call countComparative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (ANON_NUMBER) (call getProperty (call singleton ANON_ENTITY) (ANON_STRING))))"}
{"paraphrased": "person whose birthplace is same as person 180 cm tall", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_544", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "who is friends with the person who didnt start working in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2745", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "what genders are the people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3337", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1))))"}
{"paraphrased": "students who graduated on or after alices birthdate", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_423", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people studying the same thing as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3219", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which people are friends with employees who started working after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_659", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "a friend of an employee that ends after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_797", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "find a person born before alice started working", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_755", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))))"}
{"paraphrased": "what job did alice leave in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2008", "anonymized_target": "(call listValue (call getProperty (call filter (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING) (ANON_STRING) (date 2004 -1 -1)) (ANON_STRING)))"}
{"paraphrased": "which employees started no later than alices graduation day", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_99", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "people that are not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_2496", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "relationship status of employee whose end date is after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1871", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "student who graduated before alice started her job", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2046", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "friends of people with 180 cm height", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2163", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "what gender is the employee who is not employed by mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2893", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) ANON_ENTITY)) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "people that stopped school in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_537", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student who left on or after alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1701", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty ANON_ENTITY (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2897", "anonymized_target": "(call listValue (call superlative (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (call ensureNumericProperty (ANON_STRING))))"}
{"paraphrased": "a friend of a student who started at least 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2222", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "which people are friends with employees whose last day was before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2135", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (ANON_STRING))) (ANON_STRING))))"}
{"paraphrased": "who works at mckinsey and is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2599", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER)) (ANON_STRING) (ANON_STRING) ANON_ENTITY))"}
{"paraphrased": "find students starting on alices last day", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_705", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee has an end date of at least 2004", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3468", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "find all people that are single and online", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_test_838", "anonymized_target": "(call listValue (call filter (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) ANON_ENTITY) (ANON_STRING)))"}
{"paraphrased": "what company emplys a 180 cm tall person", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1033", "anonymized_target": "(call listValue (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (call reverse (ANON_STRING)) (ANON_STRING) (call filter (call getProperty (call singleton ANON_ENTITY) (ANON_STRING)) (ANON_STRING) (ANON_STRING) (ANON_NUMBER))))"}
{"paraphrased": "employee whose end date not after start date of student alice", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3264", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "person who completed the education first", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1653", "anonymized_target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (ANON_STRING) (call ensureNumericProperty (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "a student ending before alice starts", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2607", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (ANON_STRING) (ANON_STRING) (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING)))) (call domain (ANON_STRING))) (ANON_STRING)))"}
{"paraphrased": "which employee started after alice was hired", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2732", "anonymized_target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (ANON_STRING)) (ANON_STRING) (call ensureNumericEntity (call getProperty (call getProperty ANON_ENTITY (call reverse (ANON_STRING))) (ANON_STRING))))) (call domain (ANON_STRING))) (ANON_STRING)))"}
