{"paraphrased": "employee who left after alice started", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_0"}
{"paraphrased": "find employees with end dates that are no greater than employee alice", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1"}
{"paraphrased": "who is alices employer since 2004", "source": "employer of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2"}
{"paraphrased": "what city has a birthplace of a person who is at least 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3"}
{"paraphrased": "people born on or after the date alice started working", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_4"}
{"paraphrased": "find all single people born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_5"}
{"paraphrased": "employees whose last day is before alice", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_6"}
{"paraphrased": "find friends of students whose last day is before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_7"}
{"paraphrased": "people born before alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_8"}
{"paraphrased": "which employees start date is the same as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_9"}
{"paraphrased": "which employeess last day was no earlier than alices first day", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_10"}
{"paraphrased": "what is alices end date when she was a student", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_11"}
{"paraphrased": "who is friends with students who start date is 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_12"}
{"paraphrased": "what gender is the employee who started in 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_13"}
{"paraphrased": "where were the people that started working after 2004 born", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_14"}
{"paraphrased": "what employee has a end date that is before the end date of alice", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_15"}
{"paraphrased": "people who work at mckinsey or google", "source": "mckinsey or google", "target": "(call listValue (call concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_16"}
{"paraphrased": "which city were at least two people born in", "source": "city that is birthplace of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_17"}
{"paraphrased": "find me the friends of the employee who started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_18"}
{"paraphrased": "gender of employee whose start date is not 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_19"}
{"paraphrased": "when did alice join at brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_20"}
{"paraphrased": "find the birthplace city of students who have a start date later than 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_21"}
{"paraphrased": "find people with a height of 180 cm who are the same gender as alice", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_22"}
{"paraphrased": "alices friends who are singles", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_23"}
{"paraphrased": "employees who started before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_24"}
{"paraphrased": "2004 graduates friends", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_25"}
{"paraphrased": "an employee ending before or when alice ends", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_26"}
{"paraphrased": "birth city of employee whose end date is not after 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_27"}
{"paraphrased": "people who were born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_28"}
{"paraphrased": "people that work for less than two employers", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_29"}
{"paraphrased": "who is born in a city where alice is born", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_30"}
{"paraphrased": "who has more than two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_31"}
{"paraphrased": "friends of alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_32"}
{"paraphrased": "students who did not graduate before 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_33"}
{"paraphrased": "find birthplaces of students whose last day was in 2004 or later", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_34"}
{"paraphrased": "all people currently online", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_35"}
{"paraphrased": "gender which is gender of less than three persons", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_36"}
{"paraphrased": "what person is a 180 cm tall male", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_37"}
{"paraphrased": "what students have a start date that is the same as student alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_38"}
{"paraphrased": "people who have friends and started working after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_39"}
{"paraphrased": "who is friends with the person who isnt a software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_40"}
{"paraphrased": "where were working people that did not stop in 2004 born", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_41"}
{"paraphrased": "males that alice is friends with", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_42"}
{"paraphrased": "a student who started before 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_43"}
{"paraphrased": "which employee ended earlier than 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_44"}
{"paraphrased": "find me all the relationship statuses of employees who started job after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_45"}
{"paraphrased": "birthplaces of people who quit their jobs after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_46"}
{"paraphrased": "employees whose end date is later than alices start date", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_47"}
{"paraphrased": "what gender has the most people", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_48"}
{"paraphrased": "which city were people who are 180 cm tall born in", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_49"}
{"paraphrased": "name an employee who quit before alice was born", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_50"}
{"paraphrased": "what sex are the employees who did not start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_51"}
{"paraphrased": "when did alice start attending school", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_52"}
{"paraphrased": "find students starting on or after alices last day", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_53"}
{"paraphrased": "which students started before the day alice graduated", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_54"}
{"paraphrased": "list the relationship status of people who quit their jobs before 2005", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_55"}
{"paraphrased": "what people have an end date of 2004 and height of 180 cm", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_56"}
{"paraphrased": "what employee has the same birthday as alice", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_57"}
{"paraphrased": "find employees who have a start date that is at least the same as employee alices end date", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_58"}
{"paraphrased": "people that started school after alice started working", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_59"}
{"paraphrased": "people that are friends with someone that started working in or before 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_60"}
{"paraphrased": "relationship status of employee whose start date is not after 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_61"}
{"paraphrased": "gender of student whose end date is at least 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_62"}
{"paraphrased": "employees whose last day was before or on alices last day", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_63"}
{"paraphrased": "what is the students relationship status who ended earlier than 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_64"}
{"paraphrased": "students who did not start in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_65"}
{"paraphrased": "find friends of people who were born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_66"}
{"paraphrased": "person with the most friends", "source": "person that is friends with the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_67"}
{"paraphrased": "person born after alice graduated", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_68"}
{"paraphrased": "find all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_69"}
{"paraphrased": "what employee was hired last", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_70"}
{"paraphrased": "online male member", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_71"}
{"paraphrased": "student who finishes before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_72"}
{"paraphrased": "name a person born in 2004 who is friends with alice", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_73"}
{"paraphrased": "is the person single", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_74"}
{"paraphrased": "people that have the least number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_75"}
{"paraphrased": "what employee has a start date that is the same as the end date of alice", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_76"}
{"paraphrased": "what are the relationship statuses of people that are currently online", "source": "relationship status that is relationship status of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_77"}
{"paraphrased": "find employees who have a start day at the same time as alices birthdate", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_78"}
{"paraphrased": "which people are friends with employees who strated before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_79"}
{"paraphrased": "the person logged in who is born in 2004", "source": "person whose birthdate is 2004 and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_80"}
{"paraphrased": "what is the employees relationship status who ended in 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_81"}
{"paraphrased": "all 180 cm tall people who studied computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_82"}
{"paraphrased": "people who went to brown university and are single", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_83"}
{"paraphrased": "find birthplaces of students starting in 2004 and later", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_84"}
{"paraphrased": "find me the gender of students who did not attend brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_85"}
{"paraphrased": "what did alice study when she graduated in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_86"}
{"paraphrased": "students who started on the same date as alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_87"}
{"paraphrased": "person who has a birthday before alice graduates", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_88"}
{"paraphrased": "person who is friends with students who joined in and after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_89"}
{"paraphrased": "who was hired after alice quit", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_90"}
{"paraphrased": "a friend of someone emplyed after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_91"}
{"paraphrased": "people that stopped work after 2004 or after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_92"}
{"paraphrased": "find students whose last day is after alices first day", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_93"}
{"paraphrased": "when did alice start the job she left in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_94"}
{"paraphrased": "what gender is the online person", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_95"}
{"paraphrased": "find me the student who left school before alice started", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_96"}
{"paraphrased": "where were the students of any field but computer science born", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_97"}
{"paraphrased": "employees starting before or contemporaneous to alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_98"}
{"paraphrased": "which employees started no later than alices graduation day", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_99"}
{"paraphrased": "who is born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_100"}
{"paraphrased": "people that started school in or before 2004 or in or before 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_101"}
{"paraphrased": "people that started school before alice stopped working", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_102"}
{"paraphrased": "people that stopped working when alice stopped school or before", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_103"}
{"paraphrased": "what employees have an end date that is later than either 2004 or 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_104"}
{"paraphrased": "where were people that stopped working after 2004 born", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_105"}
{"paraphrased": "what city is the birthplace of employees before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_106"}
{"paraphrased": "what are the start and end employment dates of alice", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_107"}
{"paraphrased": "what is the relationship status of person not employed by mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_108"}
{"paraphrased": "which employee has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_109"}
{"paraphrased": "find birthplace of student not studying computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_110"}
{"paraphrased": "what gender do at least two people have", "source": "gender that is gender of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_111"}
{"paraphrased": "students that will begin after 2004 and no later than 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_112"}
{"paraphrased": "what person has a relationship status the same as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_113"}
{"paraphrased": "which men are 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_114"}
{"paraphrased": "employees that are not employed by mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_115"}
{"paraphrased": "people that stopped working before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_116"}
{"paraphrased": "which people are friends with students who graduated no earlier than 2004", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_117"}
{"paraphrased": "which students graduate after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_118"}
{"paraphrased": "gender of student whose university of not brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_119"}
{"paraphrased": "find employees friend with a last day in 2004 or before", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_120"}
{"paraphrased": "which people that alice is friends with are friends with alice", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_121"}
{"paraphrased": "what person born in 2004 is 180 cm tall", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_122"}
{"paraphrased": "what students completed school the same year alice began", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_123"}
{"paraphrased": "friends of employees finishing in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_124"}
{"paraphrased": "who is friends with the employee who started no later than 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_125"}
{"paraphrased": "find the relationship status of employees whom have an end date that is bigger than 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_126"}
{"paraphrased": "people that stopped school on or before the day alice started school", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_127"}
{"paraphrased": "which student has at least 2 university to go to", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_128"}
{"paraphrased": "friends of alice who are 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_129"}
{"paraphrased": "which people are friends with alice and is 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_130"}
{"paraphrased": "what is the relationship status of people that started working in or after 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_131"}
{"paraphrased": "what is the gender of the employee who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_132"}
{"paraphrased": "employees who start before or when alice finishes", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_133"}
{"paraphrased": "what is the relationship status of people that started school in or after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_134"}
{"paraphrased": "where was the person born who is 180 cm tall", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_135"}
{"paraphrased": "employee who left on or after alice joinde", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_136"}
{"paraphrased": "employees whose start date is before or on alices end date", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_137"}
{"paraphrased": "who was born in 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_138"}
{"paraphrased": "what is the employees relationship status who started no later than 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_139"}
{"paraphrased": "what employees have a end date that is no greater than the start date of student alice", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_140"}
{"paraphrased": "whats the gender of students who started school before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_141"}
{"paraphrased": "fine me employees that are leaving before alices birthday", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_142"}
{"paraphrased": "employees leaving the company no earlier than alices start date", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_143"}
{"paraphrased": "people who are friends with somebody who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_144"}
{"paraphrased": "what is the university of a person whose height is 180 cm", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_145"}
{"paraphrased": "employees who quit after alice quit school", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_146"}
{"paraphrased": "students who started school on the same day as or before alive started", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_147"}
{"paraphrased": "students whose end date is on alices end date or later", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_148"}
{"paraphrased": "people that started school before alice stopped", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_149"}
{"paraphrased": "which students go to brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_150"}
{"paraphrased": "who was the first person to start working", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_151"}
{"paraphrased": "students whose start date is no later than alices", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_152"}
{"paraphrased": "in what city was the employee who is not a software engineer born", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_153"}
{"paraphrased": "the birthplace of an employee not ending in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_154"}
{"paraphrased": "genders of employees starting in or after 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_155"}
{"paraphrased": "what student graduated the same day as alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_156"}
{"paraphrased": "employees who started on the day that alice graduated", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_157"}
{"paraphrased": "students finishing on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_158"}
{"paraphrased": "which of alices friends were born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_159"}
{"paraphrased": "which people are friends with alices friends", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_160"}
{"paraphrased": "student who started the same day as alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_161"}
{"paraphrased": "people who are friends with students who do not graudate in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_162"}
{"paraphrased": "relationship status of student whose start date is before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_163"}
{"paraphrased": "find the birthdplaces of new employees we have starting by 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_164"}
{"paraphrased": "who stopped working after 2004  and has connections to me", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_165"}
{"paraphrased": "find people with a height of 180 cm who also have a birthdate of 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_166"}
{"paraphrased": "find people who are friends with alice and are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_167"}
{"paraphrased": "find someone who was born before alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_168"}
{"paraphrased": "what employees have a start date of either 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_169"}
{"paraphrased": "birth city of alices friend", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_170"}
{"paraphrased": "which employee started right when alice quit her job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_171"}
{"paraphrased": "what is the relationship status of employees whose last day was no earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_172"}
{"paraphrased": "relationship status of all students whos end date is 2004 on", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_173"}
{"paraphrased": "what students graduated in 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_174"}
{"paraphrased": "find the field of study of all persons with a height of 180 cm", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_175"}
{"paraphrased": "people that are friends with either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_176"}
{"paraphrased": "a student who left on the day alice did or before", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_177"}
{"paraphrased": "person who was born before alice start date", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_178"}
{"paraphrased": "what employees who are not software engineers", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_179"}
{"paraphrased": "what people have a birthplace of new york who are also friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_180"}
{"paraphrased": "people who is not friend with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_181"}
{"paraphrased": "find people with friends that started school before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_182"}
{"paraphrased": "what people have a height of 180 cm and field of study that is computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_183"}
{"paraphrased": "what gender is the person who 180 cm tall", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_184"}
{"paraphrased": "students who graduate no sooner than the day alice started", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_185"}
{"paraphrased": "birthplaces of alices friends", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_186"}
{"paraphrased": "name the city where an employee was born who started no later than 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_187"}
{"paraphrased": "students whose end date is before alices start date", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_188"}
{"paraphrased": "a student that doesnt attend brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_189"}
{"paraphrased": "students finishing before or in 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_190"}
{"paraphrased": "what students have a start date that is 2004 or later and who are their friends", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_191"}
{"paraphrased": "people born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_192"}
{"paraphrased": "find students whose last day was 2004 or later", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_193"}
{"paraphrased": "employees who began working before alice finished school", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_194"}
{"paraphrased": "what cities were the single people born in", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_195"}
{"paraphrased": "employees who quit their job the same day or after alice started school", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_196"}
{"paraphrased": "what cities are the birthplace of students later than 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_197"}
{"paraphrased": "which of alices friends are male", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_198"}
{"paraphrased": "name all students who quit before alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_199"}
{"paraphrased": "find the relationship statuses of students with a start date later than 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_200"}
{"paraphrased": "birthplace of only one person", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_201"}
{"paraphrased": "find all the relationship statuses of the students that started in 2004 and before", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_202"}
{"paraphrased": "find people who have at least two genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_203"}
{"paraphrased": "an employee ending before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_204"}
{"paraphrased": "what is the relationship status of people that started school after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_205"}
{"paraphrased": "who is a person whose field of study is computer science and whose height is 180 cm", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_206"}
{"paraphrased": "people who are friends with alice whose height is 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_207"}
{"paraphrased": "what employee was terminated after alice started working", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_208"}
{"paraphrased": "number of cities people are from", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_209"}
{"paraphrased": "find friends of people who did not start school in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_210"}
{"paraphrased": "which students graduated no later than alices last day of work", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_211"}
{"paraphrased": "students who ended school after alice started working", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_212"}
{"paraphrased": "which employees strated after 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_213"}
{"paraphrased": "employees who started working in or before 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_214"}
{"paraphrased": "employees who started working after alice quit her job", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_215"}
{"paraphrased": "name a single person who is friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_216"}
{"paraphrased": "what is the relationship status of students who did not start in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_217"}
{"paraphrased": "find the birth city of employees with a start date later than 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_218"}
{"paraphrased": "which employee quit first", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_219"}
{"paraphrased": "find one of alices friends who was born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_220"}
{"paraphrased": "friends of students before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_221"}
{"paraphrased": "gender of an employee starting before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_222"}
{"paraphrased": "find people who have the same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_223"}
{"paraphrased": "what student has fewer than two fields of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_224"}
{"paraphrased": "who was born before alices last day of employment", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_225"}
{"paraphrased": "what is the relationship status of the student who is not studying computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_226"}
{"paraphrased": "student whose end date is not after birth date of alice", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_227"}
{"paraphrased": "people that have a friend that stopped school in or after 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_228"}
{"paraphrased": "people that started working before alice stopped school", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_229"}
{"paraphrased": "find singlestatus people who are alices friend", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_230"}
{"paraphrased": "people who are friends with student that didnt end in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_231"}
{"paraphrased": "people that started working after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_232"}
{"paraphrased": "which people were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_233"}
{"paraphrased": "what is the birthplace of students who are not brown university students", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_234"}
{"paraphrased": "find alices friend who is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_235"}
{"paraphrased": "employees who quit as late as alice", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_236"}
{"paraphrased": "person who is a friend of an employee that has worked since 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_237"}
{"paraphrased": "who is friends with the employee that is leaving the company by 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_238"}
{"paraphrased": "find the names of all students who graduated between 2004 and 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_239"}
{"paraphrased": "employees who did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_240"}
{"paraphrased": "which person is friends with a student who started earlier than 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_241"}
{"paraphrased": "what city is the birthplace of the student who ended school before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_242"}
{"paraphrased": "find people that have two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_243"}
{"paraphrased": "student who joined on or before the day alice left", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_244"}
{"paraphrased": "what is the birthplace of employees whose last day was not in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_245"}
{"paraphrased": "when did alice start working for mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_246"}
{"paraphrased": "person named alice who studies computer science at a university", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_247"}
{"paraphrased": "what is the relationship status of an employee who quit in 2004 or later", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_248"}
{"paraphrased": "what is the birthplace city of student that was enrolled by 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_249"}
{"paraphrased": "which employee quit recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_250"}
{"paraphrased": "employees who share a workplace with alive", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_251"}
{"paraphrased": "what students are part of two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_252"}
{"paraphrased": "find me all people named alice who quit during 2004", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_253"}
{"paraphrased": "what students have the earliest start date", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_254"}
{"paraphrased": "find birthplaces of nonmckinsey employees", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_255"}
{"paraphrased": "city where the least number of people were born", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_256"}
{"paraphrased": "employee whose employer is not mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_257"}
{"paraphrased": "find me all people with the same gender as alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_258"}
{"paraphrased": "gender of employees who left before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_259"}
{"paraphrased": "who is born is 2004 and is a male", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_260"}
{"paraphrased": "who is friends with alice and is male", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_261"}
{"paraphrased": "people who started working on the day alice quit her job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_262"}
{"paraphrased": "who has least number of friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_263"}
{"paraphrased": "employees who quit after alice started her job", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_264"}
{"paraphrased": "employees not starting in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_265"}
{"paraphrased": "which people were born after alice left her job", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_266"}
{"paraphrased": "what is the gender that is the gender of at most two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_267"}
{"paraphrased": "who is friends with the single person", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_268"}
{"paraphrased": "find employees starting on or after alices birthdate", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_269"}
{"paraphrased": "what is the relationship status of students with an end date that is not 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_270"}
{"paraphrased": "what students have an end date that is earlier than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_271"}
{"paraphrased": "which student is in the same field of study as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_272"}
{"paraphrased": "people with friends who started university in 2004 or later", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_273"}
{"paraphrased": "friend of employee whose start date is before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_274"}
{"paraphrased": "people that are not friends with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_275"}
{"paraphrased": "gender of students starting contemporaneous to or before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_276"}
{"paraphrased": "find people who are employees with an end date no later than 2004 and their friends", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_277"}
{"paraphrased": "people that stopped school after alice started school", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_278"}
{"paraphrased": "gender of employees who start before or in 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_279"}
{"paraphrased": "people who are 180 cm tall and are single", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_280"}
{"paraphrased": "anyone single born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_281"}
{"paraphrased": "find me all students that will start at the same time or after alice starts", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_282"}
{"paraphrased": "find university of people who are 180cm tall", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_283"}
{"paraphrased": "person who works at mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_284"}
{"paraphrased": "which employee ended after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_285"}
{"paraphrased": "employees who finish when or before alice starts", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_286"}
{"paraphrased": "who is in the most relationships", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_287"}
{"paraphrased": "what is the gender of employees who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_288"}
{"paraphrased": "who is the employee whose start date was at least 2004 friends with", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_289"}
{"paraphrased": "find employees with a start date earlier than the end date of student alice", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_290"}
{"paraphrased": "people who were born the same day alice started school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_291"}
{"paraphrased": "find the birth cities of students who have a start date in 2004 or greater", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_292"}
{"paraphrased": "who is a person whose university is not brown university friends with", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_293"}
{"paraphrased": "whats the relationship status of employees who started work before 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_294"}
{"paraphrased": "people who were born after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_295"}
{"paraphrased": "find employees friends with last day after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_296"}
{"paraphrased": "who has over two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_297"}
{"paraphrased": "is alice employed by mckinsey", "source": "employer of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_298"}
{"paraphrased": "find employees whose end date is the same as that of student alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_299"}
{"paraphrased": "what are the relationships statuses of students who started school before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_300"}
{"paraphrased": "students friend whose university is not brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_301"}
{"paraphrased": "which friends stopped working in 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_302"}
{"paraphrased": "people who are friends with someone that did not start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_303"}
{"paraphrased": "what employees have an end date that is later than that of employee alice", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_304"}
{"paraphrased": "gender of a student not attending brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_305"}
{"paraphrased": "gender that has less than two people", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_306"}
{"paraphrased": "relationship status of students who are not studying at brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_307"}
{"paraphrased": "gender of student whose start date is not 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_308"}
{"paraphrased": "student with start date not after end date of student alice", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_309"}
{"paraphrased": "is the person single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_310"}
{"paraphrased": "when did alice stop working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_311"}
{"paraphrased": "find everybody who has two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_312"}
{"paraphrased": "what is the alices 2004 end date", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_313"}
{"paraphrased": "who are people who are employees with a start date not of 2004 friends with", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_314"}
{"paraphrased": "what students have a end date that is after the start date of student alice", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_315"}
{"paraphrased": "gender of employees that do not work as software engineers", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_316"}
{"paraphrased": "when did alice begin as an employee", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_317"}
{"paraphrased": "who is shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_318"}
{"paraphrased": "what is the relationship status of people that started school before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_319"}
{"paraphrased": "how many job titles are there", "source": "number of job title", "target": "(call listValue (call .size (call getProperty (call singleton en.job_title) (string !type))))", "qid": "socialnetwork_train_320"}
{"paraphrased": "which student is not from brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_321"}
{"paraphrased": "who works for someone other than mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_322"}
{"paraphrased": "students who started before or on alices last day", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_323"}
{"paraphrased": "who was born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_324"}
{"paraphrased": "people with less than two friends", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_325"}
{"paraphrased": "find employees with the same last day as student alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_326"}
{"paraphrased": "which employees started after alice did", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_327"}
{"paraphrased": "students who start before alice finishes", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_328"}
{"paraphrased": "people that were born on the day alice started work", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_329"}
{"paraphrased": "what city was the student born in that has 2004 as end date", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_330"}
{"paraphrased": "which person is friends with an employee who was here in 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_331"}
{"paraphrased": "birthplace of students whose end date is before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_332"}
{"paraphrased": "which people are 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_333"}
{"paraphrased": "find me students whose start date is either 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_334"}
{"paraphrased": "find me the student who started before alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_335"}
{"paraphrased": "which employee ended no later than 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_336"}
{"paraphrased": "what is the relationship status of an employee whose start date is later than 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_337"}
{"paraphrased": "what students have an end date no earlier than 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_338"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_339"}
{"paraphrased": "name an employee who started before alice quit", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_340"}
{"paraphrased": "which of alices friends is 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_341"}
{"paraphrased": "employee whose end date is not after 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_342"}
{"paraphrased": "what employees have a start date that is the same as student alice or later", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_343"}
{"paraphrased": "where is the birthplace of the student who started before 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_344"}
{"paraphrased": "which students have no more than two majors", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_345"}
{"paraphrased": "who is friends with students who started before 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_346"}
{"paraphrased": "people with relationship status of at least two people", "source": "relationship status that is relationship status of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_347"}
{"paraphrased": "which students graduate no later than 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_348"}
{"paraphrased": "find all people who are not in a relationship and were born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_349"}
{"paraphrased": "find students who have fewer than two field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_350"}
{"paraphrased": "what cities in new york were people born in", "source": "city that is birthplace of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_351"}
{"paraphrased": "friends of students who began earlier than 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_352"}
{"paraphrased": "student who has 2004 as a date", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_353"}
{"paraphrased": "sex of students who didnt start school in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_354"}
{"paraphrased": "friend of employee whose job title is not software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_355"}
{"paraphrased": "people who have friends that are currently online", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_356"}
{"paraphrased": "find me a person born in either 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_357"}
{"paraphrased": "gender of students who are not studying computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_358"}
{"paraphrased": "what employee has a start date that is earlier than the birthdate of alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_359"}
{"paraphrased": "what person was born earlier than that of alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_360"}
{"paraphrased": "people born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_361"}
{"paraphrased": "which students graduate before alice does", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_362"}
{"paraphrased": "what is the relationship status of people born in new york", "source": "relationship status that is relationship status of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_363"}
{"paraphrased": "who are friends with connection who started school before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_364"}
{"paraphrased": "gender of employee whose end date is before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_365"}
{"paraphrased": "which employees start date is not 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_366"}
{"paraphrased": "employee starting the soonest", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_367"}
{"paraphrased": "find students who have no more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_368"}
{"paraphrased": "people that study or studied anywhere but brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_369"}
{"paraphrased": "whose friend is logged in", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_370"}
{"paraphrased": "any male who is logged in", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_371"}
{"paraphrased": "what person is friends with the employee that was hired before 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_372"}
{"paraphrased": "employees who finish before alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_373"}
{"paraphrased": "what is relationship status of employees with start dates other than 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_374"}
{"paraphrased": "a friend of alice that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_375"}
{"paraphrased": "list the birthplaces of people who completed their studies before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_376"}
{"paraphrased": "studens with the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_377"}
{"paraphrased": "persons born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_378"}
{"paraphrased": "which employees last day was after alices last day", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_379"}
{"paraphrased": "employee who shares same employer with employee alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_380"}
{"paraphrased": "who doesnt work for mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_381"}
{"paraphrased": "people who are male and born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_382"}
{"paraphrased": "find me all employees that start on the same day as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_383"}
{"paraphrased": "what people are friends with students that have a start date of 2004 or later", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_384"}
{"paraphrased": "what are the birthplaces of people logged in", "source": "city that is birthplace of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_385"}
{"paraphrased": "what person has less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_386"}
{"paraphrased": "relationship status of nonsoftware engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_387"}
{"paraphrased": "who is alice friends with that also have relationship statuses of single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_388"}
{"paraphrased": "people who work at mckinsey and are 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_389"}
{"paraphrased": "which software engineer is 180 cm tall", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_390"}
{"paraphrased": "which students graduate after alice starts her new job", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_391"}
{"paraphrased": "find people who are logged in who are alices friends", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_392"}
{"paraphrased": "which students major in computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_393"}
{"paraphrased": "students finishing after alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_394"}
{"paraphrased": "which employee quit their job first", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_395"}
{"paraphrased": "relationship status of employee finishing contemporaneous to or after 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_396"}
{"paraphrased": "who is the student whose start date is at least 2004 friends with", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_397"}
{"paraphrased": "gender of only one person", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_398"}
{"paraphrased": "employees with two job titles at most", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_399"}
{"paraphrased": "what is the average height of everyone", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_400"}
{"paraphrased": "what is gender of employees with last days other than 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_401"}
{"paraphrased": "employees starting the latest", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_402"}
{"paraphrased": "employees who quit their job before alice started working", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_403"}
{"paraphrased": "find students whom have a start date of 2004 or later", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_404"}
{"paraphrased": "a student that starts before alice finishes", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_405"}
{"paraphrased": "where were the people that started work in or after 2004 born", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_406"}
{"paraphrased": "find friends of people who started their job before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_407"}
{"paraphrased": "what is the relationship status of everyone who is not a software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_408"}
{"paraphrased": "people born anywhere but new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_409"}
{"paraphrased": "who is the person that is 180 cm friends with", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_410"}
{"paraphrased": "find employees whose end date is the start date of student alice or later", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_411"}
{"paraphrased": "what is the birthplace city of a student who started during or before 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_412"}
{"paraphrased": "which employee started earlier than alices birthdate", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_413"}
{"paraphrased": "singles who were born in 2004", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_414"}
{"paraphrased": "who started working after the student alice did", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_415"}
{"paraphrased": "which students end date is greater than alices start date", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_416"}
{"paraphrased": "people that have two or less birthplaces", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_417"}
{"paraphrased": "what person was born in new york and is friends with alice", "source": "person whose birthplace is new york and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_418"}
{"paraphrased": "one worker who is a software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_419"}
{"paraphrased": "can not parapharase", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_420"}
{"paraphrased": "employee with not more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_421"}
{"paraphrased": "find all single people that are friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_422"}
{"paraphrased": "students who graduated on or after alices birthdate", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_423"}
{"paraphrased": "what sex are the employees who did not quit in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_424"}
{"paraphrased": "what is the relationship status of an employee who is not a software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_425"}
{"paraphrased": "employee with one job title", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_426"}
{"paraphrased": "what is the relationship status of students who have an end date that is from 2004 or greater", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_427"}
{"paraphrased": "find the friends of people who are currently online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_428"}
{"paraphrased": "who is friend of alice", "source": "person that is friends with alice and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_429"}
{"paraphrased": "relationship status of employees whose end date is no earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_430"}
{"paraphrased": "friend of someone who quit before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_431"}
{"paraphrased": "the birthplace of a student not starting in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_432"}
{"paraphrased": "who was born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_433"}
{"paraphrased": "find me people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_434"}
{"paraphrased": "find the relation status of people who are 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_435"}
{"paraphrased": "find students with one or two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_436"}
{"paraphrased": "people with only one friend", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_437"}
{"paraphrased": "which employee started no greater than alices", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_438"}
{"paraphrased": "which student ended at most on alices birthdate", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_439"}
{"paraphrased": "relationship status as most of the persons", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_440"}
{"paraphrased": "how many genders are there", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_441"}
{"paraphrased": "who is software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_442"}
{"paraphrased": "what cities are the birthplace of students who did not start in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_443"}
{"paraphrased": "students finishing contemporaneous to alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_444"}
{"paraphrased": "people that started working the same time or after alice did", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_445"}
{"paraphrased": "find the people who quit their job before alice joined her study", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_446"}
{"paraphrased": "what employees have an end date of 2004 or later and who are their friends", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_447"}
{"paraphrased": "employee who works as a software engineer or manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_448"}
{"paraphrased": "which students ended school in 2004 and 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_449"}
{"paraphrased": "what gender is the student that graduated by 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_450"}
{"paraphrased": "employee who left on the same day or later as alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_451"}
{"paraphrased": "employee with largest end date", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_452"}
{"paraphrased": "either alice or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_453"}
{"paraphrased": "which employee ended on the same date as alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_454"}
{"paraphrased": "persons presently logged in who were born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_455"}
{"paraphrased": "what student started the job before alice quit", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_456"}
{"paraphrased": "what employees have a end date that is the same as the start date of employee alice", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_457"}
{"paraphrased": "student that has no less than one field of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_458"}
{"paraphrased": "employee whose start date is after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_459"}
{"paraphrased": "find students with a start date the same as employee alices end date", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_460"}
{"paraphrased": "employee whose end date is not 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_461"}
{"paraphrased": "find the relationship statuses of employees who have an end date that is no more that 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_462"}
{"paraphrased": "find people who are male", "source": "gender that is gender of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_463"}
{"paraphrased": "find employees starting before alices last day", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_464"}
{"paraphrased": "employee whose start date is not before start date of employee alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_465"}
{"paraphrased": "what is the relationship status of students with an end date earlier than 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_466"}
{"paraphrased": "people who are friends with employees that are not software engineers", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_467"}
{"paraphrased": "what students have an end date that is greater than that of student alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_468"}
{"paraphrased": "what is number of a person", "source": "number of person", "target": "(call listValue (call .size (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_469"}
{"paraphrased": "what is the identifying gender of the transgendered person", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_470"}
{"paraphrased": "friends of students who joined in years except 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_471"}
{"paraphrased": "people born between 2004 and 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_472"}
{"paraphrased": "what online person is alice friends with", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_473"}
{"paraphrased": "what is the birthplace of students who did not graduate in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_474"}
{"paraphrased": "what student has a start date no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_475"}
{"paraphrased": "what is the relationship status of people that finished school before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_476"}
{"paraphrased": "genders of students not finishing in 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_477"}
{"paraphrased": "find students starting the same day as alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_478"}
{"paraphrased": "what is relationship status of students starting in 2003 or before", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_479"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_480"}
{"paraphrased": "what relationship status is listed by the least number of people", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_481"}
{"paraphrased": "where were the people online born", "source": "city that is birthplace of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_482"}
{"paraphrased": "people that stopped working the same day alice started school", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_483"}
{"paraphrased": "the gender of a student ending before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_484"}
{"paraphrased": "find relationship statuses of students who have a start date no later than 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_485"}
{"paraphrased": "who is male and is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_486"}
{"paraphrased": "employee whose start date is before start date of student alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_487"}
{"paraphrased": "is this person single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_train_488"}
{"paraphrased": "employees with the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_489"}
{"paraphrased": "which employee started at the same time as alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_490"}
{"paraphrased": "what students have an end date that is no sooner than alcies birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_491"}
{"paraphrased": "who is friends with the student who graduates in 2004 or later", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_492"}
{"paraphrased": "what is the birth city of all employees who have an end date less than 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_493"}
{"paraphrased": "employee with at most two jobs", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_494"}
{"paraphrased": "which student started school on the last day alice worked", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_495"}
{"paraphrased": "which employee has worked for the fewest employers", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_496"}
{"paraphrased": "find me friends of students graduating before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_497"}
{"paraphrased": "what students have an end date that is no greater than employee alices start date", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_498"}
{"paraphrased": "what male is single", "source": "person whose relationship status is single and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_499"}
{"paraphrased": "who is friends with an employee who does not work for mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_500"}
{"paraphrased": "what employees have a start date that is no later than the birthdate of alice", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_501"}
{"paraphrased": "find students with an end date the same as employee alices start date", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_502"}
{"paraphrased": "which person has a relationship status of single", "source": "person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_503"}
{"paraphrased": "which employees last day is no earlier than 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_504"}
{"paraphrased": "what is the gender of people that started school before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_505"}
{"paraphrased": "students whose end date is before the birthdate of alice", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_506"}
{"paraphrased": "what genders are the people that started school in or before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_507"}
{"paraphrased": "find people who are 180 cm tall and attend brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_508"}
{"paraphrased": "start date of alices employment which ended in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_509"}
{"paraphrased": "locate the gender of employees whom are not employeed by mickinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_510"}
{"paraphrased": "gender of alices friend", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_511"}
{"paraphrased": "find student whose last day is after alices birthday", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_512"}
{"paraphrased": "what is the birthdate of people who are 180 cm tall", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_513"}
{"paraphrased": "what employee started the earliest", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_514"}
{"paraphrased": "find alices friends born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_515"}
{"paraphrased": "find company employing those who are 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_516"}
{"paraphrased": "find all people who were born before alice started", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_517"}
{"paraphrased": "people that are friends with a working person that isnt a software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_518"}
{"paraphrased": "which student studied computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_519"}
{"paraphrased": "who is friends with the student who is not studying computer science", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_520"}
{"paraphrased": "gender of people whose height is 180cm", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_521"}
{"paraphrased": "people who joined study after 2003", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_522"}
{"paraphrased": "persons who were born on or after start date of alices study", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_523"}
{"paraphrased": "people that are taller than 200 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_524"}
{"paraphrased": "people born in new york and currently online", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_525"}
{"paraphrased": "show me all students that will leave in 2004 or oe 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_526"}
{"paraphrased": "find employees starting in 2004 and later", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_527"}
{"paraphrased": "people that are friends with someone that stopped working after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_528"}
{"paraphrased": "employees who start with or after alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_529"}
{"paraphrased": "find employees who have an end date later than 2004 and their friends", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_530"}
{"paraphrased": "what is alice and bobs gender", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_531"}
{"paraphrased": "which people are friends with students who started no earlier than 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_532"}
{"paraphrased": "employees who did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_533"}
{"paraphrased": "what is the gender of an individual", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_534"}
{"paraphrased": "where do my friends who are 180 cm stud for university", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_535"}
{"paraphrased": "what are alice and bobs relationship statuses", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_536"}
{"paraphrased": "people that stopped school in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_537"}
{"paraphrased": "employees who dont finish in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_538"}
{"paraphrased": "what is the relationship status of the employee that did not start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_539"}
{"paraphrased": "what employee has the same or bigger end date of employee alice", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_540"}
{"paraphrased": "what is the phone number of a company", "source": "number of company", "target": "(call listValue (call .size (call getProperty (call singleton en.company) (string !type))))", "qid": "socialnetwork_train_541"}
{"paraphrased": "find me an employee who has worked at two or less jobs", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_542"}
{"paraphrased": "people that started school in or after 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_543"}
{"paraphrased": "person whose birthplace is same as person 180 cm tall", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_544"}
{"paraphrased": "which student has the same relationship as the student who started after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_545"}
{"paraphrased": "what employees have a start date after the start date of employee alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_546"}
{"paraphrased": "what is alices gender", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_547"}
{"paraphrased": "what is birthplace of students who started after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_548"}
{"paraphrased": "what people are friends with those who are friends with alice", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_549"}
{"paraphrased": "who was born in two places", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_550"}
{"paraphrased": "people who were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_551"}
{"paraphrased": "when is the end date of alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_552"}
{"paraphrased": "what is the gender of a student who did not begin in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_553"}
{"paraphrased": "what university do those that are 180 cm tall go to", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_554"}
{"paraphrased": "find relationship status of students not studying computer science field", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_555"}
{"paraphrased": "student whose end date is before start date of employee alice", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_556"}
{"paraphrased": "who is friends with the person from new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_557"}
{"paraphrased": "where were the working people that are not software engineers born", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_558"}
{"paraphrased": "what is the last date of alice who is a student of brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_559"}
{"paraphrased": "working person with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_560"}
{"paraphrased": "people who completed education before alice joined work", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_561"}
{"paraphrased": "find student who started first", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_562"}
{"paraphrased": "find employees who have an employer different from that of alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_563"}
{"paraphrased": "people alice is friends with that were also born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_564"}
{"paraphrased": "what gender has the fewest people", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_565"}
{"paraphrased": "what people have a height of 180 cm and the same relationship status as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_566"}
{"paraphrased": "where were the people that started working in or before 2004 born", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_567"}
{"paraphrased": "gender of all employees who did not quit in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_568"}
{"paraphrased": "who is a person whose field of study is not computer science friends with", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_569"}
{"paraphrased": "a student ending after alice starts", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_570"}
{"paraphrased": "is alices job title software engineer", "source": "job title of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "qid": "socialnetwork_train_571"}
{"paraphrased": "people who are single and currently online", "source": "relationship status that is relationship status of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_572"}
{"paraphrased": "gender of employee who left before 2005", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_573"}
{"paraphrased": "find people who are 180 cm tall who are alices gender", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_574"}
{"paraphrased": "relationship status of two or less persons", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_575"}
{"paraphrased": "student who left with or after alice", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_576"}
{"paraphrased": "employee whose last day was also alices last day", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_577"}
{"paraphrased": "a friend of a student that starts in 2004 or before", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_578"}
{"paraphrased": "what student started earliest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_579"}
{"paraphrased": "alices friends who are logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_580"}
{"paraphrased": "singles who are 180 cm tall", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_581"}
{"paraphrased": "people that started working before 2004 or before 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_582"}
{"paraphrased": "people born in new york that are currently online", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_583"}
{"paraphrased": "which employees started before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_584"}
{"paraphrased": "who has friends with a start date after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_585"}
{"paraphrased": "the person who has the most genders", "source": "person that has the most number of gender", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string gender)))", "qid": "socialnetwork_train_586"}
{"paraphrased": "which employees last day was no later than 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_587"}
{"paraphrased": "employees starting before alices birthday", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_588"}
{"paraphrased": "person who first quit hisher job", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_589"}
{"paraphrased": "what student started after alices end date", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_590"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_591"}
{"paraphrased": "employee who left before 2004 or in 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_592"}
{"paraphrased": "what employee quit their job the same day or after alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_593"}
{"paraphrased": "find the gender of employees who have an end date that is 2004 or later", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_594"}
{"paraphrased": "employee with same start date as that of employee alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_595"}
{"paraphrased": "find the height of a person", "source": "total height of person", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_596"}
{"paraphrased": "who has lowest number of friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_597"}
{"paraphrased": "find me all employees whore start date is either 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_598"}
{"paraphrased": "what person is friends with a student that has an end date of 2004 or later", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_599"}
{"paraphrased": "people who are at least 180 cm tall", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_600"}
{"paraphrased": "birth city of employee whose job title is not software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_601"}
{"paraphrased": "people who have the same birthday as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_602"}
{"paraphrased": "what people are logged in and whom are they friends with", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_603"}
{"paraphrased": "employee whose start date is birth date of alice", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_604"}
{"paraphrased": "what university did alice graduate from in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_605"}
{"paraphrased": "whose relationship status is unique", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_606"}
{"paraphrased": "who is friends with the person who started working in 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_607"}
{"paraphrased": "people with three or more friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_608"}
{"paraphrased": "this student who finishes school at al most the same time as alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_609"}
{"paraphrased": "friends of people who started their studies in an year other than 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_610"}
{"paraphrased": "what are genders of students not studying computer science field", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_611"}
{"paraphrased": "what is the gender of students who did not graduate in 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_612"}
{"paraphrased": "who finished school the earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_613"}
{"paraphrased": "which employee ended no greater than alices start date", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_614"}
{"paraphrased": "find people with a start date of 2004 and height of 180 cm", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_615"}
{"paraphrased": "find me all employees who will have starte by alices birthday", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_616"}
{"paraphrased": "what is the 180 cm tall persons job title", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_617"}
{"paraphrased": "people who quit their job before alice joined", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_618"}
{"paraphrased": "which emloyees had their last no earlier than 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_619"}
{"paraphrased": "which students starte before 2004 or 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_620"}
{"paraphrased": "name the friend of an employee who did not quit in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_621"}
{"paraphrased": "what people are friends with alice and have a height of 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_622"}
{"paraphrased": "who measures 180 cm and quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_623"}
{"paraphrased": "find people 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_624"}
{"paraphrased": "find me all employees who started in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_625"}
{"paraphrased": "who is friends with the student who began school no later than 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_626"}
{"paraphrased": "gender of students joining before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_627"}
{"paraphrased": "this employee has an ending date that is almost the same as alices", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_628"}
{"paraphrased": "the gender of a student that isnt in computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_629"}
{"paraphrased": "what is relationship status of employees starting after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_630"}
{"paraphrased": "find students with last day in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_631"}
{"paraphrased": "find friends that have friends that are 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_632"}
{"paraphrased": "students who finish after 2004", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_633"}
{"paraphrased": "one employee who left in 2004 or before", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_634"}
{"paraphrased": "what is the relationship status of employees who strated before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_635"}
{"paraphrased": "which student started on or before alices birthdate", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_636"}
{"paraphrased": "find me all students with a single major", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_637"}
{"paraphrased": "find people born in new york that are friends with alice", "source": "person whose birthplace is new york and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_638"}
{"paraphrased": "find me all people who has a friend born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_639"}
{"paraphrased": "name a person who is friends with alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_640"}
{"paraphrased": "employee whose end date is not before end date of employee alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_641"}
{"paraphrased": "who was born on or before alices final day of employment", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_642"}
{"paraphrased": "people who stated working in 2004 or after", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_643"}
{"paraphrased": "what is the gender of employees whose start date is earlier than 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_644"}
{"paraphrased": "employees who finish on alices birthday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_645"}
{"paraphrased": "what is the gender of a person who started before 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_646"}
{"paraphrased": "whats the relationship status of the student leaving prior to 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_647"}
{"paraphrased": "name someone who is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_648"}
{"paraphrased": "what student has a start date later than the end date of alice", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_649"}
{"paraphrased": "people that started work after alice stopped school", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_650"}
{"paraphrased": "students that didnt finish in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_651"}
{"paraphrased": "people who are 180 cm tall and are software engineers", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_652"}
{"paraphrased": "students who graduated before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_653"}
{"paraphrased": "employees who did not stop working before alice was born", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_654"}
{"paraphrased": "who is friends with an employee whos end date is 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_655"}
{"paraphrased": "what student has an end date that is before the end date of alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_656"}
{"paraphrased": "find friends of students who started in 2004 and after", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_657"}
{"paraphrased": "what is the citys number", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_658"}
{"paraphrased": "which people are friends with employees who started working after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_659"}
{"paraphrased": "who has most friends", "source": "person that is friends with the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_660"}
{"paraphrased": "which employees last day is the same as alices birth date", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_661"}
{"paraphrased": "find the person with the most friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_662"}
{"paraphrased": "which employee ended their job on the same day as alices brithday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_663"}
{"paraphrased": "show me the students starting at the same time or after alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_664"}
{"paraphrased": "name a person 180 cm tall who started working in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_665"}
{"paraphrased": "find friends of people who graduated school but not in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_666"}
{"paraphrased": "what person is friends with an employee who has a start date no later than 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_667"}
{"paraphrased": "who has maximum 2 friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_668"}
{"paraphrased": "find people with a gender of male and their friends", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_669"}
{"paraphrased": "find people who do not have more than two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_670"}
{"paraphrased": "relationship status of students finishing after 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_671"}
{"paraphrased": "employee whose start date is not after start date of student alice", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_672"}
{"paraphrased": "people who quit their job before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_673"}
{"paraphrased": "what employee has a start date earlier than the start date of alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_674"}
{"paraphrased": "what status is the relationship status of less than two people", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_675"}
{"paraphrased": "what students began school either after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_676"}
{"paraphrased": "when did alice start studying computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_677"}
{"paraphrased": "students who began school the same day alice quit her job", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_678"}
{"paraphrased": "which employee has an end date earlier than alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_679"}
{"paraphrased": "find the gender of no more than two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_680"}
{"paraphrased": "friends of people who joined their jobs in years other than 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_681"}
{"paraphrased": "alices friends who were born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_682"}
{"paraphrased": "people that started work before alice started school", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_683"}
{"paraphrased": "find alices friends", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_684"}
{"paraphrased": "what is the persons number", "source": "number of person", "target": "(call listValue (call .size (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_685"}
{"paraphrased": "whos 180 cm tall and in the same sort of relationship situaiton as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_686"}
{"paraphrased": "which employee started after the employee alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_687"}
{"paraphrased": "find someone of any gender", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_688"}
{"paraphrased": "who is friends with students starting before on in 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_689"}
{"paraphrased": "which student has the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_690"}
{"paraphrased": "one student who started in or after 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_691"}
{"paraphrased": "find the person that is 180 cm tall and was born in new york", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_692"}
{"paraphrased": "who has the same relationship status as alice and is 180 cm tall", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_693"}
{"paraphrased": "people who are friends with the employees leaving the company after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_694"}
{"paraphrased": "find the employee whose last day was on alices birthdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_695"}
{"paraphrased": "friends of students starting on or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_696"}
{"paraphrased": "what is thre relationship status of students who graduated after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_697"}
{"paraphrased": "people who started after alice quit her job", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_698"}
{"paraphrased": "what is the relationship status of a student with an end date of 2004 or later", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_699"}
{"paraphrased": "name the friend of a student who began prior to 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_700"}
{"paraphrased": "what person is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_701"}
{"paraphrased": "find the birth city of employees whose start date is less than 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_702"}
{"paraphrased": "what sex are the students who did not start in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_703"}
{"paraphrased": "180 cm tall people joined in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_704"}
{"paraphrased": "find students starting on alices last day", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_705"}
{"paraphrased": "what is the job title of people who are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_706"}
{"paraphrased": "people born after alices first day of school", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_707"}
{"paraphrased": "is alice male or female", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_train_708"}
{"paraphrased": "find all people with friends that finished school in 2004", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_709"}
{"paraphrased": "people with relationship status as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_710"}
{"paraphrased": "when did alice stop working as a software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_711"}
{"paraphrased": "180 cm tall persons who share birthdate with alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_712"}
{"paraphrased": "who has friends that are online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_713"}
{"paraphrased": "what person has only two friends", "source": "person that two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_714"}
{"paraphrased": "what city was the student that started after 2004 born in", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_715"}
{"paraphrased": "place of birth for the fewest people", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_716"}
{"paraphrased": "find me people who have the same relationship status of people who are 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_717"}
{"paraphrased": "what is the gender of most", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_718"}
{"paraphrased": "find the relationship statuses of employees who do not have the job title of software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_719"}
{"paraphrased": "where were the graduates of 2004 born", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_720"}
{"paraphrased": "what gender is more than two people", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_721"}
{"paraphrased": "an employee starting before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_722"}
{"paraphrased": "which employer has the least number of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_723"}
{"paraphrased": "which students started school after 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_724"}
{"paraphrased": "who is the person whose birthplace is new york and whose height is 180 cm", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_725"}
{"paraphrased": "find me all people are are taller than 180 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_726"}
{"paraphrased": "birth city of employee whose end date is not 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_727"}
{"paraphrased": "what is the gender of a student whose end date is not 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_728"}
{"paraphrased": "who is the oldest person", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_729"}
{"paraphrased": "people from new york that are friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_730"}
{"paraphrased": "what students have an end date that is lower than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_731"}
{"paraphrased": "find students who started no later than 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_732"}
{"paraphrased": "what city was the male born", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_733"}
{"paraphrased": "find friends of people who quit their jobs in 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_734"}
{"paraphrased": "what city were at least two people born in", "source": "city that is birthplace of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_735"}
{"paraphrased": "who is alice friends with thats 180 cm tall", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_736"}
{"paraphrased": "people who are friends with employees who started work before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_737"}
{"paraphrased": "who is born in 2004 at new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_738"}
{"paraphrased": "person who is friends with an employee who retired at least 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_739"}
{"paraphrased": "find me all people whose height is 180 cm and born in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_740"}
{"paraphrased": "find me the student whose start date is on alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_741"}
{"paraphrased": "find people with a height of 180 cm", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_742"}
{"paraphrased": "which employee has the fewest jobs", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_743"}
{"paraphrased": "find the relationship statuses of students whom do not study computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_744"}
{"paraphrased": "people that stopped working the same day as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_745"}
{"paraphrased": "which student stopped before student alice started", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_746"}
{"paraphrased": "student who started on birthdate of alice", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_747"}
{"paraphrased": "what is the gender of employees with an end date greater than 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_748"}
{"paraphrased": "what people are friens with students that have a start date not equal to 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_749"}
{"paraphrased": "people who are th gender of alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_750"}
{"paraphrased": "people that started working when alice stopped working", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_751"}
{"paraphrased": "what is the relationship status of employees who are not employed by mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_752"}
{"paraphrased": "which employee has no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_753"}
{"paraphrased": "people who are single and born in new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_754"}
{"paraphrased": "find a person born before alice started working", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_755"}
{"paraphrased": "who is in the same type of relationship as alice and is 180 cm tall", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_756"}
{"paraphrased": "find people born before the employment end date of alice", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_757"}
{"paraphrased": "find cities that are the birthplaces of employees with an end date no later than 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_758"}
{"paraphrased": "a student who left before student alice did", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_759"}
{"paraphrased": "whats the relationship status of the student leaving his job by 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_760"}
{"paraphrased": "what is the status of the two peoples relationship", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_761"}
{"paraphrased": "who has maximum two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_762"}
{"paraphrased": "who studied at only one university", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_763"}
{"paraphrased": "find people with less than two genders", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_764"}
{"paraphrased": "find someone shorter than 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_765"}
{"paraphrased": "find students with end date in 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_766"}
{"paraphrased": "which relationship status do less than two people have", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_767"}
{"paraphrased": "where were two people both born", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_768"}
{"paraphrased": "what was alices last day of her job from 2004", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_769"}
{"paraphrased": "name the friend of an employee who quit after 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_770"}
{"paraphrased": "when did alice finish studying computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_771"}
{"paraphrased": "what male is friends with alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_772"}
{"paraphrased": "which people are mutual friends of alice", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_773"}
{"paraphrased": "people who are friends with the employee thats leaving before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_774"}
{"paraphrased": "find students with last day on or after alices first day", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_775"}
{"paraphrased": "what date did alice leave her job in 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_776"}
{"paraphrased": "which employees last day is no later than alices birthdate", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_777"}
{"paraphrased": "students who began school after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_778"}
{"paraphrased": "person who is friend of a student who starts at most by 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_779"}
{"paraphrased": "find employees starting other than in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_780"}
{"paraphrased": "find people born after the employment of alice", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_781"}
{"paraphrased": "person born on or after end of alices employment", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_782"}
{"paraphrased": "which employees has the least recent start date", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_783"}
{"paraphrased": "which person has the fewest number of friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_784"}
{"paraphrased": "find people with friends that finished school in 2004 at the latest", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_785"}
{"paraphrased": "find all people born in 2004 that are friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_786"}
{"paraphrased": "people who were born the same day as or after alice", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_787"}
{"paraphrased": "birthplace of two or less persons", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_788"}
{"paraphrased": "what person who ended in 2004 is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_789"}
{"paraphrased": "what students have an end date later than 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_790"}
{"paraphrased": "who is the student whose start date was at least 2004 friends with", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_791"}
{"paraphrased": "people that started working after alice stopped working", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_792"}
{"paraphrased": "which person is friends with someone who goes to somewhere besides brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_793"}
{"paraphrased": "find students whose last day was before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_794"}
{"paraphrased": "find me friends of single people", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_795"}
{"paraphrased": "person who is friends with someone whose end date is after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_796"}
{"paraphrased": "a friend of an employee that ends after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_797"}
{"paraphrased": "employees finishing contemporaneous to or before alice", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_798"}
{"paraphrased": "what person is 180 cm tall and is currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_799"}
{"paraphrased": "which employee started no earlier than alices end date", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_800"}
{"paraphrased": "find alices friends that were born in 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_801"}
{"paraphrased": "find people with only one or two friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_802"}
{"paraphrased": "how many people are there", "source": "number of person", "target": "(call listValue (call .size (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_803"}
{"paraphrased": "which employee quit their job after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_804"}
{"paraphrased": "180 cm tall friends of alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_805"}
{"paraphrased": "employee whose end date is not after start date of employee alice", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_806"}
{"paraphrased": "employee whose end date is before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_807"}
{"paraphrased": "who are alices friends from her hometown", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_808"}
{"paraphrased": "a friend of alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_809"}
{"paraphrased": "a person whose employee friend didnt leave in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_810"}
{"paraphrased": "an employee that started before 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_811"}
{"paraphrased": "who is alices boss at her software engineer job", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_812"}
{"paraphrased": "find an employee who left after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_813"}
{"paraphrased": "find the gender of students who have a start date after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_814"}
{"paraphrased": "find the genders of employees who have an end date no later than 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_815"}
{"paraphrased": "which employee has the same relationship status as the employee who started earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_816"}
{"paraphrased": "find the genders of students with end dates later than 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_817"}
{"paraphrased": "relationship status of people that are friends with alice", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_818"}
{"paraphrased": "name the relationships status of an employee who started no later than 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_819"}
{"paraphrased": "students who ended school after the day alice ended school", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_820"}
{"paraphrased": "who was born before alice left", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_821"}
{"paraphrased": "find people who are between 180 cm and 200 cm tall", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_822"}
{"paraphrased": "180 cm tall person who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_823"}
{"paraphrased": "either 180cm or 200cm", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_824"}
{"paraphrased": "what is the relationship status of a male", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_825"}
{"paraphrased": "which student started earlier than 2004", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_826"}
{"paraphrased": "students finishing before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_827"}
{"paraphrased": "how many relationship statuses are there", "source": "number of relationship status", "target": "(call listValue (call .size (call getProperty (call singleton en.relationship_status) (string !type))))", "qid": "socialnetwork_train_828"}
{"paraphrased": "what person was born in new york and single", "source": "person whose birthplace is new york and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_829"}
{"paraphrased": "people born in 2004 who are 180 cm", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_830"}
{"paraphrased": "a friend of alice who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_831"}
{"paraphrased": "what employees have an end date that is later than the start date of student alice", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_832"}
{"paraphrased": "who has two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_833"}
{"paraphrased": "birthplaces of employees who started after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_834"}
{"paraphrased": "gender of students who started in or after 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_835"}
{"paraphrased": "find employees starting the same day as student alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_836"}
{"paraphrased": "who is friends with someone born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_837"}
{"paraphrased": "find students with a start date that is the same or greater than student alice", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_838"}
{"paraphrased": "find birthplaces of students whose last day was 2004 or before", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_839"}
{"paraphrased": "find people born in 2004 who are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_840"}
{"paraphrased": "people that are friends with someone that started school before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_841"}
{"paraphrased": "a student starting after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_842"}
{"paraphrased": "relationship status that is the same as a person born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_843"}
{"paraphrased": "birth city of person whose height is 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_844"}
{"paraphrased": "find friends of people who started work in 2004 at the earliest", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_845"}
{"paraphrased": "employee whose start date is not after end date of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_846"}
{"paraphrased": "who has the most friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_847"}
{"paraphrased": "find the birthplace of employees whose last day is not in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_848"}
{"paraphrased": "what single person is friends with alice", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_849"}
{"paraphrased": "people who completed their study before alice was born", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_850"}
{"paraphrased": "find people who were born after alice quit her job", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_851"}
{"paraphrased": "which student goes to the same university as student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_852"}
{"paraphrased": "find people with no birthplaces", "source": "person that has the least number of birthplace", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string birthplace)))", "qid": "socialnetwork_train_853"}
{"paraphrased": "what day in 2004 did alice start working", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_854"}
{"paraphrased": "what is the relationship status of a person born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_855"}
{"paraphrased": "friends of people who quit their jobs after 2003", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_856"}
{"paraphrased": "name the employees who quit the job when alice was born ", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_857"}
{"paraphrased": "whats the relationship status of students who joined after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_858"}
{"paraphrased": "what employee has an end date later than the start date of alice", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_859"}
{"paraphrased": "what is a person who has two genders called", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_860"}
{"paraphrased": "student whose end date is same as that of employee alice", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_861"}
{"paraphrased": "find employees who quit the job after 2004 ", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_862"}
{"paraphrased": "employee whose start date is before the end date of employee alice", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_863"}
{"paraphrased": "find people with employment end date as 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_864"}
{"paraphrased": "people who are born in new york and are 180cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_865"}
{"paraphrased": "friend of student whose start date is after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_866"}
{"paraphrased": "find students who have an end date that is greater than alices birthday", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_867"}
{"paraphrased": "students who started after alices end date", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_868"}
{"paraphrased": "did alice study computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_869"}
{"paraphrased": "people that stopped school before alice started working", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_870"}
{"paraphrased": "which people have less than two relationship statuses", "source": "person that has less than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_871"}
{"paraphrased": "what persons birthday is in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_872"}
{"paraphrased": "gender of alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_873"}
{"paraphrased": "person that is a friend of student who will graduate by 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_874"}
{"paraphrased": "students who start with alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_875"}
{"paraphrased": "friends of people who quit their jobs before 2005", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_876"}
{"paraphrased": "find the people who are friends with males", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_877"}
{"paraphrased": "find students whose start date is less than that of student alice", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_878"}
{"paraphrased": "what students have a start date that is either 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_879"}
{"paraphrased": "what person is friends with an employee who had an end date no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_880"}
{"paraphrased": "students who started at or after the end date of alice", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_881"}
{"paraphrased": "what is the end date of alices job as software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_882"}
{"paraphrased": "what is the relationship status of fewer than two of the people", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_883"}
{"paraphrased": "which person is friends with the employee whos end date isnt 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_884"}
{"paraphrased": "birthplace of employees who are not employed by mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_885"}
{"paraphrased": "name a persons friend who was born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_886"}
{"paraphrased": "people that are friends with someone that finished school in any year but 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_887"}
{"paraphrased": "who is friends with bob or alice", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_888"}
{"paraphrased": "what is the students birthplace city who started at the most in 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_889"}
{"paraphrased": "person that went to the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_890"}
{"paraphrased": "employee who is a software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_891"}
{"paraphrased": "a 180 cm tall person born in same place as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_892"}
{"paraphrased": "person who joined study on the day alice was born", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_893"}
{"paraphrased": "someone who has studied at less than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_894"}
{"paraphrased": "people that stopped working before alice started school", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_895"}
{"paraphrased": "find students with the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_896"}
{"paraphrased": "what persons height is shorter than 180 to 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_897"}
{"paraphrased": "what are genders of students starting after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_898"}
{"paraphrased": "who has the most relationship statuses", "source": "person that has the most number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_899"}
{"paraphrased": "find single people who are friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_900"}
{"paraphrased": "people that stopped working after alice started school", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_901"}
{"paraphrased": "which student started the day alice left her job", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_902"}
{"paraphrased": "find the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_903"}
{"paraphrased": "birth place of two persons", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_904"}
{"paraphrased": "is alices job title software engineer", "source": "job title of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string job_title)))", "qid": "socialnetwork_train_905"}
{"paraphrased": "what is the birth city of no more than two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_906"}
{"paraphrased": "what is the relationship status of a student whose end date is no later than 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_907"}
{"paraphrased": "males who are online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_908"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_909"}
{"paraphrased": "people that started school when alice started working or before", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_910"}
{"paraphrased": "which employee quit after alices birthday", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_911"}
{"paraphrased": "which guys are also 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_912"}
{"paraphrased": "find employee with latest last day", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_913"}
{"paraphrased": "find the birthplaces of people who are 180 cm tall", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_914"}
{"paraphrased": "find me all males that are currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_915"}
{"paraphrased": "find employees who have a start date of 2004 or later and their friends", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_916"}
{"paraphrased": "which person has two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_917"}
{"paraphrased": "people that stopped school after alice did", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_918"}
{"paraphrased": "who has two or more genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_919"}
{"paraphrased": "person whose name is alive or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_train_920"}
{"paraphrased": "where were the people that started school after 2004 born", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_921"}
{"paraphrased": "friend of employee whose start date is at most 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_922"}
{"paraphrased": "who started school before alice", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_923"}
{"paraphrased": "which employee started their job on alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_924"}
{"paraphrased": "student with same field of study as that of student alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_925"}
{"paraphrased": "people born on the same day as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_926"}
{"paraphrased": "which students quit outside of 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_927"}
{"paraphrased": "find people with a height of 180 cm and the same birthplace as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_928"}
{"paraphrased": "birth city of student whose end date is not after 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_929"}
{"paraphrased": "people who are male and born in new york", "source": "person whose gender is male and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_930"}
{"paraphrased": "friend of student whose start date is before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_931"}
{"paraphrased": "students who started before alices start date", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_932"}
{"paraphrased": "what relationship statuses are claimed by alices friends", "source": "relationship status that is relationship status of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_933"}
{"paraphrased": "who is friends with a person that is friends with alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_934"}
{"paraphrased": "person with more then two people", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_935"}
{"paraphrased": "friend of someone born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_936"}
{"paraphrased": "students who have the same end date as the start date of student alice", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_937"}
{"paraphrased": "what did alice study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_938"}
{"paraphrased": "whats the birthplace of alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_939"}
{"paraphrased": "what is the birthplace of student who joined before 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_940"}
{"paraphrased": "find someone born in the same city as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_941"}
{"paraphrased": "what gender are the two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_942"}
{"paraphrased": "friend of emmployee whose end date is after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_943"}
{"paraphrased": "employee ending before or when alice was born", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_944"}
{"paraphrased": "people born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_945"}
{"paraphrased": "who are some of my noncomputer science major connections friends with", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_946"}
{"paraphrased": "which students started school before alice started school", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_947"}
{"paraphrased": "what genders are the people that finished school after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_948"}
{"paraphrased": "who is friends with the male", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_949"}
{"paraphrased": "what student has an end date that is later than the start date of alice", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_950"}
{"paraphrased": "find employees who have a start date the same as employee alice", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_951"}
{"paraphrased": "what company employs an 180 cm tall person", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_952"}
{"paraphrased": "what person has the same relationship status as that of the majority", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_953"}
{"paraphrased": "a student ending after or when alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_954"}
{"paraphrased": "find all people who are 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_955"}
{"paraphrased": "what people have two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_956"}
{"paraphrased": "find students friends with last days other than 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_957"}
{"paraphrased": "student whose start date is after start date of employee alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_958"}
{"paraphrased": "an employee who left before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_959"}
{"paraphrased": "what is the gender of people that started school after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_960"}
{"paraphrased": "which employees dont have the job title software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_961"}
{"paraphrased": "people that are software engineers or program managers", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_962"}
{"paraphrased": "employee who joined before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_963"}
{"paraphrased": "name the student who was born after alice ", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_964"}
{"paraphrased": "which employee started after alices birthdate", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_965"}
{"paraphrased": "gender of someone who is single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_966"}
{"paraphrased": "start date of alices study which ended in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_967"}
{"paraphrased": "people who are friends with employees who started working in or before 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_968"}
{"paraphrased": "find people who are students with a field of study that is not computer science and their friends", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_969"}
{"paraphrased": "person born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_970"}
{"paraphrased": "find people shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_971"}
{"paraphrased": "alices male friends", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_972"}
{"paraphrased": "the gender of one worker who left in 2004 or before", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_973"}
{"paraphrased": "students studying either computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_974"}
{"paraphrased": "what is the relationship status of one employee whos not a software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_975"}
{"paraphrased": "who has friends that are students whos start date before 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_976"}
{"paraphrased": "what is the combined height of everyone in my network", "source": "total height of person", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_977"}
{"paraphrased": "what is the relationship status of a student who began at 2004 or before", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_978"}
{"paraphrased": "which students have the same birthrate and start date of alice", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_979"}
{"paraphrased": "find friends of students with end dates other than 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_980"}
{"paraphrased": "which is the university of studen alice who finished in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_981"}
{"paraphrased": "what is the relationship status of employees whose job title is not software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_982"}
{"paraphrased": "what is the gender of working people that did not start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_983"}
{"paraphrased": "relationship status of employee whose end date is before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_984"}
{"paraphrased": "find the birth city for students whom have a start date other than 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_985"}
{"paraphrased": "which people are 180 cm at brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_986"}
{"paraphrased": "friend of student whose end date is not before 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_987"}
{"paraphrased": "find people that have more than two birthplaces", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_988"}
{"paraphrased": "name a friend of alice who was born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_989"}
{"paraphrased": "which student left most recently", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_990"}
{"paraphrased": "people who completed the study after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_991"}
{"paraphrased": "what person has the same birthdate as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_992"}
{"paraphrased": "what is the relationship status of the person who is 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_993"}
{"paraphrased": "people who are 180 cm tall and quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_994"}
{"paraphrased": "relationship status of people whose height is 180cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_995"}
{"paraphrased": "find students who have an end date that is earlier than student alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_996"}
{"paraphrased": "all single or married persons", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_997"}
{"paraphrased": "find me all people who are not alices friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_998"}
{"paraphrased": "who is alices employer", "source": "employer of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_999"}
{"paraphrased": "find the oldest person", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1000"}
{"paraphrased": "find student with end date after alices start date", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1001"}
{"paraphrased": "what single person is friends with alice", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1002"}
{"paraphrased": "people that started school before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1003"}
{"paraphrased": "friend of alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1004"}
{"paraphrased": "a student that ends the same time alice starts", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1005"}
{"paraphrased": "people that stopped working when alice did or before", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1006"}
{"paraphrased": "people with friends who are single", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1007"}
{"paraphrased": "students who began school after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1008"}
{"paraphrased": "birth city of student whose start date is before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1009"}
{"paraphrased": "which relationship status is of at most two person", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1010"}
{"paraphrased": "who is alices male friend", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1011"}
{"paraphrased": "what gender are the employees who left the company before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1012"}
{"paraphrased": "find people with a relationship status of single and a total height of 180 cm", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1013"}
{"paraphrased": "which people are friends with the person currently logged in", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_1014"}
{"paraphrased": "which employee has the most previous employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1015"}
{"paraphrased": "ulca or brown univercity", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_1016"}
{"paraphrased": "employee whos last day was between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1017"}
{"paraphrased": "name the employee who quit the job on the same date as employee alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1018"}
{"paraphrased": "birthplaces of all 180 cm tall people", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1019"}
{"paraphrased": "people that stopped school before alice did", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1020"}
{"paraphrased": "which employee started before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1021"}
{"paraphrased": "what is the relationship status of people who stopped school in 2004 or later", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1022"}
{"paraphrased": "students finishing contemporaneous or before alice", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1023"}
{"paraphrased": "what student has a start date that is later than that of student alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1024"}
{"paraphrased": "friend of a student starting before or during 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1025"}
{"paraphrased": "birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1026"}
{"paraphrased": "person who studied in most fields", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1027"}
{"paraphrased": "employees starting after 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1028"}
{"paraphrased": "someone not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1029"}
{"paraphrased": "employe that has a smaller start date than alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1030"}
{"paraphrased": "find student with earliest last day", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1031"}
{"paraphrased": "who is a student that started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1032"}
{"paraphrased": "what company emplys a 180 cm tall person", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1033"}
{"paraphrased": "students starting before alice finishes", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1034"}
{"paraphrased": "an employee ending before alice starts", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1035"}
{"paraphrased": "employees starting after alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1036"}
{"paraphrased": "students who finish with or after alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1037"}
{"paraphrased": "is there a gender less than two people have", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1038"}
{"paraphrased": "people born in new york that are single", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1039"}
{"paraphrased": "people who started in 2004 and are 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1040"}
{"paraphrased": "people that stopped working after alice was born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1041"}
{"paraphrased": "students who attended college the longest", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1042"}
{"paraphrased": "name a person who is online who is 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1043"}
{"paraphrased": "people that started working when alice was born or before", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1044"}
{"paraphrased": "which employee start after alice leaves", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1045"}
{"paraphrased": "what is the birthplace of those who are friends with alice", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1046"}
{"paraphrased": "people who are friends with alice and born in new york", "source": "person whose birthplace is new york and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1047"}
{"paraphrased": "employee whose end date is after alices birth date", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1048"}
{"paraphrased": "what gender does the person born in 2004 have", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1049"}
{"paraphrased": "employees with one job title", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1050"}
{"paraphrased": "what person has a height of at least 180 cm", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1051"}
{"paraphrased": "find me all of alices guy friends", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1052"}
{"paraphrased": "who stopped working in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1053"}
{"paraphrased": "what employee quit their job on the day alice started", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1054"}
{"paraphrased": "what employee has an end date that is before the end date of alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1055"}
{"paraphrased": "what employees have a start date that is bigger than 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1056"}
{"paraphrased": "what is the birth city of a student who didnt stop in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1057"}
{"paraphrased": "friend of student whose end date is after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1058"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1059"}
{"paraphrased": "find employees friends with last day other than 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1060"}
{"paraphrased": "what is the birthplace of employees whose job title isnt software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1061"}
{"paraphrased": "what is the person born in new yorks relationship status", "source": "relationship status that is relationship status of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_1062"}
{"paraphrased": "people who were born before alice started school", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1063"}
{"paraphrased": "where was the employee born who does not work for mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1064"}
{"paraphrased": "whats the relationship status of the employee with an end date no later than 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1065"}
{"paraphrased": "find someone who lists 2 birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_1066"}
{"paraphrased": "employee whose end date is before after end date of employee alice", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1067"}
{"paraphrased": "who is from new york and logged in", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1068"}
{"paraphrased": "which software engineer has employed alice", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_1069"}
{"paraphrased": "people who are friends with employees whose last day was in or before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1070"}
{"paraphrased": "employees with the fewest employers", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1071"}
{"paraphrased": "a 180 cm tall person", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1072"}
{"paraphrased": "people with friends who started work in 2004 at the latest", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1073"}
{"paraphrased": "who is studying computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1074"}
{"paraphrased": "who is friends with someone who graduated after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1075"}
{"paraphrased": "find employee with last day same as or before alices", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1076"}
{"paraphrased": "people that stopped working after alice did", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1077"}
{"paraphrased": "people who have friends who are not software engineers", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1078"}
{"paraphrased": "find employee starting on alices first day or later", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1079"}
{"paraphrased": "which student goes to another university besides brown", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1080"}
{"paraphrased": "which of alices friends is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1081"}
{"paraphrased": "find me all employees that will start at the company before alice leaves", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1082"}
{"paraphrased": "single people that are currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1083"}
{"paraphrased": "what is the relationship status of people going to any university but brown", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1084"}
{"paraphrased": "what student has the most majors", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1085"}
{"paraphrased": "who are people who are students with an end date no greater than 2004 friends with", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1086"}
{"paraphrased": "friend of alice who was born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1087"}
{"paraphrased": "find all males who have friends", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1088"}
{"paraphrased": "who is friends with the student that started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1089"}
{"paraphrased": "people who joined after alice was born", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1090"}
{"paraphrased": "whats the relationship status of all students except those from brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1091"}
{"paraphrased": "which singles are 180 cm tall", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1092"}
{"paraphrased": "student who joined before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1093"}
{"paraphrased": "find the friends of employees that quit in 2004 or later", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1094"}
{"paraphrased": "what is the gender of employees with last day in 2004 or before", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1095"}
{"paraphrased": "employees that are starting their new job on alices birthday", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1096"}
{"paraphrased": "what is the relationship status of employees who left before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1097"}
{"paraphrased": "people that started school when alice did or before", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1098"}
{"paraphrased": "which employeess last day was least recently", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1099"}
{"paraphrased": "what is the average height of all the people in my network", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1100"}
{"paraphrased": "name an employee who started in 2004 but before 2011", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1101"}
{"paraphrased": "which employees started after alices birthdate", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1102"}
{"paraphrased": "what is the gender of the student who started in 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1103"}
{"paraphrased": "what is the relationship status of an employee that stopped working on or before 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1104"}
{"paraphrased": "people who are friends with students who dont major in computer sience", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1105"}
{"paraphrased": "person who stopped school before alice stopped working", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1106"}
{"paraphrased": "which people with an end date of 2004 are 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1107"}
{"paraphrased": "how many fields are there", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_1108"}
{"paraphrased": "find people with the same height as alice or 180 cm", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1109"}
{"paraphrased": "gender of employees who finish after or in 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1110"}
{"paraphrased": "a student starting when alice ends", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1111"}
{"paraphrased": "what student has an end date before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1112"}
{"paraphrased": "people with the most friends", "source": "person that is friends with the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1113"}
{"paraphrased": "students who began school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1114"}
{"paraphrased": "find students sharing alices field of study", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1115"}
{"paraphrased": "people who were born after alice graduated school", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1116"}
{"paraphrased": "people who studied in two or less fields", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1117"}
{"paraphrased": "which employees left prior to 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1118"}
{"paraphrased": "what friend of alice was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1119"}
{"paraphrased": "find employees with last days on or after alices birthday", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1120"}
{"paraphrased": "which date did alice start who finished in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1121"}
{"paraphrased": "which students start date is on or before alices end date", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1122"}
{"paraphrased": "students who started no later than the start date of alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1123"}
{"paraphrased": "what is the relationship status of alice or bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1124"}
{"paraphrased": "employee whose start date is not before end date of student alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1125"}
{"paraphrased": "people who are friends with a student that started no earlier than 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1126"}
{"paraphrased": "people who are friends with an employee whose end date is no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1127"}
{"paraphrased": "what is relationship status of student with last day before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1128"}
{"paraphrased": "friend of alices friend who is from new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_1129"}
{"paraphrased": "friend of employee whose end date is after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1130"}
{"paraphrased": "who is friends with employees that have an end date of 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1131"}
{"paraphrased": "what is the relationship status of working people that did not stop in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1132"}
{"paraphrased": "people that stopped school the day alice was born", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1133"}
{"paraphrased": "what is the job title of the person that is 180 cm", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1134"}
{"paraphrased": "what employees have a start date that is no later than alices birthday", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1135"}
{"paraphrased": "students who started on alices end date", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1136"}
{"paraphrased": "who shares a birthday with alice and is 180 cm tall", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1137"}
{"paraphrased": "fine me all employees who start by 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1138"}
{"paraphrased": "what is thre relationship status of students who started no sooner than 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1139"}
{"paraphrased": "what is the most end date of student 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1140"}
{"paraphrased": "when did mckinseys employe alice start", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1141"}
{"paraphrased": "which employees have the fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1142"}
{"paraphrased": "which employee left their job after alice started", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1143"}
{"paraphrased": "employees starting before alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1144"}
{"paraphrased": "employee whose end date is before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1145"}
{"paraphrased": "who is friends with over two people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1146"}
{"paraphrased": "gender of people who joined their study after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1147"}
{"paraphrased": "what is alices birthplace", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_1148"}
{"paraphrased": "an employee that ends before alice starts", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1149"}
{"paraphrased": "what employee has no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1150"}
{"paraphrased": "people that finished school in or before 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1151"}
{"paraphrased": "least common relationship status", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1152"}
{"paraphrased": "find all male singles", "source": "person whose gender is male and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1153"}
{"paraphrased": "which students start no sooner than alices graduation day", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1154"}
{"paraphrased": "where are the birth cities of employees who have a start date of no earlier than 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1155"}
{"paraphrased": "what is thre relationship status of students who started no later than 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1156"}
{"paraphrased": "which employee started earlier than 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1157"}
{"paraphrased": "people that work for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1158"}
{"paraphrased": "where were the people that finished school before 2004 born", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1159"}
{"paraphrased": "someone with multiple relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_1160"}
{"paraphrased": "who is the employer of the person whose height is 180 cm", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1161"}
{"paraphrased": "students who started in 2004 or before", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1162"}
{"paraphrased": "people that stopped working when alice stopped school", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1163"}
{"paraphrased": "who is friends with someone who didnt go to brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1164"}
{"paraphrased": "who is 180 cm and from the same place as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1165"}
{"paraphrased": "who is alices friend that is from new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1166"}
{"paraphrased": "which student ended no later than alice", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1167"}
{"paraphrased": "name an employee whose end date is similar to that of alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1168"}
{"paraphrased": "which person has the birthdate of alice", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_1169"}
{"paraphrased": "find people born after alices last day of work", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1170"}
{"paraphrased": "what gender are the two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1171"}
{"paraphrased": "find students with last day before or the same as alices", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1172"}
{"paraphrased": "whats the gender of the student that did not attend brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1173"}
{"paraphrased": "find employees who have a start date that is the same as employee alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1174"}
{"paraphrased": "find students friends not studying computer science field", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1175"}
{"paraphrased": "birth city of student whose field of study is not computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1176"}
{"paraphrased": "person who was born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_1177"}
{"paraphrased": "people that have friends that alice is friends with", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1178"}
{"paraphrased": "employees starting before alice finishes", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1179"}
{"paraphrased": "people who joined their job after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1180"}
{"paraphrased": "what was the graduation date of alice in 2004", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_train_1181"}
{"paraphrased": "what is gender of the student whose end date is before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1182"}
{"paraphrased": "find me students whose  end date is no later than 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1183"}
{"paraphrased": "employees who joined after alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1184"}
{"paraphrased": "what relationship statuses are meant for less than two people", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1185"}
{"paraphrased": "which students graduate in 2004 or 2010 or before", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1186"}
{"paraphrased": "people that are friends with a student who started before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1187"}
{"paraphrased": "people that stopped school in or after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1188"}
{"paraphrased": "people that started working on or after alice was born", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1189"}
{"paraphrased": "employees with the latest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1190"}
{"paraphrased": "what genders are the people that stopped working after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1191"}
{"paraphrased": "name a person who is 180 cm who started working in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1192"}
{"paraphrased": "what genders are the people whom alice is friends with", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1193"}
{"paraphrased": "person who is friends with someone whose start date is no later than 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1194"}
{"paraphrased": "who is 180 cm tall and born in the same city as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1195"}
{"paraphrased": "what is the start date of a student who started before alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1196"}
{"paraphrased": "people who started school on or before the day alice finished school", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1197"}
{"paraphrased": "when did employee alice started", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_1198"}
{"paraphrased": "which student has the greatest end date", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1199"}
{"paraphrased": "people that are friends with someone that stopped working before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1200"}
{"paraphrased": "alices friends born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1201"}
{"paraphrased": "what student graduates the earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1202"}
{"paraphrased": "find students who have a start date before either 2004 or 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1203"}
{"paraphrased": "employee whose job title is same job title as of employee alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1204"}
{"paraphrased": "what city was alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1205"}
{"paraphrased": "the job title of a 180 cm tall person", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1206"}
{"paraphrased": "what is the birthplace of employee who ended after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1207"}
{"paraphrased": "birthplaces of students who ended school in or after 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1208"}
{"paraphrased": "students who finish before alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1209"}
{"paraphrased": "gender of student whose end date is not 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1210"}
{"paraphrased": "who is friends with alice and was born on 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1211"}
{"paraphrased": "what student has a start date before the birthdate of alice", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1212"}
{"paraphrased": "find me all people who belong to one gender", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_1213"}
{"paraphrased": "who is friends with someone who started working during or before 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1214"}
{"paraphrased": "which employees last day was most recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1215"}
{"paraphrased": "what is gender of students who started in 2004 and later", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1216"}
{"paraphrased": "find people who are 180 cm tall with 2004 start dates", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1217"}
{"paraphrased": "what employees have a start date that is alices birthday or later", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1218"}
{"paraphrased": "name a person 180 cm tall who was born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1219"}
{"paraphrased": "person from same birth place as that of alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1220"}
{"paraphrased": "people that started working before alice stopped working", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1221"}
{"paraphrased": "people who are friends with students who started before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1222"}
{"paraphrased": "what is the relationship status of the person that is 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1223"}
{"paraphrased": "relationship history of a person", "source": "person that has less than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_1224"}
{"paraphrased": "people who studied in universities other than brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1225"}
{"paraphrased": "birth city of student whose university is not brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1226"}
{"paraphrased": "find the birth city of students with an end date later than 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1227"}
{"paraphrased": "an employee who left after alice was born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1228"}
{"paraphrased": "employee whose end date is before start date of student alice", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1229"}
{"paraphrased": "find a student who left on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1230"}
{"paraphrased": "people who quit their job in or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1231"}
{"paraphrased": "find the relationship status of an employee who has an end date of 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1232"}
{"paraphrased": "which person was born in more than 2 places", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_1233"}
{"paraphrased": "whats the gender of the student that leaves before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1234"}
{"paraphrased": "what person is the tallest", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1235"}
{"paraphrased": "which employee started after alice left", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1236"}
{"paraphrased": "who are the friends of the new students that are starting by 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1237"}
{"paraphrased": "relationship statuses of students who began school in or after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1238"}
{"paraphrased": "an employee starting before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1239"}
{"paraphrased": "who is 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1240"}
{"paraphrased": "who quit working most recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1241"}
{"paraphrased": "people born before alice finished school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1242"}
{"paraphrased": "students who ended school the same day that alice ended school", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1243"}
{"paraphrased": "what employee has the latest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1244"}
{"paraphrased": "student whose start date is after start date of student alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1245"}
{"paraphrased": "which students graduate no sooner than alices first day of work", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1246"}
{"paraphrased": "one person whose friend started studies before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1247"}
{"paraphrased": "who was a student before or on 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1248"}
{"paraphrased": "field of study of someone 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1249"}
{"paraphrased": "find employees with fewer than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1250"}
{"paraphrased": "people that started working in or after 2004 or in or after 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1251"}
{"paraphrased": "someone 180 cm tall and same gender as alice", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1252"}
{"paraphrased": "when did software engineer alice left", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_1253"}
{"paraphrased": "what was alices job title from 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1254"}
{"paraphrased": "which people are friends with employees how started after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1255"}
{"paraphrased": "employees starting contemporaneous to or before alice", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1256"}
{"paraphrased": "find me students end date equal to student alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1257"}
{"paraphrased": "who is online and is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1258"}
{"paraphrased": "what person has two or less friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1259"}
{"paraphrased": "name the friend of alice whose birthplace is new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1260"}
{"paraphrased": "people who are male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1261"}
{"paraphrased": "friends of alice born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1262"}
{"paraphrased": "what people are employees of a employer that is not mckinsey friends with", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1263"}
{"paraphrased": "employees who started on or after alices last day", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1264"}
{"paraphrased": "find the gender of students who were born after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1265"}
{"paraphrased": "a friend of alice born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1266"}
{"paraphrased": "people who are friends with a student whose end date is after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1267"}
{"paraphrased": "what students have a start date that is the same as the end date of alice", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1268"}
{"paraphrased": "who is friends with the employee who quit later than 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1269"}
{"paraphrased": "what is the gender of the student who left by 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1270"}
{"paraphrased": "what genders are the people that stopped school in any year but 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1271"}
{"paraphrased": "a 180 cm tall male", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1272"}
{"paraphrased": "where were the people that finished school in or before 2004 born", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1273"}
{"paraphrased": "what person was born in new york", "source": "person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1274"}
{"paraphrased": "what is the gender of students who did not graduate before 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1275"}
{"paraphrased": "name a person 180 cm in height who is friends with alice", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1276"}
{"paraphrased": "employee whose start date is before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1277"}
{"paraphrased": "who is friends with the person who stopped working before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1278"}
{"paraphrased": "friends of people who quit their jobs after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1279"}
{"paraphrased": "what is the field of study for people who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1280"}
{"paraphrased": "what is the birthplace of employees whose last day was before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1281"}
{"paraphrased": "find employees whose start date is 2004 or later", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1282"}
{"paraphrased": "relationship status of employees starting after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1283"}
{"paraphrased": "students who did not begin school before 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1284"}
{"paraphrased": "what is alice studying at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1285"}
{"paraphrased": "find the gender of students whose end date is no later than 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1286"}
{"paraphrased": "people that stopped working after alice started working", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1287"}
{"paraphrased": "transgendered people", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_1288"}
{"paraphrased": "find employees starting on or after alices last day", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1289"}
{"paraphrased": "students who graduated no later than the day alice did", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1290"}
{"paraphrased": "employees who quit before alice quit her job", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1291"}
{"paraphrased": "employee that has the lowest job status", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1292"}
{"paraphrased": "find employees with last day before or on alices last day", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1293"}
{"paraphrased": "who is friends with the person graduating in 2004 or earlier", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1294"}
{"paraphrased": "find students starting before alices last day at work", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1295"}
{"paraphrased": "what students have an end date that is before the birthday of alice", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1296"}
{"paraphrased": "what employee has the latest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1297"}
{"paraphrased": "employees who stopped working at the same time as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1298"}
{"paraphrased": "people with friends who are not software engineers", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1299"}
{"paraphrased": "people who are 180 cm or taller", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1300"}
{"paraphrased": "which student from brown university is 180 cm tall", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_1301"}
{"paraphrased": "who is friends with the employee starting in 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1302"}
{"paraphrased": "which students started no later than alices birthdate", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1303"}
{"paraphrased": "what people are friends with a person whose height is 180 cm", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1304"}
{"paraphrased": "find the people who joined their job before alice joined her studies", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1305"}
{"paraphrased": "what city were more than two people in my social network born in", "source": "city that is birthplace of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1306"}
{"paraphrased": "which person claims the most genders", "source": "person that has the most number of gender", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string gender)))", "qid": "socialnetwork_train_1307"}
{"paraphrased": "people who joined study on the day alice completed", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1308"}
{"paraphrased": "person that stopped working before alice stopped school", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1309"}
{"paraphrased": "alices friends who are single", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1310"}
{"paraphrased": "find people who are friends with employees who have an end date no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1311"}
{"paraphrased": "employees starting when alice finishes", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1312"}
{"paraphrased": "find people born the same day alice ended school", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1313"}
{"paraphrased": "what did alice stop studying in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_1314"}
{"paraphrased": "employers of all people who are 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1315"}
{"paraphrased": "employee whose start date is minimum the end date of employee alice", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1316"}
{"paraphrased": "find someone who is female", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_1317"}
{"paraphrased": "whats the relationship status of students who graduated before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1318"}
{"paraphrased": "what is alices gender", "source": "gender that is gender of alice and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1319"}
{"paraphrased": "employee whose end date is not after alices end date", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1320"}
{"paraphrased": "people that are male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_1321"}
{"paraphrased": "people taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1322"}
{"paraphrased": "what gender are people that started working in or after 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1323"}
{"paraphrased": "males who are online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_train_1324"}
{"paraphrased": "what student graduated before alice quit her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1325"}
{"paraphrased": "who was born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1326"}
{"paraphrased": "employed until 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1327"}
{"paraphrased": "which person has the least number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_1328"}
{"paraphrased": "people born in new york and 180 cm tall", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1329"}
{"paraphrased": "find people who are 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1330"}
{"paraphrased": "which student ended school right when alice started her job", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1331"}
{"paraphrased": "find people who are single", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1332"}
{"paraphrased": "which employees start the day alice starts", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1333"}
{"paraphrased": "find me the student who started before alices departure", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1334"}
{"paraphrased": "when did alice start school", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1335"}
{"paraphrased": "friends of males", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1336"}
{"paraphrased": "people that have two or fewer employers listed", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1337"}
{"paraphrased": "people that stopped working before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1338"}
{"paraphrased": "what is the students relationship status who ended greater than 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1339"}
{"paraphrased": "what gender are employees whose job title isnt software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1340"}
{"paraphrased": "people who quit their jobs after alice born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1341"}
{"paraphrased": "people who joined work after alice", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1342"}
{"paraphrased": "what gender is the gender of two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1343"}
{"paraphrased": "people born on or before the date alice stopped attending school", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1344"}
{"paraphrased": "name a person friends with a person that is 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1345"}
{"paraphrased": "person not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1346"}
{"paraphrased": "people who were born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1347"}
{"paraphrased": "birth  city of employee whose start date is not 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1348"}
{"paraphrased": "who is the person who is friends with a nonmckinsey employee", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1349"}
{"paraphrased": "genders of employees not finishing in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1350"}
{"paraphrased": "a unique relationship status", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1351"}
{"paraphrased": "find someone born after alices last day of work", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1352"}
{"paraphrased": "people born in 2004 or later", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1353"}
{"paraphrased": "people who are friends with an employee who started after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1354"}
{"paraphrased": "people who are friends with alice and born in 2004", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1355"}
{"paraphrased": "what employee has a start date of 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1356"}
{"paraphrased": "all males who were born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1357"}
{"paraphrased": "students who did not start in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1358"}
{"paraphrased": "which people have more than genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_1359"}
{"paraphrased": "find students with a start date that is no greater than student alices start date", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1360"}
{"paraphrased": "find employees with an end date that is not 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1361"}
{"paraphrased": "gender of an employee not starting in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1362"}
{"paraphrased": "what was alices field of study as a student", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1363"}
{"paraphrased": "people with friends who graduated school after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1364"}
{"paraphrased": "students who graduated on or before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1365"}
{"paraphrased": "friends of people who are taller than 180 cm", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1366"}
{"paraphrased": "people who studied the same field as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1367"}
{"paraphrased": "friends of employees who dont finish in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1368"}
{"paraphrased": "what is the gender of alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1369"}
{"paraphrased": "which gender is the student who ended after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1370"}
{"paraphrased": "student whose end date is before end date of student alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1371"}
{"paraphrased": "what students have a start date that is at least either 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1372"}
{"paraphrased": "person that has two genders", "source": "person that has at most two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_train_1373"}
{"paraphrased": "find friends of employee with end date not in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1374"}
{"paraphrased": "city where person whose relationship status is single born", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1375"}
{"paraphrased": "a friend of alice", "source": "person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1376"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1377"}
{"paraphrased": "what is the relationship status of people that started school in or before 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1378"}
{"paraphrased": "find a person logged in that was born in 2004", "source": "person whose birthdate is 2004 and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_1379"}
{"paraphrased": "when did alice start at mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1380"}
{"paraphrased": "relationship status of student whose start date is not before 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1381"}
{"paraphrased": "gender that is shared by two persons", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1382"}
{"paraphrased": "which people are friends with students who graduated no sooner than 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1383"}
{"paraphrased": "a student ending when alice starts", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1384"}
{"paraphrased": "people that started school before alice started working", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1385"}
{"paraphrased": "find who alice worked for in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_1386"}
{"paraphrased": "employees who were hired either in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1387"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1388"}
{"paraphrased": "alice who is a student of computer science is a student of which university", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_1389"}
{"paraphrased": "what is the relationship status of the student whose start date is before 204", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1390"}
{"paraphrased": "students who died before alice was born", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1391"}
{"paraphrased": "friend of student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1392"}
{"paraphrased": "which student started earliest", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1393"}
{"paraphrased": "who is studying the most things", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1394"}
{"paraphrased": "what person has a birthdate no later than 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1395"}
{"paraphrased": "what city is the bithplace of an employee who did not start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1396"}
{"paraphrased": "where were employees who are not software engineers born", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1397"}
{"paraphrased": "employee who quit before birthdate of alice", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1398"}
{"paraphrased": "where were the people that finished school after 2004 born", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1399"}
{"paraphrased": "locate students who have an end date that is no greater than employee alices", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1400"}
{"paraphrased": "people that stopped school when alice started working", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1401"}
{"paraphrased": "people who are 180 cm tall and study computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_1402"}
{"paraphrased": "employees who began working either by 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1403"}
{"paraphrased": "students whose end date is later than 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1404"}
{"paraphrased": "find all people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1405"}
{"paraphrased": "birth city of employee whose start date is not after 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1406"}
{"paraphrased": "a friend is someone not employed by mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1407"}
{"paraphrased": "students who began school in 2004 or later", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1408"}
{"paraphrased": "what students graduate when alice was hired", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1409"}
{"paraphrased": "student with only one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1410"}
{"paraphrased": "an employee that ends before alice", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1411"}
{"paraphrased": "employees starting contemporaneous to or after alice finishes", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1412"}
{"paraphrased": "students who finish after alice starts", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1413"}
{"paraphrased": "person with same gender as that of person 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1414"}
{"paraphrased": "what are the birthplaces of employees starting after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1415"}
{"paraphrased": "when did alice start attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_1416"}
{"paraphrased": "find students who attended the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1417"}
{"paraphrased": "which is the university alice studied", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1418"}
{"paraphrased": "find employees with last days on or before alices first day", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1419"}
{"paraphrased": "what employee has a start date that is the birthdate of alice", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1420"}
{"paraphrased": "which students graduate no sooner than alices first work day", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1421"}
{"paraphrased": "what is the job title of people who have a height of 180 cm", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1422"}
{"paraphrased": "employees other than software engineers", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1423"}
{"paraphrased": "who is friends with an employee who start date is not 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1424"}
{"paraphrased": "what person is friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1425"}
{"paraphrased": "what relationship statuses are claimed by people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1426"}
{"paraphrased": "what is the university of alice", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1427"}
{"paraphrased": "who is either shorter than alice or same", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1428"}
{"paraphrased": "employees who start after 2004", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1429"}
{"paraphrased": "which employees last day was more recent than alices graduation day", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1430"}
{"paraphrased": "employees who started on alices start date or later", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1431"}
{"paraphrased": "which employees have had no more than employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1432"}
{"paraphrased": "what is job title of employee alice", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_1433"}
{"paraphrased": "which student stopped at the same time employee alice did", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1434"}
{"paraphrased": "whats the relationship status of people who are male", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1435"}
{"paraphrased": "what person is logged in", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1436"}
{"paraphrased": "employees who started work before alice started school", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1437"}
{"paraphrased": "which employees had a quit date that was not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1438"}
{"paraphrased": "employee who left the day alice joined", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1439"}
{"paraphrased": "find employees who have the fewest number of job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1440"}
{"paraphrased": "student who graduates before alice starts", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1441"}
{"paraphrased": "find me a list of students whose start date was in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1442"}
{"paraphrased": "employees who started before alice stopped being a student", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1443"}
{"paraphrased": "what students have an end date less than that of the start date of employee alice", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1444"}
{"paraphrased": "find me all employees that started working after 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1445"}
{"paraphrased": "birth city of student whose end date is before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1446"}
{"paraphrased": "find friends of alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1447"}
{"paraphrased": "what employees have the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1448"}
{"paraphrased": "friends of students starting before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1449"}
{"paraphrased": "who is friends with the person who is 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1450"}
{"paraphrased": "name a person who is friends with more than two other people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1451"}
{"paraphrased": "find people who have the same relationship status of someone alice is friends with", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1452"}
{"paraphrased": "the relationship status of a student not starting in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1453"}
{"paraphrased": "alices 2004 employment start date", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_1454"}
{"paraphrased": "find employees starting before 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1455"}
{"paraphrased": "name the relationship of thie student who started before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1456"}
{"paraphrased": "who is online and friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1457"}
{"paraphrased": "people who are in a relationship", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_1458"}
{"paraphrased": "what was the gender of employees who left before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1459"}
{"paraphrased": "whats the relationship status of the employee starting after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1460"}
{"paraphrased": "student that is enrolled in brown or ucla university", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1461"}
{"paraphrased": "employee with not more than two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1462"}
{"paraphrased": "find the person that is 180 cm tall and is also female", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1463"}
{"paraphrased": "people who were born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_1464"}
{"paraphrased": "which people are friends with employess whose job title isnt softare engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1465"}
{"paraphrased": "name a friend of the student who graduated after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1466"}
{"paraphrased": "people who are not the same gender as alice", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1467"}
{"paraphrased": "what is alices job title from company she left in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_1468"}
{"paraphrased": "people that are currently online", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_train_1469"}
{"paraphrased": "which employees last day was the same day alice started school", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1470"}
{"paraphrased": "what people have at least two relationship statuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_1471"}
{"paraphrased": "person that stopped school most recently", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1472"}
{"paraphrased": "where was alices friend born in", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1473"}
{"paraphrased": "find friends of person born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1474"}
{"paraphrased": "find all people who are friends of alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1475"}
{"paraphrased": "what is the relationship status of current or former students excluding those that started in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1476"}
{"paraphrased": "show me all employees that leave the company before alice starts", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1477"}
{"paraphrased": "find friends of people who started school after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1478"}
{"paraphrased": "find people who are friends with alice and born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1479"}
{"paraphrased": "who has two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_1480"}
{"paraphrased": "find student with last day other than 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1481"}
{"paraphrased": "which gender are most people who are 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1482"}
{"paraphrased": "students who started no later than alices birthdate", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1483"}
{"paraphrased": "who is friends with the person who graduated during or before 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1484"}
{"paraphrased": "employees who started before 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1485"}
{"paraphrased": "gender of students whose end date is later than 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1486"}
{"paraphrased": "find people with two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1487"}
{"paraphrased": "who has maximum two relationship status", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1488"}
{"paraphrased": "name a friend of alice who is online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1489"}
{"paraphrased": "find people with two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_1490"}
{"paraphrased": "alices field of study is computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_1491"}
{"paraphrased": "name a friend of the student who started no later than 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1492"}
{"paraphrased": "who started in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1493"}
{"paraphrased": "people that are friends with employees other than software engineers", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1494"}
{"paraphrased": "find people who are logged in with a height of 180 cm", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1495"}
{"paraphrased": "people that started working in or after 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1496"}
{"paraphrased": "university number", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_1497"}
{"paraphrased": "who has two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1498"}
{"paraphrased": "find students who have an end date less than 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1499"}
{"paraphrased": "find all employees whose start date matches alices", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1500"}
{"paraphrased": "what is the gender of people that started working after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1501"}
{"paraphrased": "student who graduated after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1502"}
{"paraphrased": "which students graduated any year but 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1503"}
{"paraphrased": "whats the relationship status of two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1504"}
{"paraphrased": "gender which is same as alice", "source": "gender that is gender of alice and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1505"}
{"paraphrased": "people who finished working when alice started or before", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1506"}
{"paraphrased": "find students with a start date of employee alice or greater", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1507"}
{"paraphrased": "alices friend who is logged in", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1508"}
{"paraphrased": "who is friends with a student who does not attend brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1509"}
{"paraphrased": "who is the friend of the student who quit in or after 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1510"}
{"paraphrased": "find people with a height of 180 and an end date of 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1511"}
{"paraphrased": "employees who started when alice quit her job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1512"}
{"paraphrased": "which city is the birthplace of two of the people", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1513"}
{"paraphrased": "employee with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1514"}
{"paraphrased": "find the birthplaces of people who are male", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1515"}
{"paraphrased": "which employees started on or before alices birthdate", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1516"}
{"paraphrased": "what people are friens with alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1517"}
{"paraphrased": "students starting after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1518"}
{"paraphrased": "which people were born after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1519"}
{"paraphrased": "what is the birthplace of students who graduated no later than 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1520"}
{"paraphrased": "start date of alice at mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_1521"}
{"paraphrased": "what student started after alices birthdate", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1522"}
{"paraphrased": "find people whose birthday is the same as alices end date", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1523"}
{"paraphrased": "find the gender of all people logged in with a height of 180 cm", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1524"}
{"paraphrased": "find people who has the same birthplace as alice", "source": "person whose birthplace is city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1525"}
{"paraphrased": "employee whose start date is not 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1526"}
{"paraphrased": "who is the same height as alice at 180 cm", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1527"}
{"paraphrased": "find me friends of people who joined their jobs before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1528"}
{"paraphrased": "student whose end date is same as start date of employee alice", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1529"}
{"paraphrased": "who is online that is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1530"}
{"paraphrased": "what is the field of study of student alice whose university is brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1531"}
{"paraphrased": "who is friends with the person is quit no later than 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1532"}
{"paraphrased": "students who started before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1533"}
{"paraphrased": "what is the relationship status of people that stopped working after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1534"}
{"paraphrased": "student with not more than two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1535"}
{"paraphrased": "the birthplace of a student starting after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1536"}
{"paraphrased": "people born after alice started working", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1537"}
{"paraphrased": "what city were people who are single born in", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1538"}
{"paraphrased": "people born in new york", "source": "person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1539"}
{"paraphrased": "people who have more than two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1540"}
{"paraphrased": "name an employee who began in 2004 or later", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1541"}
{"paraphrased": "name a student who started in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1542"}
{"paraphrased": "people who have a different relationship status than alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1543"}
{"paraphrased": "students finishing on alices starting day", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1544"}
{"paraphrased": "who is friends with the person who stopped working in 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1545"}
{"paraphrased": "employee with smallest end date", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1546"}
{"paraphrased": "what is the males relationship status", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1547"}
{"paraphrased": "what is the average height of a person", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1548"}
{"paraphrased": "find males that alice is friends with", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1549"}
{"paraphrased": "find the male friends of alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1550"}
{"paraphrased": "which employee ended on alices start date", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1551"}
{"paraphrased": "what is the birthplace of the employee who didnt start in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1552"}
{"paraphrased": "what date did alice quit studying in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1553"}
{"paraphrased": "what student stopped before alice was born", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1554"}
{"paraphrased": "which student left school before alice left school", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1555"}
{"paraphrased": "people that have two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_1556"}
{"paraphrased": "find students who have an end date greater than the start date of employee alice", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1557"}
{"paraphrased": "people who are friends with a student whose start date is before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1558"}
{"paraphrased": "what is the gender of person who is born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1559"}
{"paraphrased": "birth city of employee whose employer is not mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1560"}
{"paraphrased": "find employees with an end date that is the same or later than student alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1561"}
{"paraphrased": "employee with least number of job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1562"}
{"paraphrased": "what city is the birthplace of the employee who started earlier than 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1563"}
{"paraphrased": "who is that employee who isnt a software engineer friends with", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1564"}
{"paraphrased": "what city were alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1565"}
{"paraphrased": "student whose end date is before birth date of alice", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1566"}
{"paraphrased": "what is schooling start date of alice", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_train_1567"}
{"paraphrased": "what is the relationship status of students who graduated before 2003", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1568"}
{"paraphrased": "gender of student whose end date is not after 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1569"}
{"paraphrased": "what is the relationship status of working people that did not start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1570"}
{"paraphrased": "find students starting before alice", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1571"}
{"paraphrased": "who is friends with alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1572"}
{"paraphrased": "what is the gender of students who started no later than 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1573"}
{"paraphrased": "which students have the fewest majors", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1574"}
{"paraphrased": "find people who are friends with employees who have a start date of no later than 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1575"}
{"paraphrased": "people who are friends with students who started school in 2005 or later", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1576"}
{"paraphrased": "what students started before alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1577"}
{"paraphrased": "what is the gender of students with a start date no later than 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1578"}
{"paraphrased": "who has friends that are not employees at mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1579"}
{"paraphrased": "find single people born in new york", "source": "person whose birthplace is new york and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1580"}
{"paraphrased": "people who are friends with an employee who does not have the job title of software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1581"}
{"paraphrased": "where were alices friends born", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_1582"}
{"paraphrased": "which students graduated before alices birthdate", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1583"}
{"paraphrased": "find friends connections who graduated after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1584"}
{"paraphrased": "which of alices friends were born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1585"}
{"paraphrased": "what is the relationship status of alice", "source": "relationship status that is relationship status of alice and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_1586"}
{"paraphrased": "find people who were born in 2004 or later", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1587"}
{"paraphrased": "which students have the same major as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1588"}
{"paraphrased": "which employee quit most recently", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1589"}
{"paraphrased": "who has the most birthplaces listed", "source": "person that has the most number of birthplace", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string birthplace)))", "qid": "socialnetwork_train_1590"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1591"}
{"paraphrased": "find people  born in 2004 whose height is 180 cm", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1592"}
{"paraphrased": "student whose start date is after end date of employee alice", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1593"}
{"paraphrased": "who quit after alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1594"}
{"paraphrased": "what person has a birthdate sooner than alice", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_1595"}
{"paraphrased": "what genders are people that stopped working in or before 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1596"}
{"paraphrased": "employees who quit their job in or after 2004", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1597"}
{"paraphrased": "students who ended school on or after the day alice was born", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1598"}
{"paraphrased": "find students with last day before or on alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1599"}
{"paraphrased": "which people are friends with students who started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1600"}
{"paraphrased": "student whose end date is so later than alices", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1601"}
{"paraphrased": "name the friend of a person not employed by mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1602"}
{"paraphrased": "find people whose height is 180 cm that are also friends with alice", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1603"}
{"paraphrased": "who is 180 cm tall and born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1604"}
{"paraphrased": "employees who finish before alices birthday", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1605"}
{"paraphrased": "what person has their status as single", "source": "person whose relationship status is single and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1606"}
{"paraphrased": "find people with same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_train_1607"}
{"paraphrased": "find employees with a start date no later than 2004 and their friends", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1608"}
{"paraphrased": "what students have an end date that is the same as student alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1609"}
{"paraphrased": "a person 180 cm tall and has same birthdate as alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1610"}
{"paraphrased": "find friends of employees who quit the job after 2004 ", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1611"}
{"paraphrased": "people that started school on or after the day alice stopped working", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1612"}
{"paraphrased": "students who did not graduate before alice enrolled", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1613"}
{"paraphrased": "a friend of someone who quit after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1614"}
{"paraphrased": "what is the birth city of a worker who started in 2004 or after", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1615"}
{"paraphrased": "who is youngest", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1616"}
{"paraphrased": "students who share alices field of study", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1617"}
{"paraphrased": "the university of someone 180 cm tall", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1618"}
{"paraphrased": "find me all students who graduated after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1619"}
{"paraphrased": "who is born after student alice started", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1620"}
{"paraphrased": "what is the relationship status of friend of alice", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1621"}
{"paraphrased": "what people have two or more genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_1622"}
{"paraphrased": "which male has a relationship status of single", "source": "person whose relationship status is single and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1623"}
{"paraphrased": "birthplaces of students that started school after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1624"}
{"paraphrased": "which students started no later than the day alice started work", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1625"}
{"paraphrased": "people that started working after alice did", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1626"}
{"paraphrased": "find people whom are friends with alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1627"}
{"paraphrased": "what people with a birthdate of 2004 are also friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1628"}
{"paraphrased": "name a friend of the person who is online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_1629"}
{"paraphrased": "student whose end date is not before end date of employee alice", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1630"}
{"paraphrased": "who is born in a city that alice was born in", "source": "city that is birthplace of alice and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1631"}
{"paraphrased": "what student has a start date close to the start date of alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1632"}
{"paraphrased": "student who started not after 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1633"}
{"paraphrased": "student whose end date is on the date student alice started", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1634"}
{"paraphrased": "students at brown or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1635"}
{"paraphrased": "which employee has the earliest start date", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1636"}
{"paraphrased": "find me the birth city of all students whoes end date is 2004 or later", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1637"}
{"paraphrased": "who is the newest employee", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1638"}
{"paraphrased": "people not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_1639"}
{"paraphrased": "find the employee who who left after alice started", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1640"}
{"paraphrased": "which students do not attend brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1641"}
{"paraphrased": "when did alice graduate after studying computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_1642"}
{"paraphrased": "find students who have an end date that is no greater than student alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1643"}
{"paraphrased": "where was alices friend born", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1644"}
{"paraphrased": "alice is a student at which university", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1645"}
{"paraphrased": "people who are friends with people who got their current job before 2005", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1646"}
{"paraphrased": "find me the place of birth for all employees starting before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1647"}
{"paraphrased": "find employees starting after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1648"}
{"paraphrased": "what person has two relationship statuses", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1649"}
{"paraphrased": "what university did alice attend in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_1650"}
{"paraphrased": "who left their job the longest time ago", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1651"}
{"paraphrased": "what did alice study in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_1652"}
{"paraphrased": "person who completed the education first", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1653"}
{"paraphrased": "what is the average height of people", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_1654"}
{"paraphrased": "what is the relationship status of the student who finished before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1655"}
{"paraphrased": "people born before alice quit her job", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_1656"}
{"paraphrased": "what is the relationship status of the employee who started in 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1657"}
{"paraphrased": "people who are friends with a student whose start date is 2004 or later", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1658"}
{"paraphrased": "which student was the last to finish", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1659"}
{"paraphrased": "find alice a student at university", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_1660"}
{"paraphrased": "which employees stared the same day alice started school", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1661"}
{"paraphrased": "cities of employees who were hired after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1662"}
{"paraphrased": "a student who started after student alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1663"}
{"paraphrased": "what student started on the same day as alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1664"}
{"paraphrased": "what student has an end date no earlier than alices end date", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1665"}
{"paraphrased": "which gender is claimed by at least two people", "source": "gender that is gender of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1666"}
{"paraphrased": "employee who was born when alice quit the job", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1667"}
{"paraphrased": "birth city of employee whose end date is before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1668"}
{"paraphrased": "birthplace of students finishing in or after 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1669"}
{"paraphrased": "what student has an end date before student alice", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1670"}
{"paraphrased": "find employees with last day on or before alices first day", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1671"}
{"paraphrased": "find people who are male and 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1672"}
{"paraphrased": "what employees have a start date that is either 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1673"}
{"paraphrased": "what is the total number of genders", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_1674"}
{"paraphrased": "who is friends with a student who started before 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1675"}
{"paraphrased": "what is the gender of students who do not go to brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1676"}
{"paraphrased": "employee who quit before alice graduated", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1677"}
{"paraphrased": "what people are friends with employees who have an end date before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1678"}
{"paraphrased": "find friends of students whose last day is 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1679"}
{"paraphrased": "which 180 cm tall people have a start date of 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1680"}
{"paraphrased": "what city were students born in that started before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1681"}
{"paraphrased": "what employee is starting by the time alice leaves the company", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1682"}
{"paraphrased": "find employee with a start date after alices", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1683"}
{"paraphrased": "employees who did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1684"}
{"paraphrased": "relationship status of students not starting in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1685"}
{"paraphrased": "places of birth of employees who quit their job in 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1686"}
{"paraphrased": "which employee started after 2004 or 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1687"}
{"paraphrased": "find those that are friends with students who have start dates earlier than 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1688"}
{"paraphrased": "what person is shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1689"}
{"paraphrased": "who is 180 cm tall and has a start date in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1690"}
{"paraphrased": "name people whose height is greater than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_1691"}
{"paraphrased": "find people with one or two birthplaces", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_1692"}
{"paraphrased": "students with the same field of study as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1693"}
{"paraphrased": "what students began school before alice began working", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1694"}
{"paraphrased": "people that started school before alice did", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1695"}
{"paraphrased": "which students attended between 2004 and 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1696"}
{"paraphrased": "what person is the shortest", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1697"}
{"paraphrased": "who stopped school before alice started", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1698"}
{"paraphrased": "what male was born in new york", "source": "person whose gender is male and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1699"}
{"paraphrased": "what is the gender of employees terminated on or after 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1700"}
{"paraphrased": "a student who left on or after alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1701"}
{"paraphrased": "which people are friends with students graduating in 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1702"}
{"paraphrased": "what employee has an end date before 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1703"}
{"paraphrased": "what is the birthplace of people who did not start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1704"}
{"paraphrased": "what birthplace has at least two people in it", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1705"}
{"paraphrased": "friends of employees who are not software engineers", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1706"}
{"paraphrased": "students who have no more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1707"}
{"paraphrased": "either mckinsey or google", "source": "mckinsey or google", "target": "(call listValue (call concat en.company.mckinsey en.company.google))", "qid": "socialnetwork_train_1708"}
{"paraphrased": "which student left school after alice quit her job", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1709"}
{"paraphrased": "what employees have a start date the same as alices end date", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1710"}
{"paraphrased": "students who started in 2004 or 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1711"}
{"paraphrased": "people that stopped school the same day as alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1712"}
{"paraphrased": "friend of employee whose start date is not 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1713"}
{"paraphrased": "students not finishing in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1714"}
{"paraphrased": "what worker has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1715"}
{"paraphrased": "which students started the same day alice did", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1716"}
{"paraphrased": "find me friends of people studying somewhere other than brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1717"}
{"paraphrased": "people that started working in or before 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1718"}
{"paraphrased": "people who is taller then 180 cm logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1719"}
{"paraphrased": "which people are friends with students who strated before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1720"}
{"paraphrased": "what people are logged in with a height of 180 cm", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1721"}
{"paraphrased": "persons born in new york", "source": "person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1722"}
{"paraphrased": "find the people who are 180 cm tall", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1723"}
{"paraphrased": "find people who are logged in who are also friends with alice", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1724"}
{"paraphrased": "find males who are 180cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1725"}
{"paraphrased": "what is alices field of study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_1726"}
{"paraphrased": "what is the number of city", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_1727"}
{"paraphrased": "who was born on the date alice left", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_train_1728"}
{"paraphrased": "find alices friends who are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1729"}
{"paraphrased": "who is friends with the person who is graduating in 2004 at the earliest", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1730"}
{"paraphrased": "find people who are logged in and has the birth place as newyork", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_1731"}
{"paraphrased": "which students have the earliest start date", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1732"}
{"paraphrased": "what gender are people that started working before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1733"}
{"paraphrased": "find me the two people born in the same city", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1734"}
{"paraphrased": "who has the same gender as alice and is 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1735"}
{"paraphrased": "name an employee who left after alice started", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1736"}
{"paraphrased": "find the youngest person", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_1737"}
{"paraphrased": "student whose start date is the smallest", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1738"}
{"paraphrased": "find me the relationship status of students who graduated since 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1739"}
{"paraphrased": "find me all employees who quit before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1740"}
{"paraphrased": "find people who are students of a university that is not brown and their friends", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1741"}
{"paraphrased": "what people have a height of 180 cm and the height of alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1742"}
{"paraphrased": "find people who are not alices friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1743"}
{"paraphrased": "employees finishing before 2004", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1744"}
{"paraphrased": "employee who started to work before alices enrollment in school", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1745"}
{"paraphrased": "students finishing contemporaneous to or after alice starts", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1746"}
{"paraphrased": "one student who didnt stop in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1747"}
{"paraphrased": "birthplace of employees who finish before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1748"}
{"paraphrased": "what students have a start date that is the same as employee alices end date or later", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1749"}
{"paraphrased": "find people that have two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1750"}
{"paraphrased": "which students start school the same day alice starts work", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1751"}
{"paraphrased": "what are the genders of people born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_1752"}
{"paraphrased": "employee whose employer is either mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1753"}
{"paraphrased": "people with only one relationship status", "source": "person that has less than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_1754"}
{"paraphrased": "people who are single and were born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1755"}
{"paraphrased": "whats the relationship status of the student that graduated after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1756"}
{"paraphrased": "what is alices job title at mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_1757"}
{"paraphrased": "which student has an end date smaller than the start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1758"}
{"paraphrased": "people that are friends with someone that started school after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1759"}
{"paraphrased": "find people who have only 1 relationship status", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_1760"}
{"paraphrased": "student whose end date is after end date of student alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1761"}
{"paraphrased": "when did alice start going to the school that she graduated in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1762"}
{"paraphrased": "people that started working when alice stopped school or before", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1763"}
{"paraphrased": "locate the gender of students who have an end date of 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1764"}
{"paraphrased": "relationship status of student whose field of study is not computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1765"}
{"paraphrased": "what is the gender of an employee with an end date later than 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1766"}
{"paraphrased": "find friends of people who quit their job before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1767"}
{"paraphrased": "who is 180 cm tall and has the same birthplace as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1768"}
{"paraphrased": "find employees whom have an end date that is equal or greater to the birthday of alice", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1769"}
{"paraphrased": "people that are friends with someone that started working before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1770"}
{"paraphrased": "find relationship statuses for employees with a start date later than 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1771"}
{"paraphrased": "students who started on alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1772"}
{"paraphrased": "what students have start dates later than 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1773"}
{"paraphrased": "student whose start date is not 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1774"}
{"paraphrased": "find the students of the same gender who were born in at least 2004 ", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1775"}
{"paraphrased": "what city is the birthplace of an employee whose end date is not in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1776"}
{"paraphrased": "find employees with the latest end dates", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1777"}
{"paraphrased": "people that have less than two genders listed", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_1778"}
{"paraphrased": "people that are currently online and friends with alice", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1779"}
{"paraphrased": "someone with over two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1780"}
{"paraphrased": "find student whose last day matches alices start date", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1781"}
{"paraphrased": "people that have two or more relationship stutuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_1782"}
{"paraphrased": "whats the relationship status of the new student starting before 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1783"}
{"paraphrased": "a friend of an employee that isnt a software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1784"}
{"paraphrased": "who was born in 2004 and is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1785"}
{"paraphrased": "people who are friends with someone who started working before 2005", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1786"}
{"paraphrased": "people that are friends with someone that did not stop working in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1787"}
{"paraphrased": "find employees whose end date is less than 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1788"}
{"paraphrased": "who started school when alice graduated in 2004", "source": "start date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_start_date)))", "qid": "socialnetwork_train_1789"}
{"paraphrased": "find the friends of people who joined their studies after 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1790"}
{"paraphrased": "sex of students that started school in 2004 or earlier", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1791"}
{"paraphrased": "who was born before alices last day of school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_1792"}
{"paraphrased": "find student with last day on 2004 or earlier", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1793"}
{"paraphrased": "who is the employee with the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1794"}
{"paraphrased": "find me all relationship statuses for employees whose start date is no later than 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1795"}
{"paraphrased": "any friend of alice that is logged in", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1796"}
{"paraphrased": "find the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1797"}
{"paraphrased": "find employees with one or two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1798"}
{"paraphrased": "what is the gender of working people that dont work for mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1799"}
{"paraphrased": "student who ended last", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1800"}
{"paraphrased": "person who is older then alice", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1801"}
{"paraphrased": "find me the gender of employees starting before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1802"}
{"paraphrased": "find people with a height of 180 cm and their relationship status", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1803"}
{"paraphrased": "which students start date is closest to alices birthday", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1804"}
{"paraphrased": "what employee has the longest employment", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1805"}
{"paraphrased": "employees whose end date is the same as alices", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1806"}
{"paraphrased": "people who have friends who left their jobs in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1807"}
{"paraphrased": "person who is friends with student that did not graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1808"}
{"paraphrased": "find friends of people who quit work in 2004 at the latest", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1809"}
{"paraphrased": "who is 180 cm tall and is studying computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_1810"}
{"paraphrased": "persons born before start date of alice", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_1811"}
{"paraphrased": "what employee has the same end date as alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1812"}
{"paraphrased": "find employee whose last day was before 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1813"}
{"paraphrased": "who has a smaller end date than 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1814"}
{"paraphrased": "gender of student who was a smaller date then 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1815"}
{"paraphrased": "employees who started on the same date as alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1816"}
{"paraphrased": "who is alice friends with that is logged in", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1817"}
{"paraphrased": "who has friends that are students and whos end date is 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1818"}
{"paraphrased": "students finishing when alice starts", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1819"}
{"paraphrased": "find me all people with less than two birthplaces", "source": "person that has less than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_train_1820"}
{"paraphrased": "what employee started their job on the same day as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1821"}
{"paraphrased": "a worker whose company isnt mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1822"}
{"paraphrased": "people that stopped working after alice stopped school", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1823"}
{"paraphrased": "student whose end date is not before end date of student alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1824"}
{"paraphrased": "which people were born in new york", "source": "person whose birthplace is new york and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1825"}
{"paraphrased": "find students whose start date is less than 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1826"}
{"paraphrased": "students who will have their last day before alice quits her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1827"}
{"paraphrased": "find people at least as tall as alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1828"}
{"paraphrased": "who started with alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1829"}
{"paraphrased": "where were the working people that do not work for mckinsey born", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1830"}
{"paraphrased": "find students with last day before alices", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1831"}
{"paraphrased": "people that have a friend born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1832"}
{"paraphrased": "employee whose start date is after end date of student alice", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1833"}
{"paraphrased": "find friends of people who didnt lose employment in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1834"}
{"paraphrased": "city of birth for all non software engineers", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1835"}
{"paraphrased": "what is the number of the city", "source": "number of city", "target": "(call listValue (call .size (call getProperty (call singleton en.city) (string !type))))", "qid": "socialnetwork_train_1836"}
{"paraphrased": "students who started before 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1837"}
{"paraphrased": "what employees have a start date later than 2004 and who are they friends with", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1838"}
{"paraphrased": "find a student who started no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1839"}
{"paraphrased": "employees who joined after  alice joined", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1840"}
{"paraphrased": "who has different relationship status to alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1841"}
{"paraphrased": "students who finish after alice", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1842"}
{"paraphrased": "a student that ends before alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1843"}
{"paraphrased": "who has the fewest friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1844"}
{"paraphrased": "find people whom are friends with employees who have an end date that is not 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1845"}
{"paraphrased": "employees who share the same job titles as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1846"}
{"paraphrased": "what is the relationship status of two people with the same status", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1847"}
{"paraphrased": "students who left before alice started", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1848"}
{"paraphrased": "people who were born in 2004 or earlier", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_1849"}
{"paraphrased": "who is friends with someone who didnt stop working in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1850"}
{"paraphrased": "employee with the largest number of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1851"}
{"paraphrased": "find me the student who graduated on alices birthdate", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1852"}
{"paraphrased": "find employees with an end date after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1853"}
{"paraphrased": "what student started last", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1854"}
{"paraphrased": "whats the gender of alice", "source": "gender that is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_1855"}
{"paraphrased": "name a person that alice is friends with", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_1856"}
{"paraphrased": "relationship status of employees not finishing in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1857"}
{"paraphrased": "a student not taking computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1858"}
{"paraphrased": "find me the gender of students who did not begin school in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1859"}
{"paraphrased": "what student started the day alice quit", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1860"}
{"paraphrased": "relationship status of employees who did not start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1861"}
{"paraphrased": "where were the people that started working in any year but 2004 born", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1862"}
{"paraphrased": "what employees started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1863"}
{"paraphrased": "what person that is online is friends with alice", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_1864"}
{"paraphrased": "which company employees the person who is 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1865"}
{"paraphrased": "what is employees gender who started in 2004 or earlier", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1866"}
{"paraphrased": "a friend of a single person", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1867"}
{"paraphrased": "who is 180 cm tall and has the same birthdate as alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_1868"}
{"paraphrased": "employees who quit before alices birthday", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1869"}
{"paraphrased": "males who were born in new york", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_1870"}
{"paraphrased": "relationship status of employee whose end date is after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1871"}
{"paraphrased": "student with less than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1872"}
{"paraphrased": "what is the relationship status of alice and bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1873"}
{"paraphrased": "what did alice study at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_1874"}
{"paraphrased": "which people are 180 cm tall and have a birthdate of 2004", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1875"}
{"paraphrased": "who is friends with a person who didnt stop working in 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1876"}
{"paraphrased": "where are people born who are 180 cm in height", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1877"}
{"paraphrased": "find the relationship status of employees with an end date earlier than 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1878"}
{"paraphrased": "what is the gender", "source": "male or female", "target": "(call listValue (call concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_1879"}
{"paraphrased": "people that are friends with alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_1880"}
{"paraphrased": "genders of employees who arent software engineers", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1881"}
{"paraphrased": "find single friends of alice", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1882"}
{"paraphrased": "what students have a start date that is no greater than employee alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1883"}
{"paraphrased": "what is the gender of employees whose last day was no later than 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1884"}
{"paraphrased": "employees with the fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1885"}
{"paraphrased": "shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_1886"}
{"paraphrased": "people shorter than 200 cm", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_1887"}
{"paraphrased": "person who has been in less then 3 relationships", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_1888"}
{"paraphrased": "find people who are 180 cm tall with last day in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1889"}
{"paraphrased": "is alice going to brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_1890"}
{"paraphrased": "who are some of alices friends connections", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1891"}
{"paraphrased": "people who are single", "source": "person whose relationship status is single and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1892"}
{"paraphrased": "birthplace of students born before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1893"}
{"paraphrased": "what city is the birthplace of less than two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1894"}
{"paraphrased": "what is the job title of the person who is 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1895"}
{"paraphrased": "find people with birth date not in 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1896"}
{"paraphrased": "which students have larger end dates than alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1897"}
{"paraphrased": "what people are friends of employees that have a start date before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1898"}
{"paraphrased": "find people who are 180 cm tall and logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_1899"}
{"paraphrased": "students that are starting before alices last day", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1900"}
{"paraphrased": "which working people have less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1901"}
{"paraphrased": "find all people that have two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_1902"}
{"paraphrased": "what people have the same birthdate as those whose height is 180 cm", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1903"}
{"paraphrased": "birthplace of employees who joined before 2005", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1904"}
{"paraphrased": "all 180 cm tall people who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_1905"}
{"paraphrased": "what gender is the student who started in 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1906"}
{"paraphrased": "which date did student alice left", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_1907"}
{"paraphrased": "a person with a friend whos not a computer science major", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1908"}
{"paraphrased": "people with two or more birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_1909"}
{"paraphrased": "find employees whose end date is the same as the start date for student alice", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1910"}
{"paraphrased": "what is the students relationship status who didnt start in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1911"}
{"paraphrased": "people who stopped school on or after the date alice started school", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1912"}
{"paraphrased": "an employee starting when or before alice ends", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1913"}
{"paraphrased": "which employee has a start date on alices birthdate", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1914"}
{"paraphrased": "find all people that are currently online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1915"}
{"paraphrased": "what employee ended at least on alices birthdate", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1916"}
{"paraphrased": "students who go to the same university as alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1917"}
{"paraphrased": "what students have a start date that is no later than the end date of employee alice", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1918"}
{"paraphrased": "what is the relationship status of no more than two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1919"}
{"paraphrased": "find students whos end date is equal to alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1920"}
{"paraphrased": "where were the people that stopped working before 2004 born", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1921"}
{"paraphrased": "what person is friends with the employee who is not a software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1922"}
{"paraphrased": "what employees started on or before alices start date", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1923"}
{"paraphrased": "find all people who is friend with people born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_1924"}
{"paraphrased": "when was alice born", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_1925"}
{"paraphrased": "what employees have two or fewer job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1926"}
{"paraphrased": "whats the relationship status of employee who quit their job after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1927"}
{"paraphrased": "what employees started work after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1928"}
{"paraphrased": "name the person with a height of 180 cm who is logged in", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_1929"}
{"paraphrased": "find employees called software engineers who are 180 cm tall", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_1930"}
{"paraphrased": "friend of student whose end date is not after 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1931"}
{"paraphrased": "what is the gender of the single people", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1932"}
{"paraphrased": "who graduated before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1933"}
{"paraphrased": "people that started school after alice stopped school", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1934"}
{"paraphrased": "find people with a relationship status that more than two people have", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1935"}
{"paraphrased": "birth places of employees other than software engineers", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1936"}
{"paraphrased": "people that have two or less friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1937"}
{"paraphrased": "whats the gender of the students who are not studying computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1938"}
{"paraphrased": "who is not 180cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_1939"}
{"paraphrased": "what is the relationship status of employees starting in 2004 or later", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1940"}
{"paraphrased": "presently logged in persons whose relationship status is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_1941"}
{"paraphrased": "when did alice quit working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_1942"}
{"paraphrased": "name the single persons friends", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_1943"}
{"paraphrased": "find birthplace of males", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_1944"}
{"paraphrased": "who goes to brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1945"}
{"paraphrased": "people who completed their studies before alice joined", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1946"}
{"paraphrased": "what students have an end date that is no later than 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1947"}
{"paraphrased": "find people who are friends with no more than two people", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1948"}
{"paraphrased": "find friends who are 180 cm tall like alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_1949"}
{"paraphrased": "show me all employees leaving before alices last day", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1950"}
{"paraphrased": "people of the least common gender", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1951"}
{"paraphrased": "find someone with two or less birthplaces", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_train_1952"}
{"paraphrased": "people who have friends who did not begin working in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1953"}
{"paraphrased": "what students have an end date that is no earlier than the start date of alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1954"}
{"paraphrased": "the birthplace of a student starting before or during 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1955"}
{"paraphrased": "name a male who is friends with alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_1956"}
{"paraphrased": "person who has two or more friends", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1957"}
{"paraphrased": "people that started work in or before 2004 or in or before 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1958"}
{"paraphrased": "find employees who started in 2004 or before", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1959"}
{"paraphrased": "what is the birth city of a student who didnt start in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1960"}
{"paraphrased": "find birth cities for students who have a start date no later than 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1961"}
{"paraphrased": "name a friend of the person who is 180 cm tall", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1962"}
{"paraphrased": "find employees whom have a end date that is no later than the start date of employee alice", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1963"}
{"paraphrased": "student who joined after 2004", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1964"}
{"paraphrased": "which employee quit before alice", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1965"}
{"paraphrased": "an employee starting before alice was born", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1966"}
{"paraphrased": "who is born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_1967"}
{"paraphrased": "what is the gender of people attending any university but brown", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1968"}
{"paraphrased": "which employees last day was the same day as alices graduation day", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1969"}
{"paraphrased": "who has two different relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_1970"}
{"paraphrased": "where were the people that started school in or before 2004 born", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1971"}
{"paraphrased": "who did alice work for when she quit her job in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_1972"}
{"paraphrased": "what relationship status is claimed by more than two people", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1973"}
{"paraphrased": "people who are at least as tall as alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_1974"}
{"paraphrased": "what is the relationship status of those two people", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1975"}
{"paraphrased": "find people with birth date same as employment end date of alice", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_1976"}
{"paraphrased": "find friends of people who quit their jobs after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1977"}
{"paraphrased": "student who started after alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1978"}
{"paraphrased": "a friend of a noncomputer science student", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1979"}
{"paraphrased": "who has friends who are 180 cm tall", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_1980"}
{"paraphrased": "what is relationship status of students starting in 2004 and after", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1981"}
{"paraphrased": "find me all the people that are 180 cm tall and were born in the same place as alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_1982"}
{"paraphrased": "which city were alices friends born in", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_1983"}
{"paraphrased": "who is friends with students that have an end date of 2004", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1984"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_1985"}
{"paraphrased": "which student started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1986"}
{"paraphrased": "what students started after or at the same time as alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1987"}
{"paraphrased": "which students ending date is greater than 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1988"}
{"paraphrased": "employee left the day alice started", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_1989"}
{"paraphrased": "alices friend born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_1990"}
{"paraphrased": "what students started between 2004 and 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1991"}
{"paraphrased": "what person is online", "source": "person that is logged in and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string logged_in)))", "qid": "socialnetwork_train_1992"}
{"paraphrased": "which student left first", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_1993"}
{"paraphrased": "where were people that started work before 2004 born", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1994"}
{"paraphrased": "what gender are people that started school in or after 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1995"}
{"paraphrased": "what is the the relationship status of the employee who started in 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_1996"}
{"paraphrased": "what person has two friends", "source": "person that two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_1997"}
{"paraphrased": "friends of students starting in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1998"}
{"paraphrased": "birthplace of students who are not studying at brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_1999"}
{"paraphrased": "people who are friends with alice and male", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2000"}
{"paraphrased": "what city were most people born", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2001"}
{"paraphrased": "employees with the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2002"}
{"paraphrased": "employee whose job title is not software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2003"}
{"paraphrased": "what was alices job title while working for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2004"}
{"paraphrased": "find students whose last day is the same or later than alices", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2005"}
{"paraphrased": "what is alices termination date", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2006"}
{"paraphrased": "what city were less than two people born in", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2007"}
{"paraphrased": "what job did alice leave in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2008"}
{"paraphrased": "person with same birthdate of person with 180 cm height", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2009"}
{"paraphrased": "find friends who are not in computer science", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2010"}
{"paraphrased": "what people are friends with students who have a start date no later than 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2011"}
{"paraphrased": "person alices height or taller", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2012"}
{"paraphrased": "which worker left on or before the day student alice started", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2013"}
{"paraphrased": "who is born on or after start date of employee alice", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2014"}
{"paraphrased": "birth city of no more than two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2015"}
{"paraphrased": "find all people with relationship status that is the same as the person that is 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2016"}
{"paraphrased": "employees who finish when alice starts", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2017"}
{"paraphrased": "one student who started on the same day as employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2018"}
{"paraphrased": "find me all people who are 180 cm tall and currently online", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_train_2019"}
{"paraphrased": "who is the friend of the employee whose start date is at least 2005", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2020"}
{"paraphrased": "what is the employees relationship status who did not end in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2021"}
{"paraphrased": "which employees are not employed by mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2022"}
{"paraphrased": "either 2004 or 2010", "source": "2004 or 2010", "target": "(call listValue (call concat (date 2004 -1 -1) (date 2010 -1 -1)))", "qid": "socialnetwork_train_2023"}
{"paraphrased": "find employees that have the greatest amount of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2024"}
{"paraphrased": "people who have less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2025"}
{"paraphrased": "people who completed studies with or before alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2026"}
{"paraphrased": "name a friend of the employee who started working no later than 2004", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2027"}
{"paraphrased": "which student started after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2028"}
{"paraphrased": "find student with the latest starting date", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2029"}
{"paraphrased": "person born in new york in 2004", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2030"}
{"paraphrased": "who is a software engineer that is 180 cm", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2031"}
{"paraphrased": "people who arent alices friend", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2032"}
{"paraphrased": "students who graduated before alice was born", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2033"}
{"paraphrased": "what student began before student alice did", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2034"}
{"paraphrased": "person that has an employee friend who starts to work by 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2035"}
{"paraphrased": "what gender is the employee whose end date is not 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2036"}
{"paraphrased": "what is the relationship status of an employee who has worked since 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2037"}
{"paraphrased": "who is alice friends with who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2038"}
{"paraphrased": "friends of people who completed their studies after 2003", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2039"}
{"paraphrased": "find me the student who started on the same day as alices departure", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2040"}
{"paraphrased": "city that most number of persons born", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2041"}
{"paraphrased": "student whose field of study is not computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2042"}
{"paraphrased": "find me all people that were born in new york that are currently online", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_train_2043"}
{"paraphrased": "what is the relationship status of people that started working after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2044"}
{"paraphrased": "who are the students studying computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2045"}
{"paraphrased": "student who graduated before alice started her job", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2046"}
{"paraphrased": "find a person with less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2047"}
{"paraphrased": "how many companies are there", "source": "number of company", "target": "(call listValue (call .size (call getProperty (call singleton en.company) (string !type))))", "qid": "socialnetwork_train_2048"}
{"paraphrased": "who are the employees who quit before 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2049"}
{"paraphrased": "whats the relationship status of students that did not study computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2050"}
{"paraphrased": "people who are friends of bob or alice", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2051"}
{"paraphrased": "people that stopped school when alice was born or before", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2052"}
{"paraphrased": "what is the gender of people studying something other than computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2053"}
{"paraphrased": "which employees last day was in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2054"}
{"paraphrased": "birthplaces of employees not finishing in 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2055"}
{"paraphrased": "people that stopped working when alice stopped school or after", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2056"}
{"paraphrased": "what are the relationship statuses of people born in new york", "source": "relationship status that is relationship status of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2057"}
{"paraphrased": "student who finishes before alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2058"}
{"paraphrased": "find people that are friends with employees whose start date is later than 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2059"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2060"}
{"paraphrased": "what is the gender of students with a start date that is not the same as 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2061"}
{"paraphrased": "find employees with one employer", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2062"}
{"paraphrased": "alice whose field of study is computer science ended on what date", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_2063"}
{"paraphrased": "gender of an employee that ends during or before 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2064"}
{"paraphrased": "what employees have a job title other than software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2065"}
{"paraphrased": "find employees who have an end date the same as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2066"}
{"paraphrased": "relationship status of at least two people", "source": "relationship status that is relationship status of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2067"}
{"paraphrased": "what person was born on the last day of alices employment", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_2068"}
{"paraphrased": "birthplace of employees who started in or after 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2069"}
{"paraphrased": "people that started working before alice did", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2070"}
{"paraphrased": "what is the gender of students who graduate after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2071"}
{"paraphrased": "who quit at the same time or after alice did", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2072"}
{"paraphrased": "what is the gender of alices friend", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2073"}
{"paraphrased": "find people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2074"}
{"paraphrased": "relationship status of student whose end date is before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2075"}
{"paraphrased": "what university will alice finish in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_train_2076"}
{"paraphrased": "alices friend who is 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2077"}
{"paraphrased": "people who started working before alice quit her job", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2078"}
{"paraphrased": "students who graduated after alices first work day", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2079"}
{"paraphrased": "what is relationship status of students with end dates other than 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2080"}
{"paraphrased": "birth city of employee whose start date is after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2081"}
{"paraphrased": "student whose start date is not after start date of employee alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2082"}
{"paraphrased": "what student hast the earliest start date", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2083"}
{"paraphrased": "birthplaces of people who studied in fields other than computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2084"}
{"paraphrased": "what is the birth city of students whose end date is less than 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2085"}
{"paraphrased": "find birthplaces of students not attending brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2086"}
{"paraphrased": "people who are born the same day alice started her job", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_2087"}
{"paraphrased": "what is the birthplace of the employee who left after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2088"}
{"paraphrased": "people with only two friends", "source": "person that two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2089"}
{"paraphrased": "find the student who graduated on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2090"}
{"paraphrased": "any friend of anyone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2091"}
{"paraphrased": "when did alice start working for mckinsey", "source": "start date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_start_date)))", "qid": "socialnetwork_train_2092"}
{"paraphrased": "relationship statuses of students that dont go to brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2093"}
{"paraphrased": "how many employees share alices job title", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2094"}
{"paraphrased": "who was born on alices first day of school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_train_2095"}
{"paraphrased": "find friends of students with start dates other than 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2096"}
{"paraphrased": "what person is friends with the person logged in", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2097"}
{"paraphrased": "what person was not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_train_2098"}
{"paraphrased": "find everyone who is either single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_2099"}
{"paraphrased": "find people who have a birthplace of new york and their friends", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2100"}
{"paraphrased": "who are alices male friends", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2101"}
{"paraphrased": "employee with smallest job history", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2102"}
{"paraphrased": "employee who has maximum 2 job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2103"}
{"paraphrased": "what is the relationship status of employees who quit before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2104"}
{"paraphrased": "people that stopped school when alice stopped working or after", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2105"}
{"paraphrased": "what employee has an employer that is either mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2106"}
{"paraphrased": "which employees last day was not n 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2107"}
{"paraphrased": "who is alice friend born in new york", "source": "person that is friends with alice and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2108"}
{"paraphrased": "people who joined their studies after alice quit her job", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2109"}
{"paraphrased": "which student started earliest", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2110"}
{"paraphrased": "people who are 180 cm tall and left their job in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2111"}
{"paraphrased": "student whose start date is not before start date of student alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2112"}
{"paraphrased": "which student does not attend brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2113"}
{"paraphrased": "which employee ended no greater than alices", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2114"}
{"paraphrased": "an employee ending before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2115"}
{"paraphrased": "what person is 200 cm or shorter", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2116"}
{"paraphrased": "find students who have a start date equal to student alices end date", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2117"}
{"paraphrased": "either number of field", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_2118"}
{"paraphrased": "birthplace of students who start before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2119"}
{"paraphrased": "birth city of all students who started earlier than 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2120"}
{"paraphrased": "employees who are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2121"}
{"paraphrased": "people that started school after alice stopped working", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2122"}
{"paraphrased": "who employees alice as a software engineer", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_train_2123"}
{"paraphrased": "find students that have the latest start date", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2124"}
{"paraphrased": "find students who have a start date the same as employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2125"}
{"paraphrased": "relationship status of alices friends", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2126"}
{"paraphrased": "students who ended school the day alice started working", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2127"}
{"paraphrased": "who is friends with the employee who began later than 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2128"}
{"paraphrased": "what employee has a start date later than the end date of alice", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2129"}
{"paraphrased": "people who are friends with students not attending brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2130"}
{"paraphrased": "birthplaces of people joined studies before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2131"}
{"paraphrased": "what employee started on or after alices birthdate", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2132"}
{"paraphrased": "which employee started after alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2133"}
{"paraphrased": "when did alice start her job", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_train_2134"}
{"paraphrased": "which people are friends with employees whose last day was before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2135"}
{"paraphrased": "who is friends with someone whos birthdate is 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2136"}
{"paraphrased": "students finishing with alice", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2137"}
{"paraphrased": "employees starting in or after 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2138"}
{"paraphrased": "find students whose university is either brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2139"}
{"paraphrased": "who is the same gender as the 180 cm person", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2140"}
{"paraphrased": "employees starting on alices birthday", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2141"}
{"paraphrased": "either new york or beijing", "source": "new york or beijing", "target": "(call listValue (call concat en.city.new_york en.city.bejing))", "qid": "socialnetwork_train_2142"}
{"paraphrased": "find employees who have an end date earlier than employee alices start date", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2143"}
{"paraphrased": "name a person who is 180 cm tall the same height as alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_2144"}
{"paraphrased": "who is the employee", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2145"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2146"}
{"paraphrased": "people that started working when alice stopped working or after", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2147"}
{"paraphrased": "cities that alice was not born in", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2148"}
{"paraphrased": "what employees left when alice started", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2149"}
{"paraphrased": "who was born in the same place as the 180 cm tall person", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2150"}
{"paraphrased": "what students have start dates greater than those of the end date of student alice", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2151"}
{"paraphrased": "connections from friends who dont work at mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2152"}
{"paraphrased": "who went to school but did not start in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2153"}
{"paraphrased": "gender of employee who joined before 2005", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2154"}
{"paraphrased": "whose relationship status is not a unique", "source": "relationship status that is relationship status of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2155"}
{"paraphrased": "how many relationship status options are there", "source": "number of relationship status", "target": "(call listValue (call .size (call getProperty (call singleton en.relationship_status) (string !type))))", "qid": "socialnetwork_train_2156"}
{"paraphrased": "180 cm tall people worked at mckinsey", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2157"}
{"paraphrased": "what is the job title of alice who works for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2158"}
{"paraphrased": "find friends of people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2159"}
{"paraphrased": "a student ending before or during 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2160"}
{"paraphrased": "students starting in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2161"}
{"paraphrased": "what is the birthplace of employees who did not start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2162"}
{"paraphrased": "friends of people with 180 cm height", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2163"}
{"paraphrased": "what is birthplace of employees starting in 2004 and after", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2164"}
{"paraphrased": "what employees have the least amount of employers", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2165"}
{"paraphrased": "the birthplace of someone not employed by mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2166"}
{"paraphrased": "people of the most numerous gender", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2167"}
{"paraphrased": "employee who joined before alice quit the job", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2168"}
{"paraphrased": "who has friends whos end date is before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2169"}
{"paraphrased": "which employees started before alices last day", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2170"}
{"paraphrased": "software engineers whose height is 180cm", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2171"}
{"paraphrased": "find the gender of people 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2172"}
{"paraphrased": "persons whose height is 180 cm or more", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2173"}
{"paraphrased": "birthplaces of employees who started working in 2004 or earlier", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2174"}
{"paraphrased": "which of my friends connections are online now", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2175"}
{"paraphrased": "find all people who have alices as a mutual friend", "source": "person that is friends with alice and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2176"}
{"paraphrased": "gender of employees that started before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2177"}
{"paraphrased": "name a person that is friends with an employee who started no later than 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2178"}
{"paraphrased": "employee whose end date is after student alices start date", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2179"}
{"paraphrased": "which relationship status is claimed by at least two people", "source": "relationship status that is relationship status of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2180"}
{"paraphrased": "which employee ended between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2181"}
{"paraphrased": "what employee has no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2182"}
{"paraphrased": "people that started school when alice did", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2183"}
{"paraphrased": "gender of employees not starting in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2184"}
{"paraphrased": "students who began school at the same time as alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2185"}
{"paraphrased": "which students started at the same time the employee alice did", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2186"}
{"paraphrased": "what cities were the males in my social network born in", "source": "city that is birthplace of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2187"}
{"paraphrased": "people who joined their job after alice joined her study", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2188"}
{"paraphrased": "who is friends with a person who graduated before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2189"}
{"paraphrased": "what city was two people born in", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2190"}
{"paraphrased": "who is single from new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2191"}
{"paraphrased": "who is younger than alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2192"}
{"paraphrased": "people who were born on or after alices first day of work", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2193"}
{"paraphrased": "find people who are friends with empoyees whose last day was not in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2194"}
{"paraphrased": "student of only one university", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2195"}
{"paraphrased": "when did alice start the job that she quit in 2004", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2196"}
{"paraphrased": "people that stopped working when alice started school or after", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2197"}
{"paraphrased": "student whose end date is not after start date of employee alice", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2198"}
{"paraphrased": "employees who started after alice graduated", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2199"}
{"paraphrased": "find me the genders of employees who started after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2200"}
{"paraphrased": "people who have single friends", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2201"}
{"paraphrased": "which students field of study is computer science of history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2202"}
{"paraphrased": "what relationship status do two people share", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2203"}
{"paraphrased": "the gender of a worker who didnt start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2204"}
{"paraphrased": "what is gender of students with last day in 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2205"}
{"paraphrased": "find people with a height of 180 cm and micknsey as their employer", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2206"}
{"paraphrased": "birth city of employee whose start date is at most 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2207"}
{"paraphrased": "what is the relationship status of studetns who started after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2208"}
{"paraphrased": "people who were born on or after the day alice quit her job", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_2209"}
{"paraphrased": "one worker who began in 2004 or before", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2210"}
{"paraphrased": "what people have more than two relationship status", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2211"}
{"paraphrased": "people that stopped school after alice stopped working", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2212"}
{"paraphrased": "which university did alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_2213"}
{"paraphrased": "people that finished school at the same time as or before alice did", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2214"}
{"paraphrased": "who is alices friend", "source": "person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2215"}
{"paraphrased": "people that are the same height as or shorter than alice", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2216"}
{"paraphrased": "students who finished by the time alice finished", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2217"}
{"paraphrased": "student whose start date is after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2218"}
{"paraphrased": "what are the birth cities of students with a start date before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2219"}
{"paraphrased": "find me a program manager or a software engineer", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2220"}
{"paraphrased": "find the people with the only one gender", "source": "person that has the least number of gender", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string gender)))", "qid": "socialnetwork_train_2221"}
{"paraphrased": "a friend of a student who started at least 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2222"}
{"paraphrased": "find students with one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2223"}
{"paraphrased": "friends of all the people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2224"}
{"paraphrased": "what person is friends with an employee who does not work for mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2225"}
{"paraphrased": "people born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2226"}
{"paraphrased": "students who finished school by 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2227"}
{"paraphrased": "what employee has less than two previous job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2228"}
{"paraphrased": "people with the same relationship status as alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2229"}
{"paraphrased": "what people are friends with employees who have an end date later than 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2230"}
{"paraphrased": "employees who started on or after alices birthdate", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2231"}
{"paraphrased": "what is the relationship status of a person whose height is 180 cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2232"}
{"paraphrased": "find students who started in 2004 or in 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2233"}
{"paraphrased": "people that were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2234"}
{"paraphrased": "find me employees who were no longer employed after alices start date", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2235"}
{"paraphrased": "show me which cities the people starting before or after 2004 were born in", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2236"}
{"paraphrased": "who is friends with a student who started", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2237"}
{"paraphrased": "birthplace of students not starting in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2238"}
{"paraphrased": "name the students of brown university ", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2239"}
{"paraphrased": "find people who share the same birthday as alice and are 180 cm tall", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_2240"}
{"paraphrased": "what student had an end date that is later than the birthdate of alice", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2241"}
{"paraphrased": "people that started working before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2242"}
{"paraphrased": "people that stopped school after alice started working", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2243"}
{"paraphrased": "find the gender of a student whom has the end date not equal to 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2244"}
{"paraphrased": "what employee has fewer than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2245"}
{"paraphrased": "employee who quit before alice was hired", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2246"}
{"paraphrased": "find employees friends not employed at mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2247"}
{"paraphrased": "what students go to the same university as student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2248"}
{"paraphrased": "what person hast the most number of relationship statuses", "source": "person that has the most number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_2249"}
{"paraphrased": "what city is the students birthplace who ended at least in 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2250"}
{"paraphrased": "find employees who have a start date other than 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2251"}
{"paraphrased": "an employee starting after alice was born", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2252"}
{"paraphrased": "employees who quit their job on the same day alice started her job", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2253"}
{"paraphrased": "which employee is not the software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2254"}
{"paraphrased": "a friend of someone who started before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2255"}
{"paraphrased": "what sex are the students who ended from 2004 on", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2256"}
{"paraphrased": "people that started working when alice stopped school", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2257"}
{"paraphrased": "what employee has a start date that is the same as alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2258"}
{"paraphrased": "relationship status of employees whose start date is before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2259"}
{"paraphrased": "people that have the most friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2260"}
{"paraphrased": "what gender are the people that finished school in or before 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2261"}
{"paraphrased": "when did alice graduate from brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2262"}
{"paraphrased": "what is the birthplace of the student who started in 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2263"}
{"paraphrased": "find employees with an end date that is less than alices birthday", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2264"}
{"paraphrased": "person that has the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2265"}
{"paraphrased": "employee who started before start date of employee alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2266"}
{"paraphrased": "find friends of people who were born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2267"}
{"paraphrased": "find the gender that more than two people share", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2268"}
{"paraphrased": "what students have a start date that is no earlier than the end date of alice", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2269"}
{"paraphrased": "which students started on alices birthdate", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2270"}
{"paraphrased": "which students who strated before alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2271"}
{"paraphrased": "what employee has a start date that is no earlier than the birthdate of alice", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2272"}
{"paraphrased": "relationship status of students finished after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2273"}
{"paraphrased": "what gender is the student whose end date is 2004 or later", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2274"}
{"paraphrased": "who is friends with the person who started working before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2275"}
{"paraphrased": "anyone has similar relationship as of anyone logged in", "source": "relationship status that is relationship status of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2276"}
{"paraphrased": "who is studying less than two things", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2277"}
{"paraphrased": "when did alice start being an employee", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2278"}
{"paraphrased": "which people have more than two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2279"}
{"paraphrased": "name a person who is 180 cm who is friends with alice", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2280"}
{"paraphrased": "which students started no earlier than alices last day of work", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2281"}
{"paraphrased": "student whose field of study is either computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2282"}
{"paraphrased": "what is the relationship status of people that finished school after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2283"}
{"paraphrased": "an employee who left on or before the day student alice started", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2284"}
{"paraphrased": "what relationship statuses are not claimed by alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2285"}
{"paraphrased": "people who were born in 2004 and are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2286"}
{"paraphrased": "employee ending after alice ends", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2287"}
{"paraphrased": "find me one of alices male friends", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2288"}
{"paraphrased": "who is friends with an employee from at least 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2289"}
{"paraphrased": "what is the relationship of the student who did not attend brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2290"}
{"paraphrased": "who are the friends of those not employed by mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2291"}
{"paraphrased": "fine me friends of people who joined their jobs after 2003", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2292"}
{"paraphrased": "birthplace of employees starting in or before 2004", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2293"}
{"paraphrased": "gender of employee whose start date is at least 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2294"}
{"paraphrased": "who did alice quit working for in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2295"}
{"paraphrased": "find students with last days before alices first day", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2296"}
{"paraphrased": "who has same relationship status as that of alice", "source": "person whose relationship status is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call getProperty en.person.alice (string relationship_status))))", "qid": "socialnetwork_train_2297"}
{"paraphrased": "who is 180 cm tall and has an end date of 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2298"}
{"paraphrased": "gender of employee whose job title is not software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2299"}
{"paraphrased": "find me all people who are not in a relationship with alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2300"}
{"paraphrased": "people that have a friend that started school in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2301"}
{"paraphrased": "find everyone born in new york who is 180 cm", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2302"}
{"paraphrased": "find the employee that was hired closest to the date alice was hired", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2303"}
{"paraphrased": "find friends of employees who started in 2004 or after", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2304"}
{"paraphrased": "which students go to the same university as alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2305"}
{"paraphrased": "employees who started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2306"}
{"paraphrased": "who studying computer science is 180 cm tall", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2307"}
{"paraphrased": "who is the birthplace of students not majoring in computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2308"}
{"paraphrased": "people who are software engineers or project managers", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_2309"}
{"paraphrased": "who is friends with the person who stopped working after 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2310"}
{"paraphrased": "people that stopped school after alice was born", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2311"}
{"paraphrased": "which employees quit after 2004 or after 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2312"}
{"paraphrased": "what is the gender of the student who started in 2004 or earlier", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2313"}
{"paraphrased": "find the people who joined their studies before alice was born", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2314"}
{"paraphrased": "which student started school the earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2315"}
{"paraphrased": "name an employee who started before the student named alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2316"}
{"paraphrased": "a student ending before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2317"}
{"paraphrased": "people that are not male", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2318"}
{"paraphrased": "what person is younger than alice", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2319"}
{"paraphrased": "student who was a smaller start date than alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2320"}
{"paraphrased": "student whose start date is the largest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2321"}
{"paraphrased": "student who starts at least before alice finishes", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2322"}
{"paraphrased": "student whose start date is not before start date of employee alice", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2323"}
{"paraphrased": "find the date that alice started studying computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2324"}
{"paraphrased": "friends of people who studied the fields other than computer science", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2325"}
{"paraphrased": "who was born in 2004 and is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2326"}
{"paraphrased": "employee whose start date is same as that of student alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2327"}
{"paraphrased": "what person is 180 cm tall and is alices friend", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2328"}
{"paraphrased": "find friends of employee without title of software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2329"}
{"paraphrased": "what people have a birthdate that is 2004 and whose height is 180 cm", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2330"}
{"paraphrased": "who has a relationship that started after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2331"}
{"paraphrased": "people that stopped working in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2332"}
{"paraphrased": "friends of people who quit their jobs before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2333"}
{"paraphrased": "friends of people who completed their studies before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2334"}
{"paraphrased": "what person has a birthdate between 2004 and 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2335"}
{"paraphrased": "find people with height either 180 or 200 cm", "source": "180 cm or 200 cm", "target": "(call listValue (call concat (number 180 en.cm) (number 200 en.cm)))", "qid": "socialnetwork_train_2336"}
{"paraphrased": "working people that did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2337"}
{"paraphrased": "people that stopped school after 2004 or after 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2338"}
{"paraphrased": "what is the relationship status of the student not in computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2339"}
{"paraphrased": "people shorter than 180 cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2340"}
{"paraphrased": "find me 2 people in a relationship", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_2341"}
{"paraphrased": "person whos birthday is before alice graduates", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2342"}
{"paraphrased": "students who started school when alice quit her job", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2343"}
{"paraphrased": "person who hasnt been in 3 relationships", "source": "person that has less than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_train_2344"}
{"paraphrased": "find people of the same gender as the person logged in", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2345"}
{"paraphrased": "people who are single and friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2346"}
{"paraphrased": "who is the oldest person in my network", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2347"}
{"paraphrased": "what people have a birthplace of new york and a height of 180 cm", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2348"}
{"paraphrased": "students finishing contemporaneous to or after alice", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2349"}
{"paraphrased": "friends of students finishing after 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2350"}
{"paraphrased": "find people 180 cm tall who were born in new york", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2351"}
{"paraphrased": "students with the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2352"}
{"paraphrased": "which friend of alice is online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2353"}
{"paraphrased": "student whose fields of study are smallest", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2354"}
{"paraphrased": "students that ended school on the day alice was born", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2355"}
{"paraphrased": "find friends of alice that are single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2356"}
{"paraphrased": "which employee quit before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2357"}
{"paraphrased": "a student not ending in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2358"}
{"paraphrased": "find me friends of the student that is is leaving before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2359"}
{"paraphrased": "anyone who is alices friend", "source": "person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2360"}
{"paraphrased": "find employees with start dates after 2004", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2361"}
{"paraphrased": "people that started school when alice stopped", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2362"}
{"paraphrased": "people who have friends that were born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2363"}
{"paraphrased": "when did alice quit job at mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2364"}
{"paraphrased": "alices birthplace", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2365"}
{"paraphrased": "find all friends that are not software engineers", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2366"}
{"paraphrased": "what is the job title of alice", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2367"}
{"paraphrased": "what is the gender of employees who did not start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2368"}
{"paraphrased": "find friends of students not attending brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2369"}
{"paraphrased": "people that were born before alice started school", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2370"}
{"paraphrased": "find employees who have a start date earlier than the end date of the employee alice", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2371"}
{"paraphrased": "name a person 180 cm tall who is friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2372"}
{"paraphrased": "what is the gender of an employee whose end date is earlier than 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2373"}
{"paraphrased": "student with most number of field of studies", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2374"}
{"paraphrased": "person with minimum two relationship statuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_2375"}
{"paraphrased": "name a person 180 cm tall who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2376"}
{"paraphrased": "what is the relationship status of employee whose start date is not 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2377"}
{"paraphrased": "people with two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_2378"}
{"paraphrased": "which students end date happends the same time as  alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2379"}
{"paraphrased": "find males that are single", "source": "person whose gender is male and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2380"}
{"paraphrased": "what employee has no more than two job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2381"}
{"paraphrased": "which employees have no more than 2 job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2382"}
{"paraphrased": "people that are friends with someone that is single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2383"}
{"paraphrased": "what is the relationship status of employees who started after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2384"}
{"paraphrased": "single gendered people", "source": "person that has less than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <) (number 2)))", "qid": "socialnetwork_train_2385"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2386"}
{"paraphrased": "find people with the same gender as alice or bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2387"}
{"paraphrased": "find the gender of students whose field of study is not computer science ", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2388"}
{"paraphrased": "find me all of alices friends who are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2389"}
{"paraphrased": "people that have a friend that started school in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2390"}
{"paraphrased": "employees who quit in 2003 or earlier", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2391"}
{"paraphrased": "what person is friends with the online person", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2392"}
{"paraphrased": "students who start on alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2393"}
{"paraphrased": "what is the birthplace of a person whose height is 180 cm", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2394"}
{"paraphrased": "what is the gender of employees who started no later than 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2395"}
{"paraphrased": "find people who are not bigger than alice in height", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2396"}
{"paraphrased": "a friend of alices friend", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2397"}
{"paraphrased": "name a friend of a student who did not study at brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2398"}
{"paraphrased": "who has the least number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_2399"}
{"paraphrased": "employee whose start date is minimum 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2400"}
{"paraphrased": "what is the relationship status for students with a start date not equal to 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2401"}
{"paraphrased": "birthplace of students who finish contemporaneous to or before 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2402"}
{"paraphrased": "what student has an end date that is at least either 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2403"}
{"paraphrased": "what is the relationship status of students who did not graduate in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2404"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_2405"}
{"paraphrased": "people that are friends with someone that stopped school after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2406"}
{"paraphrased": "students who start after alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2407"}
{"paraphrased": "birth city of student whose start date is after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2408"}
{"paraphrased": "which student has attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2409"}
{"paraphrased": "relationship status of 180 cm tall person", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2410"}
{"paraphrased": "find the shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2411"}
{"paraphrased": "find friends of employees with last day in 2004 or before", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2412"}
{"paraphrased": "find people that are friends with employees who have an end date no later than 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2413"}
{"paraphrased": "people who were born in 2004 and born in new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2414"}
{"paraphrased": "find employees who quit theri job before 2004 or 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2415"}
{"paraphrased": "gender of persons who are 180 cm tall", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2416"}
{"paraphrased": "what students have end date names that are either 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2417"}
{"paraphrased": "what employee started the same day as alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2418"}
{"paraphrased": "whats the relationship status of the student starting on or before 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2419"}
{"paraphrased": "what person has a birthdate with at most that of alices", "source": "person whose birthdate is at most end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2420"}
{"paraphrased": "find employees working for the most employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2421"}
{"paraphrased": "employees who quit the same day as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2422"}
{"paraphrased": "who is single and born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2423"}
{"paraphrased": "find students with start dates other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2424"}
{"paraphrased": "people that started school after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2425"}
{"paraphrased": "anyone friend of a male", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2426"}
{"paraphrased": "which students started no earlier than 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2427"}
{"paraphrased": "people who are friends with employees who strated in or after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2428"}
{"paraphrased": "what is the job title of alice whose employer is mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_train_2429"}
{"paraphrased": "find the gender of people born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_2430"}
{"paraphrased": "find me friends of people logged in", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2431"}
{"paraphrased": "friends of people that are currently online", "source": "person that is friends with person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2432"}
{"paraphrased": "what university did alice attend", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_2433"}
{"paraphrased": "which persons are friends with employees that started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2434"}
{"paraphrased": "what person doesnt have the height of 180 cm", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2435"}
{"paraphrased": "who is friends with an employee who started in 2004 or later", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2436"}
{"paraphrased": "find people that have at least two birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_2437"}
{"paraphrased": "employee with largest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2438"}
{"paraphrased": "find someone who is as tall or shorter than alice", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2439"}
{"paraphrased": "people that are the same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_train_2440"}
{"paraphrased": "find me the person with the least friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2441"}
{"paraphrased": "who is born in new york and friends with alice", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2442"}
{"paraphrased": "find employees starting before or on same day as alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2443"}
{"paraphrased": "what person has two genders", "source": "person that has at most two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_train_2444"}
{"paraphrased": "student whose start date is before start date of student alice", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2445"}
{"paraphrased": "what employee had a start date as early as or later than alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2446"}
{"paraphrased": "employees who are starting before alices last day", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2447"}
{"paraphrased": "what is the relationship status of the person who is 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2448"}
{"paraphrased": "people who are friends with the employee that will be leaving by 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2449"}
{"paraphrased": "people that stopped school before alices birthdate", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2450"}
{"paraphrased": "employees who started in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2451"}
{"paraphrased": "find males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2452"}
{"paraphrased": "who is friends with employees whos end date is larger than 2004", "source": "person that employee whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2453"}
{"paraphrased": "student whose start date is not before 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2454"}
{"paraphrased": "employee whose end date is before end date of employee alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2455"}
{"paraphrased": "find students whom have the earliest end date", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2456"}
{"paraphrased": "which employees started no sooner than 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2457"}
{"paraphrased": "which employee started earlier than 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2458"}
{"paraphrased": "find people who are friends with alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2459"}
{"paraphrased": "relationship status of student whose start date is after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2460"}
{"paraphrased": "relationship status of all students who started after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2461"}
{"paraphrased": "alices friends who are 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2462"}
{"paraphrased": "people who were born after alice started working", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2463"}
{"paraphrased": "which employees started employment before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2464"}
{"paraphrased": "what is the relationship status of a student whose start date is not in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2465"}
{"paraphrased": "people who are 180 cm tall before 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2466"}
{"paraphrased": "who was born most recently", "source": "person that has the largest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_2467"}
{"paraphrased": "employees who started before alice started school", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2468"}
{"paraphrased": "people born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_train_2469"}
{"paraphrased": "people that started school before alice was born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2470"}
{"paraphrased": "find employees friend with start date after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2471"}
{"paraphrased": "working people that are not software engineers", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2472"}
{"paraphrased": "which employee finished the same time alice started", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2473"}
{"paraphrased": "find the friends of employees with an end date no later than 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2474"}
{"paraphrased": "find me all the online singles", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2475"}
{"paraphrased": "people that are friends with someone that stopped working in or before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2476"}
{"paraphrased": "find employees whose last day is after student alices first day", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2477"}
{"paraphrased": "the relationship statues of a student ending in 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2478"}
{"paraphrased": "where is the birthplace of the student who left school before 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2479"}
{"paraphrased": "friends of students starting after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2480"}
{"paraphrased": "the gender of a student starting before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2481"}
{"paraphrased": "people born on or before the day alice started school", "source": "person whose birthdate is at most start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2482"}
{"paraphrased": "people who are not studying computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2483"}
{"paraphrased": "what is the gender of a student with an end date later than 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2484"}
{"paraphrased": "people that are friends with the new emplyee starting before2994", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2485"}
{"paraphrased": "which student started after alice stopped going to school", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2486"}
{"paraphrased": "relationship statuses of employees who started working in or before 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2487"}
{"paraphrased": "find students with an end date earlier than that of employee alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2488"}
{"paraphrased": "when did alice leave in 2004", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_2489"}
{"paraphrased": "find the city of birth for all employees that quit in 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2490"}
{"paraphrased": "alice started her job in 2004 when did she leave it", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_2491"}
{"paraphrased": "birthplace cities of students who started before 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2492"}
{"paraphrased": "180 cm tall person with birthdate in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2493"}
{"paraphrased": "students who began school on the same day alice started working", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2494"}
{"paraphrased": "find people with at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2495"}
{"paraphrased": "people that are not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_2496"}
{"paraphrased": "name cities when shared with more than two persons as their birthplace", "source": "city that is birthplace of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2497"}
{"paraphrased": "what employees have jobs whose title is the same as employee alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2498"}
{"paraphrased": "what genders are alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2499"}
{"paraphrased": "people who are friends with people who dont work for mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2500"}
{"paraphrased": "find me everyone born in new york who is single", "source": "person whose birthplace is new york and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2501"}
{"paraphrased": "employee who quit on alices birthdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2502"}
{"paraphrased": "what student has a start date before alices birthday", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2503"}
{"paraphrased": "what persons birthdate is at most the same as alices start date", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2504"}
{"paraphrased": "what are the relationship statuses of employees that do not work at mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2505"}
{"paraphrased": "what city is the birthplace of employees who have an end date no later than 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2506"}
{"paraphrased": "find males who are 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2507"}
{"paraphrased": "which people are friends with employees who did not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2508"}
{"paraphrased": "find students friends who ended in 2004 or before", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2509"}
{"paraphrased": "which employees has the largest amount of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2510"}
{"paraphrased": "people that started school when alice stopped working", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2511"}
{"paraphrased": "which students am i friends with who didnt start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2512"}
{"paraphrased": "any male who has logged in", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2513"}
{"paraphrased": "find employees with job title not software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2514"}
{"paraphrased": "find all the students that started in 2004 and after", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2515"}
{"paraphrased": "student whose start date  is before alices", "source": "student whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2516"}
{"paraphrased": "which students graduate no later than alices first day of work", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2517"}
{"paraphrased": "which university did people who are 180 cm tall attend", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2518"}
{"paraphrased": "a friend of someone 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2519"}
{"paraphrased": "find the date that alice started her software engineer job", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2520"}
{"paraphrased": "employees who quit after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2521"}
{"paraphrased": "students who graduated before alice started work", "source": "student whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2522"}
{"paraphrased": "an employee ending in 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2523"}
{"paraphrased": "who is the friend of the employee who employment end date is at least 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2524"}
{"paraphrased": "find all  friends with student with end date other than 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2525"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_2526"}
{"paraphrased": "employee who has a smaller date than 2004 and 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2527"}
{"paraphrased": "people that started working when alice started school", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2528"}
{"paraphrased": "find the employees that were hired before alice quit her job", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2529"}
{"paraphrased": "a person whose friend started on or before 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2530"}
{"paraphrased": "students who started after alices last day at the job", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2531"}
{"paraphrased": "who is 180 cm tall working at mckinsey", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2532"}
{"paraphrased": "person who is 180 cm tall with computer science as field of study", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2533"}
{"paraphrased": "what is the gender of people that stopped school in or after 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2534"}
{"paraphrased": "which student graduated after alice graduated", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2535"}
{"paraphrased": "find students starting before 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2536"}
{"paraphrased": "find birthplaces of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2537"}
{"paraphrased": "people that started school when alice started work or after", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2538"}
{"paraphrased": "what is the relationship status of people that started working before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2539"}
{"paraphrased": "what employee started after employee alice did", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2540"}
{"paraphrased": "which employee of mckinsey is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2541"}
{"paraphrased": "gender of students finishing on or after 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2542"}
{"paraphrased": "what is alices first day as a software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2543"}
{"paraphrased": "employees who start after alice leaves", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2544"}
{"paraphrased": "find a person who is taller than 180 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2545"}
{"paraphrased": "who has minimum two friends", "source": "person that is friends with at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2546"}
{"paraphrased": "students who are studying the same field as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2547"}
{"paraphrased": "find students who are not part of brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2548"}
{"paraphrased": "find relationship statuses for employees who dont have an end date of 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2549"}
{"paraphrased": "find the gender of employees who have an end date that is not 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2550"}
{"paraphrased": "people that stopped working when alice started working", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2551"}
{"paraphrased": "find students with a start date that is greater than or equal to student alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2552"}
{"paraphrased": "find students with an end date that is equal to or greater than the birthdate of alice", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2553"}
{"paraphrased": "find people who have more than two genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2554"}
{"paraphrased": "which student ending date is earlier than 2004", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2555"}
{"paraphrased": "what is the birth city of a worker who didnt start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2556"}
{"paraphrased": "people that started school when alice was born", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2557"}
{"paraphrased": "people with friends who did not start work in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2558"}
{"paraphrased": "people that stopped working in 2004 or before", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2559"}
{"paraphrased": "which cities were alices friends born in", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2560"}
{"paraphrased": "find all people that are single and currently online", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2561"}
{"paraphrased": "students who finish before alices birthday", "source": "student whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2562"}
{"paraphrased": "what city was alice or bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2563"}
{"paraphrased": "people who are friends with an employee that started later than 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2564"}
{"paraphrased": "where are all employees born who are not employed by mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2565"}
{"paraphrased": "people that stopped school when alice was born or after", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2566"}
{"paraphrased": "what is alices birthdate", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_2567"}
{"paraphrased": "single people born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2568"}
{"paraphrased": "friends of employees who didnt start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2569"}
{"paraphrased": "student whose end date is not after end date of student alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2570"}
{"paraphrased": "find employees starting on or before alices last day", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2571"}
{"paraphrased": "which computer science students are 180 cm tall", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2572"}
{"paraphrased": "who is studying something other than computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2573"}
{"paraphrased": "how many males or females are there", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_2574"}
{"paraphrased": "who is the friend of an employee whose end date is before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2575"}
{"paraphrased": "what person is logged in and was born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2576"}
{"paraphrased": "who is friends with the online person", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2577"}
{"paraphrased": "what job did alice start in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2578"}
{"paraphrased": "find employees starting before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2579"}
{"paraphrased": "who is friends with employees who have an end date that is not 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2580"}
{"paraphrased": "friends of male people", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2581"}
{"paraphrased": "what is the gender of one or two individuals", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2582"}
{"paraphrased": "find the employee that was hired closest to the day alice quit her job", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2583"}
{"paraphrased": "find the genders of students whom have start dates earlier than 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2584"}
{"paraphrased": "find people who are friend with students that have an end date not of 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2585"}
{"paraphrased": "find the relationship status for people with a height of 180 cm", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2586"}
{"paraphrased": "find students with last day after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2587"}
{"paraphrased": "which gender had more employees start after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2588"}
{"paraphrased": "when did student of computer science alice finish", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_train_2589"}
{"paraphrased": "what students have an end date that is the same of later than student alice", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2590"}
{"paraphrased": "who is single male", "source": "person whose relationship status is single and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2591"}
{"paraphrased": "which employees started no later than the day alice started school", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2592"}
{"paraphrased": "find employees starting on or after alices first day", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2593"}
{"paraphrased": "people that stopped school at the same time or before alice did", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2594"}
{"paraphrased": "people shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2595"}
{"paraphrased": "a worker who began on or before the day student alice started", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2596"}
{"paraphrased": "what person has the same gender as alice", "source": "person whose gender is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call getProperty en.person.alice (string gender))))", "qid": "socialnetwork_train_2597"}
{"paraphrased": "what students have an end date that is the start date of employee alice or later", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2598"}
{"paraphrased": "who works at mckinsey and is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2599"}
{"paraphrased": "which student ended no later than alices start date", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2600"}
{"paraphrased": "people who joined their study with or after alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2601"}
{"paraphrased": "student not studying at brown", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2602"}
{"paraphrased": "which students started before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2603"}
{"paraphrased": "alices friends relationship status", "source": "relationship status that is relationship status of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_2604"}
{"paraphrased": "people that started working after alice was born", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2605"}
{"paraphrased": "what are the relationship statuses of employees whose start date is earlier than 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2606"}
{"paraphrased": "a student ending before alice starts", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2607"}
{"paraphrased": "which students last day was the around the same day as alices last day", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2608"}
{"paraphrased": "what employees started on alices birthday", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2609"}
{"paraphrased": "friends of employees starting in or after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2610"}
{"paraphrased": "who are the friends of employees who did not quit in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2611"}
{"paraphrased": "what city is the birthplace of the employee who ended working before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2612"}
{"paraphrased": "who started working on alices birthdate", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2613"}
{"paraphrased": "which employees had an end date before alice started school", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2614"}
{"paraphrased": "people whose gender is same as alice", "source": "person whose gender is gender that is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2615"}
{"paraphrased": "people who were born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_2616"}
{"paraphrased": "relationship status of students whose end date is before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2617"}
{"paraphrased": "what person is logged in and has a birthdate in 2004", "source": "person whose birthdate is 2004 and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string logged_in)))", "qid": "socialnetwork_train_2618"}
{"paraphrased": "find student whose last day is before or the same day as alices first day", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2619"}
{"paraphrased": "employees who start after alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2620"}
{"paraphrased": "which cities were people 180 cm tall born in", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2621"}
{"paraphrased": "find students with last day is on or after alices last day", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2622"}
{"paraphrased": "friends of employees finishing before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2623"}
{"paraphrased": "people that are currently online that are single", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2624"}
{"paraphrased": "find me a person born in 2004 in new york", "source": "person whose birthdate is 2004 and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2625"}
{"paraphrased": "who was born on alices start date", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_train_2626"}
{"paraphrased": "find employees with last day in 2004 or before", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2627"}
{"paraphrased": "employees who started working the same day alice was born", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2628"}
{"paraphrased": "students who started later than 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2629"}
{"paraphrased": "people that started school before 2004 or before 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2630"}
{"paraphrased": "what is the birthdate of the person with a height of 180 cm", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2631"}
{"paraphrased": "employees starting on or after alice finishes", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2632"}
{"paraphrased": "a mutual friend of alice", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2633"}
{"paraphrased": "persons born in or before 2004", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2634"}
{"paraphrased": "who has friends with an end date that is before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2635"}
{"paraphrased": "people with two or less friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2636"}
{"paraphrased": "person who first joined his study", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2637"}
{"paraphrased": "birth  city of student whose end date is not 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2638"}
{"paraphrased": "what are the birth cities of employees who are not employed by mickinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2639"}
{"paraphrased": "what are the relationship statuses of people who quit their job in or after 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2640"}
{"paraphrased": "people who enrolled on or after the date on which alice completed her studies", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2641"}
{"paraphrased": "birth places of employees who quit in 2004 or before", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2642"}
{"paraphrased": "which student ended after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2643"}
{"paraphrased": "history or computer science", "source": "computer science or history", "target": "(call listValue (call concat en.field.computer_science en.field.history))", "qid": "socialnetwork_train_2644"}
{"paraphrased": "employees finishing contemporaneous to or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2645"}
{"paraphrased": "who is alice friends with that is single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2646"}
{"paraphrased": "genders of people that are currently online", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2647"}
{"paraphrased": "relationship status of students not finishing in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2648"}
{"paraphrased": "people who are 180 cm tall and in a relationship with ailce", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2649"}
{"paraphrased": "single people who was born in new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_2650"}
{"paraphrased": "find people who are friends with alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2651"}
{"paraphrased": "people who joined their study before alice completed", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2652"}
{"paraphrased": "which student started on alices birthday", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2653"}
{"paraphrased": "in what cities were students who started before or in 2004 born", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2654"}
{"paraphrased": "people that started work when alice started school  or before", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2655"}
{"paraphrased": "most popular birthplace", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2656"}
{"paraphrased": "find friends of employees with 2004 end dates or later", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2657"}
{"paraphrased": "find all the employees that had no more than two jobs", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2658"}
{"paraphrased": "what employees have been here less time then alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2659"}
{"paraphrased": "which employee has the same boss as alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2660"}
{"paraphrased": "which students have fewer than 2 majors", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2661"}
{"paraphrased": "people that started school on or before the day alice stopped working", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2662"}
{"paraphrased": "birth place of people who completed education after 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2663"}
{"paraphrased": "what person has a friend who is a student at a university other than brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2664"}
{"paraphrased": "which genders are alice and bob", "source": "gender that is gender of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2665"}
{"paraphrased": "find employees who have a start date earlier than 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2666"}
{"paraphrased": "find people with alices birthday who are 180 cm tall", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_train_2667"}
{"paraphrased": "people who are friends with the new employee that will be starting before before or after 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2668"}
{"paraphrased": "what employee is leaving the company on the same date that alice starts her job", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2669"}
{"paraphrased": "student whose start date is end date of student alice", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2670"}
{"paraphrased": "what employees have an end date that is either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2671"}
{"paraphrased": "in what city was the 180cm tall person born", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2672"}
{"paraphrased": "number of jobs held", "source": "number of job title", "target": "(call listValue (call .size (call getProperty (call singleton en.job_title) (string !type))))", "qid": "socialnetwork_train_2673"}
{"paraphrased": "students whose start date is smaller than 2004 and 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2674"}
{"paraphrased": "place where alice was born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_train_2675"}
{"paraphrased": "find me everyone at least as tall as alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_2676"}
{"paraphrased": "what is the end date of employee alice", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2677"}
{"paraphrased": "which students completed school by the time alice began", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2678"}
{"paraphrased": "students who have a start date smaller than that of the end date for employee alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2679"}
{"paraphrased": "is this person male or female", "source": "male or female", "target": "(call listValue (call concat en.gender.male en.gender.female))", "qid": "socialnetwork_train_2680"}
{"paraphrased": "student who started at or before 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2681"}
{"paraphrased": "who studied at the least number of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2682"}
{"paraphrased": "employees who started on alices last day", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2683"}
{"paraphrased": "people born in 2004 and who are 180 cm tall", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2684"}
{"paraphrased": "what employees are either software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2685"}
{"paraphrased": "find relationship statuses for students who have an end date that is not 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2686"}
{"paraphrased": "students who leave after alices birthday", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2687"}
{"paraphrased": "what day did alice start her job in 2004", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_2688"}
{"paraphrased": "which students started school latest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2689"}
{"paraphrased": "find people with a gender of male whom alice is friends with", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2690"}
{"paraphrased": "what is the relationship status of people studying anything but computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2691"}
{"paraphrased": "relationship status of only one person", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2692"}
{"paraphrased": "people who are friends with those who completed studies before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2693"}
{"paraphrased": "either brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_2694"}
{"paraphrased": "find the person that is 180 cm tall and is a software engineer", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2695"}
{"paraphrased": "students who started after alice", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2696"}
{"paraphrased": "people with friends who have jobs but not software engineers", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2697"}
{"paraphrased": "which employees last day was no earlier than alices first day", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2698"}
{"paraphrased": "who is shorter than 181cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2699"}
{"paraphrased": "find the gender of people who are single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2700"}
{"paraphrased": "name a student who will graduate no later than alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2701"}
{"paraphrased": "find students that have the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2702"}
{"paraphrased": "what people have birthdates between 2004 and 2010", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2703"}
{"paraphrased": "name a person born in 2004 who is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2704"}
{"paraphrased": "what employees have a start date no later than that of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2705"}
{"paraphrased": "what is the most common relationship status", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2706"}
{"paraphrased": "gender of employees starting before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2707"}
{"paraphrased": "which of alices friend is single", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2708"}
{"paraphrased": "people that are friends with someone that started working after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2709"}
{"paraphrased": "birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2710"}
{"paraphrased": "an employee starting after alice ends", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2711"}
{"paraphrased": "find people with a height of 180 cm and their friends", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2712"}
{"paraphrased": "find people who are students with a start date later than 2004 and their friends", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2713"}
{"paraphrased": "what students have their field of study in computer science of history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2714"}
{"paraphrased": "students who finish before or contemporaneous to alices start", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2715"}
{"paraphrased": "who is one worker who left on or before the day employee alice left", "source": "employee whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2716"}
{"paraphrased": "find people who have a birthplace the same as those with a height of 180 cm", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2717"}
{"paraphrased": "who is alices single friend", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2718"}
{"paraphrased": "who has two or more relationship status", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_2719"}
{"paraphrased": "whats the gender of the student that befins after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2720"}
{"paraphrased": "an employer with at least two employees", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2721"}
{"paraphrased": "which student began on the same day as student alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2722"}
{"paraphrased": "what was alices field of study", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_2723"}
{"paraphrased": "which student has the earliest start date", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2724"}
{"paraphrased": "find the realtionship status of employees who are not employed by mickinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2725"}
{"paraphrased": "which student quit at the same time the employee alice did", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2726"}
{"paraphrased": "find the friends of people who joined their studies before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2727"}
{"paraphrased": "employees with fewer than two employers", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2728"}
{"paraphrased": "persons born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2729"}
{"paraphrased": "find the birthplace cities of employees whom have a start date not equal to 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2730"}
{"paraphrased": "how many students in this field", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_2731"}
{"paraphrased": "which employee started after alice was hired", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2732"}
{"paraphrased": "friends of people not studying computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2733"}
{"paraphrased": "who has the same job as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2734"}
{"paraphrased": "field of study of alice ended in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_train_2735"}
{"paraphrased": "which date did computer science student alice start", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2736"}
{"paraphrased": "an employee that isnt a software engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2737"}
{"paraphrased": "what gender is claimed by more than two people", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2738"}
{"paraphrased": "which people are friends with students who did not start in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2739"}
{"paraphrased": "who is the friend of alice", "source": "person that is friends with alice and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2740"}
{"paraphrased": "find people who are not male", "source": "person whose gender is not male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string !=) en.gender.male))", "qid": "socialnetwork_train_2741"}
{"paraphrased": "what companies employ people with a height of 180 cm", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2742"}
{"paraphrased": "people who are single and born in 2004", "source": "person whose relationship status is single and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2743"}
{"paraphrased": "who is logged in as well as logged in", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_2744"}
{"paraphrased": "who is friends with the person who didnt start working in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2745"}
{"paraphrased": "students starting on or after 2004", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2746"}
{"paraphrased": "find people with a gender that less than two people have", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2747"}
{"paraphrased": "people that are 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2748"}
{"paraphrased": "person who last joined the study", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2749"}
{"paraphrased": "find people who have a height of 180 cm and a relationship status of single", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2750"}
{"paraphrased": "birthplace of students not at brown", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2751"}
{"paraphrased": "find males who are single", "source": "person whose relationship status is single and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2752"}
{"paraphrased": "student whose end date is not after end date of employee alice", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2753"}
{"paraphrased": "who is a friend exclusively to alice", "source": "person that alice is friends with and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2754"}
{"paraphrased": "people that started school on or after alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2755"}
{"paraphrased": "employees who quit their job in 2005 or later", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2756"}
{"paraphrased": "any male who is born in new york", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2757"}
{"paraphrased": "which employee ended in 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2758"}
{"paraphrased": "find the relationship status of students whose university is not that of brown", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2759"}
{"paraphrased": "relationship status of employees who didnt start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2760"}
{"paraphrased": "people that stopped working before alice started working", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2761"}
{"paraphrased": "find friends of alice that are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2762"}
{"paraphrased": "find me an employee whose end date is later than the end date of student alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2763"}
{"paraphrased": "find alices friends who were born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2764"}
{"paraphrased": "which students started in years other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2765"}
{"paraphrased": "what is the relationship status of people who stopped working in 2004 or later", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2766"}
{"paraphrased": "alices friends who were born in 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2767"}
{"paraphrased": "who is 180cm or higher", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2768"}
{"paraphrased": "what is alices job title", "source": "job title of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))", "qid": "socialnetwork_train_2769"}
{"paraphrased": "find students whose first day is after alices birthday", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2770"}
{"paraphrased": "who are the students starting at the same time or before alice starts", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2771"}
{"paraphrased": "find employees starting in 2010 or earlier", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2772"}
{"paraphrased": "which people have less than two friends", "source": "person that less than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2773"}
{"paraphrased": "find employee with same job title as alices", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2774"}
{"paraphrased": "people born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_train_2775"}
{"paraphrased": "students who ended school in 2003 or earlier", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2776"}
{"paraphrased": "a student with two or less universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2777"}
{"paraphrased": "find students whose end date is either greater than 2004 or 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2778"}
{"paraphrased": "what is the most common gender", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2779"}
{"paraphrased": "whats the relationship status of student who was born in at most 2004 ", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2780"}
{"paraphrased": "which people are alice not friends with", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2781"}
{"paraphrased": "find me all end dates of all employees named alice who studied at brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2782"}
{"paraphrased": "find people whos height is in between 180cm200cm", "source": "person whose height is at most 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_2783"}
{"paraphrased": "find the genders of employees who start date is no later than 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2784"}
{"paraphrased": "what person has a height of at the most 180 cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2785"}
{"paraphrased": "find students starting after alices last day", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2786"}
{"paraphrased": "who has the same relationship status as the 180 cm tall person", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2787"}
{"paraphrased": "what student has only one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2788"}
{"paraphrased": "person born before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_2789"}
{"paraphrased": "who is friend of either alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2790"}
{"paraphrased": "who was born in 2004 or 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2791"}
{"paraphrased": "people those who are friends of friends of alice", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_2792"}
{"paraphrased": "who has the same birthday as the person who is 180 cm tall", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2793"}
{"paraphrased": "people that stopped school when alice started", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2794"}
{"paraphrased": "which employees end date is earlier than alices start date", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2795"}
{"paraphrased": "all 180 cm tall singles", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2796"}
{"paraphrased": "birth city of student whose end date is at least 2004", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2797"}
{"paraphrased": "people who are friends with the employee that does not start in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2798"}
{"paraphrased": "find employees with last day matching alices first day at school", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2799"}
{"paraphrased": "people who are 180 cm or less in height", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_2800"}
{"paraphrased": "gender of employee whose employer is not mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2801"}
{"paraphrased": "who is friends with the employee who started before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2802"}
{"paraphrased": "who is a person whose height is 180 cm and thats friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2803"}
{"paraphrased": "which students graduated in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2804"}
{"paraphrased": "students that graduate on the same day alice starts her new job", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2805"}
{"paraphrased": "students not studying computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2806"}
{"paraphrased": "find students from brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_train_2807"}
{"paraphrased": "students who started school after alice quit her job", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2808"}
{"paraphrased": "gender of employees other than software engineers", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2809"}
{"paraphrased": "student whose start date is after end date of student alice", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2810"}
{"paraphrased": "where were students that did not finish in 2004 born", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2811"}
{"paraphrased": "what is the status of the 180 cm tall persons relationship", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2812"}
{"paraphrased": "what is the relationship status of students who started no earlier than", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2813"}
{"paraphrased": "what employees have a start date that is the same as student alice or greater", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2814"}
{"paraphrased": "who joined on in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2815"}
{"paraphrased": "what employees started at the same time as alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2816"}
{"paraphrased": "who is friends with alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2817"}
{"paraphrased": "find people with three genders", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2818"}
{"paraphrased": "which students started no earlier than the day alice started school", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2819"}
{"paraphrased": "what is the gender of the students that did not start in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2820"}
{"paraphrased": "what student has an end date no later than the end date of alice", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2821"}
{"paraphrased": "student who graduated before alice quit her job", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2822"}
{"paraphrased": "employee whose end date is before start ate of employee alice", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2823"}
{"paraphrased": "when did alice stop attending brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_train_2824"}
{"paraphrased": "people who quit their job after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2825"}
{"paraphrased": "find employee with start date on or before alices", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2826"}
{"paraphrased": "find employees friends with last date of work before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2827"}
{"paraphrased": "which students starte school the same day alice graduated", "source": "student whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2828"}
{"paraphrased": "student whose end date is after start date of student alice", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2829"}
{"paraphrased": "relationship status of employee whose end date is not after 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2830"}
{"paraphrased": "whats the relationship status of employees who are not software engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2831"}
{"paraphrased": "whos got more than 2 genders down", "source": "person that has more than two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >) (number 2)))", "qid": "socialnetwork_train_2832"}
{"paraphrased": "where were people that stopped working in or after 2004 born", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2833"}
{"paraphrased": "students finishing on or after alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2834"}
{"paraphrased": "find me all people that are friends with the employee starting after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2835"}
{"paraphrased": "person whos 6 feet tall and studies computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_2836"}
{"paraphrased": "is the person male or female", "source": "person whose gender is male or female", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call concat en.gender.male en.gender.female)))", "qid": "socialnetwork_train_2837"}
{"paraphrased": "who started working the same day alice left", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2838"}
{"paraphrased": "which city a person is born in whose year of birth is 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2839"}
{"paraphrased": "a student who left on or before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2840"}
{"paraphrased": "what is the relationship status of the person logged in", "source": "relationship status that is relationship status of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_2841"}
{"paraphrased": "people that finished school before 2004 or before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2842"}
{"paraphrased": "a student who left before alice started", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2843"}
{"paraphrased": "find me the employee who has had the most previous jobs", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2844"}
{"paraphrased": "find people with same birth date as alice or later", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2845"}
{"paraphrased": "relationship status of employee whose end date is not before 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2846"}
{"paraphrased": "find all people who born in new york in 2004", "source": "person whose birthplace is new york and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2847"}
{"paraphrased": "birthplace of employees whose end date is before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2848"}
{"paraphrased": "find employees with the same last day as alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2849"}
{"paraphrased": "what employees have mickinsey as their employer", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2850"}
{"paraphrased": "find me the student whose field of study is not computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2851"}
{"paraphrased": "find friends of student who started later than 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2852"}
{"paraphrased": "friends of alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_2853"}
{"paraphrased": "when did alice start her study in the field of computer science", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2854"}
{"paraphrased": "two or more gendered people", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_train_2855"}
{"paraphrased": "who is same gender as of at least two persons", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2856"}
{"paraphrased": "who is male and friends with alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2857"}
{"paraphrased": "what students have a start date that is equal to alices birthday or later", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2858"}
{"paraphrased": "friends of people who joined their jobs after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2859"}
{"paraphrased": "what relationship status is that of two people at the most", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2860"}
{"paraphrased": "name a person who quit no later than 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2861"}
{"paraphrased": "which gender is the employee who ended after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2862"}
{"paraphrased": "employees who finish on or after alice starts", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2863"}
{"paraphrased": "which employee has less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2864"}
{"paraphrased": "what are the current relationship statuses of employees who have a start date that is anything but 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2865"}
{"paraphrased": "a student that attends the same university as alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2866"}
{"paraphrased": "who has a single friend", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_2867"}
{"paraphrased": "people that stopped working when alice started or after", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2868"}
{"paraphrased": "students who started in or before 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2869"}
{"paraphrased": "student who left on or before alices joining", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2870"}
{"paraphrased": "friends of alice that are currently online", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_2871"}
{"paraphrased": "employees whose end date is no earlier than alices end date", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2872"}
{"paraphrased": "what is alices first date of studying computer science in school", "source": "start date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_start_date)))", "qid": "socialnetwork_train_2873"}
{"paraphrased": "gender of student whose start date is before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2874"}
{"paraphrased": "students who didnt graduate in 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2875"}
{"paraphrased": "people that are not 180 cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_train_2876"}
{"paraphrased": "friends with employee who are born atleast before 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2877"}
{"paraphrased": "what is the relationship status of fewer than two people", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2878"}
{"paraphrased": "find me the employees who quit between 2004 and 2010", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2879"}
{"paraphrased": "who is the software engineer who is 180 cm tall", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_2880"}
{"paraphrased": "when did alice stop working as a software engineer", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_2881"}
{"paraphrased": "find all male friends of alice", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2882"}
{"paraphrased": "students who left by the time alice left", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2883"}
{"paraphrased": "which relationship statuses are claimed by the males in my network", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2884"}
{"paraphrased": "which people are friends with students who started no sooner than 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2885"}
{"paraphrased": "which employee started earliest", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2886"}
{"paraphrased": "find all people who are friends with less than two other people", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2887"}
{"paraphrased": "sex of people who began school in 2004 or later", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2888"}
{"paraphrased": "find all alices friends that are male", "source": "person that alice is friends with and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2889"}
{"paraphrased": "alices friends who are currently online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2890"}
{"paraphrased": "find me a person with the same or later birthday as alice", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2891"}
{"paraphrased": "name the friend of alice with a height of 180cm", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2892"}
{"paraphrased": "what gender is the employee who is not employed by mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2893"}
{"paraphrased": "students who began school after alice graduated", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2894"}
{"paraphrased": "relationship status of two persons", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2895"}
{"paraphrased": "what people have two genders", "source": "person that has two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (number 2)))", "qid": "socialnetwork_train_2896"}
{"paraphrased": "find the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_2897"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_2898"}
{"paraphrased": "what is the relationship status of employees who began working by 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2899"}
{"paraphrased": "people who ate 180 cm tall", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2900"}
{"paraphrased": "which employees have fewer than 2 job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2901"}
{"paraphrased": "friends of people who completed their studies in an year other than 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2902"}
{"paraphrased": "people who are friends with a student who did not start in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2903"}
{"paraphrased": "find employees with an end date that is no later than alices birthday", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2904"}
{"paraphrased": "find people born after alices graduation from school", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_2905"}
{"paraphrased": "student who has not more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2906"}
{"paraphrased": "what is the student end date at least 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2907"}
{"paraphrased": "who is 180 cm tall and the same relationship status as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2908"}
{"paraphrased": "who is the 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_2909"}
{"paraphrased": "who does mckinsey employ who is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_2910"}
{"paraphrased": "name a person in more than two relationships", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2911"}
{"paraphrased": "who is online and is friends with", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2912"}
{"paraphrased": "a student with two or fewer majors", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2913"}
{"paraphrased": "who has three or more relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_2914"}
{"paraphrased": "who are people with a birthdate of 2004 friends with", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2915"}
{"paraphrased": "find people born after alice", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_2916"}
{"paraphrased": "people that started working the same time as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2917"}
{"paraphrased": "find student with last day on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2918"}
{"paraphrased": "find the students whose end date is either 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2919"}
{"paraphrased": "people who are friends with employees who started before 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2920"}
{"paraphrased": "student who started after alice left", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2921"}
{"paraphrased": "relationship status of employee whose job title is not software engineer", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2922"}
{"paraphrased": "which students started no earlier than alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2923"}
{"paraphrased": "what students have an end date after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2924"}
{"paraphrased": "birth city of student whose start date is not 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2925"}
{"paraphrased": "which employee started after the student named alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2926"}
{"paraphrased": "which student started on alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2927"}
{"paraphrased": "find friends of people who started school in 2004 at the latest", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2928"}
{"paraphrased": "where wa alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2929"}
{"paraphrased": "a student starting after alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2930"}
{"paraphrased": "which 180 cm tall people started in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2931"}
{"paraphrased": "when did alice start working as a software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_2932"}
{"paraphrased": "someone with two relationship status", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_train_2933"}
{"paraphrased": "gender of student whose end date is after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2934"}
{"paraphrased": "find alices singlestatus friends", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_2935"}
{"paraphrased": "what is the status of alices relationship", "source": "relationship status of alice", "target": "(call listValue (call getProperty en.person.alice (string relationship_status)))", "qid": "socialnetwork_train_2936"}
{"paraphrased": "what students had a start date of 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2937"}
{"paraphrased": "what is the gender of employees sho started before 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2938"}
{"paraphrased": "find students starting 2010 or before", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2939"}
{"paraphrased": "people who were born after 2010", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_2940"}
{"paraphrased": "what city is the birthplace of an employee who has a start date later than 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2941"}
{"paraphrased": "what employee has the greatest number of employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2942"}
{"paraphrased": "students who start before or on 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2943"}
{"paraphrased": "which of alices friends are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2944"}
{"paraphrased": "person who is friends with a student that graduated in 2004 or before", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2945"}
{"paraphrased": "find students with a start date after either 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2946"}
{"paraphrased": "employee who works for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2947"}
{"paraphrased": "find alices friends who are single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_2948"}
{"paraphrased": "what is the relationship status of the two people", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2949"}
{"paraphrased": "what is the birthplace of the person born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_2950"}
{"paraphrased": "friends of people whose job title is not software engineers", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2951"}
{"paraphrased": "relationship status that is not similar to alice", "source": "relationship status that is not relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string !=) en.person.alice))", "qid": "socialnetwork_train_2952"}
{"paraphrased": "whats the gender of students who started school after 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2953"}
{"paraphrased": "which people have a birthdate of 2004 and are friends with alice", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_2954"}
{"paraphrased": "name a friend of a student who did not graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2955"}
{"paraphrased": "find people logged in who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2956"}
{"paraphrased": "what employees have a start date before that of student alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2957"}
{"paraphrased": "what is gender of students starting in years other than 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2958"}
{"paraphrased": "friends of people who quit their jobs in an year other than 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2959"}
{"paraphrased": "people who are friends with an employee that started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2960"}
{"paraphrased": "who is friends with the person who didnt start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2961"}
{"paraphrased": "when did alice stop working for mckinsey", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2962"}
{"paraphrased": "person born in new york and who is 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2963"}
{"paraphrased": "people that have employed friends that did not start working in 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2964"}
{"paraphrased": "what is the relationship status of students who are not majoring in compuer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2965"}
{"paraphrased": "which employer of alices ended in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_train_2966"}
{"paraphrased": "who are men friends with", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_2967"}
{"paraphrased": "what is the birth city of students who have a field of study other than computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2968"}
{"paraphrased": "who was born in 2004 and is 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_2969"}
{"paraphrased": "180 cm tall person with same relationship status as that of alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_2970"}
{"paraphrased": "what is job title of alice who is employed since 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_2971"}
{"paraphrased": "someone 180 cm tall who started in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2972"}
{"paraphrased": "what city is the birthplace of an employee that is not a software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2973"}
{"paraphrased": "what student has a start date the same time as the birthdate of alice", "source": "student whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2974"}
{"paraphrased": "what cities were students born in who started after 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2975"}
{"paraphrased": "what is the end date of alice at mckinseys", "source": "end date of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employment_end_date)))", "qid": "socialnetwork_train_2976"}
{"paraphrased": "find students with fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2977"}
{"paraphrased": "any male born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_2978"}
{"paraphrased": "people with at most two friends", "source": "person that at most two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2979"}
{"paraphrased": "what is the universitys number", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_2980"}
{"paraphrased": "when did alice stop working", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_2981"}
{"paraphrased": "find me an employee whose start date is before or equal to the end date of student alice", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2982"}
{"paraphrased": "find me the birthplace of employees who quit since 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2983"}
{"paraphrased": "which students graduate the day alice starts school", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2984"}
{"paraphrased": "what is the gender of the students who dont graduate in 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2985"}
{"paraphrased": "find the gender of students who have a field of study in something other than computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2986"}
{"paraphrased": "what is the relationship status of students with a start date less than 2004", "source": "relationship status that is relationship status of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_2987"}
{"paraphrased": "which employees last day is no later than alices first day", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2988"}
{"paraphrased": "mention the name of an employee whose end date is either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2989"}
{"paraphrased": "find the city that is the birthplace of only one person", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_2990"}
{"paraphrased": "which students started before alices birthdate", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2991"}
{"paraphrased": "who is alices boss", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2992"}
{"paraphrased": "which employees started no later than alice did", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2993"}
{"paraphrased": "what is the birthplace of employees whose last day was after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_2994"}
{"paraphrased": "what employees have an end date that is smaller than that of employee alice", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2995"}
{"paraphrased": "employee who joined before 2005", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2996"}
{"paraphrased": "which students started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_2997"}
{"paraphrased": "what employer has the least amount of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_2998"}
{"paraphrased": "name a person who is 180 cm tall and who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_2999"}
{"paraphrased": "what genders are people that started school in any year but 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3000"}
{"paraphrased": "find people born in 2004 who are friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3001"}
{"paraphrased": "a student who left at the same time as alice or before", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3002"}
{"paraphrased": "what is the relationship status of employees whose last day was not in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3003"}
{"paraphrased": "gender of a student who was enrolled after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3004"}
{"paraphrased": "gender of students whos end date is 2004 or more", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3005"}
{"paraphrased": "employee who started earliest", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3006"}
{"paraphrased": "who is the same height as alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_train_3007"}
{"paraphrased": "which employee was the first to be hired", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3008"}
{"paraphrased": "name the birthplace city of the employee whose end date is larger than 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3009"}
{"paraphrased": "who is friends with an employee who started in a year other than 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3010"}
{"paraphrased": "find students with a start date that is earlier than that of fellow student alice", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3011"}
{"paraphrased": "people that are friends with someone that started school in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3012"}
{"paraphrased": "find the people who are friends with people who quit their job before 2005", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3013"}
{"paraphrased": "find people with a height of 180 cm that go to brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3014"}
{"paraphrased": "what sex are the students who stated before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3015"}
{"paraphrased": "which city is the birthplace of two or less people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3016"}
{"paraphrased": "a friend of someone born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3017"}
{"paraphrased": "find people 180 cm tall with 2004 end dates", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3018"}
{"paraphrased": "who is friends with alice and has a birthdate on 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3019"}
{"paraphrased": "who are the friends of students with an end date that is not 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3020"}
{"paraphrased": "who is male and 180 cm tall", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3021"}
{"paraphrased": "find me all students who have only one field of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3022"}
{"paraphrased": "employee whose start date is before the start date of employee alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3023"}
{"paraphrased": "what person has two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_3024"}
{"paraphrased": "employees who started after alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3025"}
{"paraphrased": "students whose end date is larger than 2004 and 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3026"}
{"paraphrased": "what worker left before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3027"}
{"paraphrased": "fins birthplaces of employees with last day after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3028"}
{"paraphrased": "find employees who have a start date no later than student alices start date", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3029"}
{"paraphrased": "which employee started earlier than alices end date", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3030"}
{"paraphrased": "relationship status of max two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3031"}
{"paraphrased": "people that started work when alice started school or after", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3032"}
{"paraphrased": "friends of employees who started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3033"}
{"paraphrased": "employees whose end date is after alices end date", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3034"}
{"paraphrased": "people born on or after the day alice quit working", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3035"}
{"paraphrased": "find me all people who are not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3036"}
{"paraphrased": "what was alices last day of work", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3037"}
{"paraphrased": "people that studied at at most two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3038"}
{"paraphrased": "what employee has an end date that is at least the end date for the employee alice", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3039"}
{"paraphrased": "person that started working most recently", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3040"}
{"paraphrased": "students whose end date is 2004 or earlier", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3041"}
{"paraphrased": "people that started school after 2004 or after 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3042"}
{"paraphrased": "find me all students that will be leaving the company by the time alice starts", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3043"}
{"paraphrased": "what person has the least friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3044"}
{"paraphrased": "who is a person whose friends with alice that is single", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3045"}
{"paraphrased": "anyone single who is logged in", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3046"}
{"paraphrased": "student who finishes at most on 2004 or 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3047"}
{"paraphrased": "find a list of cities that students whose end date is at least 2004 were born in", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3048"}
{"paraphrased": "people whose end date is not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3049"}
{"paraphrased": "employees who started working at the same time as or before alice", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3050"}
{"paraphrased": "find the friends of people who quit their job after 2004", "source": "person that is friends with employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3051"}
{"paraphrased": "find the birthplace of people who are 6 feet tall", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3052"}
{"paraphrased": "find me the oldest person", "source": "person that has the smallest birthdate", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string birthdate))))", "qid": "socialnetwork_train_3053"}
{"paraphrased": "what student ended school before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3054"}
{"paraphrased": "which student left most recently", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3055"}
{"paraphrased": "find all people who are mutual friends with alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3056"}
{"paraphrased": "which student started after alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3057"}
{"paraphrased": "employees with the most job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3058"}
{"paraphrased": "find all of alices friends that are currently online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3059"}
{"paraphrased": "people who completed study before alice joined the job", "source": "student whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3060"}
{"paraphrased": "find friends of people who are 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3061"}
{"paraphrased": "what employees have an end date that is employee alices start date or later", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3062"}
{"paraphrased": "find phone number of university", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_3063"}
{"paraphrased": "people who are single that are currently online", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_train_3064"}
{"paraphrased": "what are genders of students not attending brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3065"}
{"paraphrased": "which university does the person who is 180 cm attend", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3066"}
{"paraphrased": "job titles of all people who are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3067"}
{"paraphrased": "find people who are 180 cm tall with 2004 start date", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3068"}
{"paraphrased": "what are the current relationship statuses of students with a start date of 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3069"}
{"paraphrased": "who is friends with the person who started working after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3070"}
{"paraphrased": "people who were born in 2004", "source": "person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3071"}
{"paraphrased": "gender of student who does not finish by 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3072"}
{"paraphrased": "find a person who is a student with a start date that is not 2004 and their friends", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3073"}
{"paraphrased": "what is the relationship status of a worker who left before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3074"}
{"paraphrased": "find student with start date before or on alices start date", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3075"}
{"paraphrased": "students starting before or with alice", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3076"}
{"paraphrased": "what is the gender of students with an end date ealier than 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3077"}
{"paraphrased": "what city is the birthplace of a student who graduated 2004 or after", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3078"}
{"paraphrased": "find students who attended one or two universites", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3079"}
{"paraphrased": "find students who have an end date that is equal or later to that of student alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3080"}
{"paraphrased": "what is the gender of students with last day in 2004 or before", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3081"}
{"paraphrased": "who started first", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3082"}
{"paraphrased": "what people are friends with students whom have an end date that is no greater than 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3083"}
{"paraphrased": "what students have a start date that is anything but 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3084"}
{"paraphrased": "who has minimum number of relationship statuses", "source": "person that has the least number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string relationship_status)))", "qid": "socialnetwork_train_3085"}
{"paraphrased": "what field is alice studying in brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3086"}
{"paraphrased": "male friend of alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3087"}
{"paraphrased": "what student had a start date no earlier than alice", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3088"}
{"paraphrased": "what is the city that is the birthplace of at least two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3089"}
{"paraphrased": "who was the last employee to quit", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3090"}
{"paraphrased": "what is the gender of employees who did not stop working in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3091"}
{"paraphrased": "where were employees at companies other than mckinsey born", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3092"}
{"paraphrased": "who stopped working in 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3093"}
{"paraphrased": "which employees strated before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3094"}
{"paraphrased": "find students starting on or after employee alices first day", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3095"}
{"paraphrased": "find students studying fields other than computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3096"}
{"paraphrased": "find people who are not friends with alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_train_3097"}
{"paraphrased": "a 180 cm tall mckinsey employee", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_train_3098"}
{"paraphrased": "student whose end date is before start date of alice", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3099"}
{"paraphrased": "find me all the people who are friends with people that did not attend brown", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3100"}
{"paraphrased": "select new york or beijing", "source": "new york or beijing", "target": "(call listValue (call concat en.city.new_york en.city.bejing))", "qid": "socialnetwork_train_3101"}
{"paraphrased": "gender of people studied in fields other than computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3102"}
{"paraphrased": "gender employee whose end date is not 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3103"}
{"paraphrased": "people who are the same height as alice or shorter", "source": "person whose height is at most height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_train_3104"}
{"paraphrased": "people born after alice finished school", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_train_3105"}
{"paraphrased": "birthplace of people who completed their study in an year other than 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3106"}
{"paraphrased": "what is the relationship status of people that started work in or before 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3107"}
{"paraphrased": "what are the birth cities of students who have an end date that is not 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3108"}
{"paraphrased": "people that are friends with students hired to start on or before 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3109"}
{"paraphrased": "who is friends of employees who have a job titale other than software engineer", "source": "person that employee whose job title is not software engineer is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3110"}
{"paraphrased": "find students friends who started in a year other than 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3111"}
{"paraphrased": "what city were two or fewer people born in", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3112"}
{"paraphrased": "whos friends with someone who left a company or retired before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3113"}
{"paraphrased": "find employee who starts after alices last day", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3114"}
{"paraphrased": "person born after alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3115"}
{"paraphrased": "birthplace of students who did not join in 2004", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3116"}
{"paraphrased": "what is the relationship status of the majority of people", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3117"}
{"paraphrased": "an employee ending after alice was born", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3118"}
{"paraphrased": "which people are friends with students who didnt graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3119"}
{"paraphrased": "what is the gender of employees whose start date is no later than 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3120"}
{"paraphrased": "which people are single or married", "source": "person whose relationship status is single or married", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call concat en.relationship_status.single en.relationship_status.married)))", "qid": "socialnetwork_train_3121"}
{"paraphrased": "which person born in new york is 180 cm tall", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3122"}
{"paraphrased": "student that has studied at no more than 2 universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3123"}
{"paraphrased": "which men is alice friends with", "source": "person whose gender is male and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3124"}
{"paraphrased": "find employees who started on student alices last day", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3125"}
{"paraphrased": "employees who started before alice quit school", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3126"}
{"paraphrased": "people born in any year except 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3127"}
{"paraphrased": "friends of people who completed their studies after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3128"}
{"paraphrased": "find friends of people who do not work at mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3129"}
{"paraphrased": "find all alices friends that were born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3130"}
{"paraphrased": "where was alice not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3131"}
{"paraphrased": "relationship status of student who does not graduate by 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3132"}
{"paraphrased": "find the people who joined their work before 2005", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3133"}
{"paraphrased": "what is the number of the field", "source": "number of field", "target": "(call listValue (call .size (call getProperty (call singleton en.field) (string !type))))", "qid": "socialnetwork_train_3134"}
{"paraphrased": "students who started in 2004 or later", "source": "student whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3135"}
{"paraphrased": "find the birth city of employees with an end date later than 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3136"}
{"paraphrased": "who has friends who are single", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3137"}
{"paraphrased": "find all people who have more than two friends", "source": "person that more than two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3138"}
{"paraphrased": "birthplace of employees finishing in or after 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3139"}
{"paraphrased": "people who are born in new york and are 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3140"}
{"paraphrased": "which single people are 180 cm tall", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3141"}
{"paraphrased": "which employee started no later than alice", "source": "employee whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3142"}
{"paraphrased": "what university did alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_train_3143"}
{"paraphrased": "student whose end date is after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3144"}
{"paraphrased": "students whose quit date of job is same as employee alices ", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3145"}
{"paraphrased": "who has similar relationship status that of alice", "source": "relationship status that is relationship status of alice and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_train_3146"}
{"paraphrased": "who is the friend of a person whose end date is at least 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3147"}
{"paraphrased": "who was born on a date before alices start date", "source": "person whose birthdate is smaller than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3148"}
{"paraphrased": "relationships statuses of employees who dont work as software engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3149"}
{"paraphrased": "who was born in 2004 who is friends with alice", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3150"}
{"paraphrased": "what person has a birthdate earlier than 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3151"}
{"paraphrased": "people who are friends who employees who didnt quit in 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3152"}
{"paraphrased": "find me the genders of students who attended after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3153"}
{"paraphrased": "what city was the employee that started after 2004 born in", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3154"}
{"paraphrased": "employee whose start date is after the end date of employee alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3155"}
{"paraphrased": "who has a birthdate at the end of alices employment", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3156"}
{"paraphrased": "gender of student whose field of study is not computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3157"}
{"paraphrased": "people born between 2004 and 2010", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3158"}
{"paraphrased": "what people have two birthplaces", "source": "person that has two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (number 2)))", "qid": "socialnetwork_train_3159"}
{"paraphrased": "find employees friends who started in 2004 or before", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3160"}
{"paraphrased": "what is the gender of students not attending brown university", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3161"}
{"paraphrased": "people who are friends with employees who quit their job in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3162"}
{"paraphrased": "job titles of people that are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3163"}
{"paraphrased": "people who are 180 cm tall and are currently online", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3164"}
{"paraphrased": "name an employee who quit after alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3165"}
{"paraphrased": "what is the relationship status of people that stopped school in or before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3166"}
{"paraphrased": "what do people study who are 180 cm", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3167"}
{"paraphrased": "who was born after alice started", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3168"}
{"paraphrased": "what employees have a start date no later than 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3169"}
{"paraphrased": "when did alice leave the job she started in 2004", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3170"}
{"paraphrased": "birthplace of students whose end date is no greater than 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3171"}
{"paraphrased": "what is total number of univeristies", "source": "number of university", "target": "(call listValue (call .size (call getProperty (call singleton en.university) (string !type))))", "qid": "socialnetwork_train_3172"}
{"paraphrased": "which people have at least two birthplaces", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_train_3173"}
{"paraphrased": "which student has a start date earlier than 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3174"}
{"paraphrased": "the gender of a student that starts after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3175"}
{"paraphrased": "which of alices friends are online right now", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3176"}
{"paraphrased": "the gender of an employee that started before 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3177"}
{"paraphrased": "what is the birthplace of an employee who left in 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3178"}
{"paraphrased": "people born on or before the day alice quit her job", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3179"}
{"paraphrased": "which students graduate before 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3180"}
{"paraphrased": "what is the relationship status of people who are 180 cm tall", "source": "relationship status that is relationship status of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3181"}
{"paraphrased": "a student who has studied at the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3182"}
{"paraphrased": "relationship status of employee whose start ate is before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3183"}
{"paraphrased": "student whose end date is not 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3184"}
{"paraphrased": "who is friends with alice and is 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3185"}
{"paraphrased": "does alice work at mckinsey", "source": "employer of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string employer)))", "qid": "socialnetwork_train_3186"}
{"paraphrased": "person with the same birthday as alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_train_3187"}
{"paraphrased": "find employees that have a start date that is the same as student alices", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3188"}
{"paraphrased": "find employees whom have an end date bigger than the start date for employee alice", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3189"}
{"paraphrased": "find students with a start date no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3190"}
{"paraphrased": "who is now friends with the person who was born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3191"}
{"paraphrased": "what student started before alice was born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3192"}
{"paraphrased": "people who have student friends who did not graduate in 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3193"}
{"paraphrased": "student whose university is either brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3194"}
{"paraphrased": "relationship status of student whose end date is after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3195"}
{"paraphrased": "employees who finish after alices birthday", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3196"}
{"paraphrased": "find people who are currently online and born in new york", "source": "person that is logged in and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3197"}
{"paraphrased": "find people of the same gender as alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3198"}
{"paraphrased": "what employees have the earliest end date", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3199"}
{"paraphrased": "all 180 cm tall people born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3200"}
{"paraphrased": "employees who started before alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3201"}
{"paraphrased": "what is job title of employee alice whose end date is 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3202"}
{"paraphrased": "the relationship status of an employee is one with a start date of atleast 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3203"}
{"paraphrased": "what gender represents the least number of people", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3204"}
{"paraphrased": "180 cm tall brown university student", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3205"}
{"paraphrased": "what city is the birthplace of a student that is not studying computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3206"}
{"paraphrased": "who was born on or after alices last day of employment", "source": "person whose birthdate is at least end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3207"}
{"paraphrased": "the gender of a student who started before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3208"}
{"paraphrased": "student whose end date is birth date of alice", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3209"}
{"paraphrased": "student whose start date is not before end date of student alice", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3210"}
{"paraphrased": "which employees have an eend date that is earlier than that of student alice", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3211"}
{"paraphrased": "people that stopped working in or before 2004 or in or before 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3212"}
{"paraphrased": "relationship status of students whose start date is not 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3213"}
{"paraphrased": "what date in 2004 is alices last day of work", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3214"}
{"paraphrased": "who has two or more relationship statuses at once", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_train_3215"}
{"paraphrased": "employee who quit before alice started", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3216"}
{"paraphrased": "a worker who didnt start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3217"}
{"paraphrased": "find the people who joined study before alice", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3218"}
{"paraphrased": "people studying the same thing as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3219"}
{"paraphrased": "which employee started after alice started", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3220"}
{"paraphrased": "what is the birthplace of employees who started before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3221"}
{"paraphrased": "what student has an end date that is no greater than the start date of alice", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3222"}
{"paraphrased": "how many gender options are there", "source": "number of gender", "target": "(call listValue (call .size (call getProperty (call singleton en.gender) (string !type))))", "qid": "socialnetwork_train_3223"}
{"paraphrased": "people with two relationship statuses or less", "source": "person that has at most two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <=) (number 2)))", "qid": "socialnetwork_train_3224"}
{"paraphrased": "who is not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_train_3225"}
{"paraphrased": "find relationship statuses of students with a start date that is 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3226"}
{"paraphrased": "find people who are friends with students who have a start date of 2004 or later", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3227"}
{"paraphrased": "which date alice the software engineer started", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_train_3228"}
{"paraphrased": "birth city of employees whose end date is after 2004", "source": "city that is birthplace of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3229"}
{"paraphrased": "find people who were born in new york who are 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3230"}
{"paraphrased": "find all of alices friends that are currently online", "source": "person that alice is friends with and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_train_3231"}
{"paraphrased": "what employee has an end date that is 2004 or later", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3232"}
{"paraphrased": "who was born on the day alice left", "source": "person whose birthdate is end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))", "qid": "socialnetwork_train_3233"}
{"paraphrased": "which student started before alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3234"}
{"paraphrased": "who is alices single friend", "source": "person that alice is friends with and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3235"}
{"paraphrased": "who works for the same employer as ailce", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3236"}
{"paraphrased": "which students graduate after alice started school", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3237"}
{"paraphrased": "what person has a height of 180 to 200 cm", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3238"}
{"paraphrased": "where were people that started school in any year but 2004 born", "source": "city that is birthplace of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3239"}
{"paraphrased": "find students who joined after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3240"}
{"paraphrased": "who has had the most different relationship statuses", "source": "person that has the most number of relationship status", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string relationship_status)))", "qid": "socialnetwork_train_3241"}
{"paraphrased": "student whose start date is not before birth date of alice", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3242"}
{"paraphrased": "what was alices job when she started in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3243"}
{"paraphrased": "birthplace of employees who didnt start in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3244"}
{"paraphrased": "find me the people born in any year but 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3245"}
{"paraphrased": "find people born between 2004 and 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3246"}
{"paraphrased": "whats the gender of employees who didnt start in 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3247"}
{"paraphrased": "students starting before alice finishes", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3248"}
{"paraphrased": "what is the relationship status of people with the birth place as newyork", "source": "relationship status that is relationship status of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3249"}
{"paraphrased": "find all people born after alice quitted", "source": "person whose birthdate is larger than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_train_3250"}
{"paraphrased": "what employees before working before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3251"}
{"paraphrased": "find people taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3252"}
{"paraphrased": "birthplace of students whose end date is not in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3253"}
{"paraphrased": "which employees last day was no sooner than alices graduation day", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3254"}
{"paraphrased": "people that are shorter than 180 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3255"}
{"paraphrased": "180 cm tall persons who quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3256"}
{"paraphrased": "what is the relationship status of people that stopped working in or before 2004", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3257"}
{"paraphrased": "who is friends with the person who didnt graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3258"}
{"paraphrased": "what person has a birthdate larger than that of alice", "source": "person whose birthdate is larger than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3259"}
{"paraphrased": "employee who quit after student alice quit her job", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3260"}
{"paraphrased": "people who are friends with males", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3261"}
{"paraphrased": "whats the relationship status of employees who quit after 2004", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3262"}
{"paraphrased": "people who are male and currently online", "source": "person that is logged in and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3263"}
{"paraphrased": "employee whose end date not after start date of student alice", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3264"}
{"paraphrased": "employee who joined before 2004 or in 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3265"}
{"paraphrased": "people that are friends with someone in school studying something other than computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3266"}
{"paraphrased": "find me all the people who quit during or after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3267"}
{"paraphrased": "what students have a field of study that is the same as alice", "source": "student whose field of study is field of study of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3268"}
{"paraphrased": "find friends of employees with end date in 2004 or earlier", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3269"}
{"paraphrased": "which student ended earlier than alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3270"}
{"paraphrased": "180 cm tall person with same birth place as that of alice", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_3271"}
{"paraphrased": "employees who started no earlier than alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3272"}
{"paraphrased": "find me the emplotee who started after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3273"}
{"paraphrased": "what is the least common gender", "source": "gender that is gender of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string min) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3274"}
{"paraphrased": "find employees starting after student alices last day", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3275"}
{"paraphrased": "employee whose start date is not before start date of student alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3276"}
{"paraphrased": "what employee has end date equal to employee alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3277"}
{"paraphrased": "find gender of persons born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_train_3278"}
{"paraphrased": "student whose end date is not after 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3279"}
{"paraphrased": "which employee has the largest end date", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3280"}
{"paraphrased": "all 180 cm tall people who joined in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3281"}
{"paraphrased": "find friends of people born is 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3282"}
{"paraphrased": "students who finish in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3283"}
{"paraphrased": "when did alice start attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3284"}
{"paraphrased": "find the gender of everyone currently online", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_3285"}
{"paraphrased": "what student has a start date after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3286"}
{"paraphrased": "relationship status of student who is not student of brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3287"}
{"paraphrased": "who started in 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3288"}
{"paraphrased": "find the birth city of all employees who have a start date that is 2004 or later", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3289"}
{"paraphrased": "relationship statuses of employees who quit their job before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3290"}
{"paraphrased": "what is the birth city of people who are friends with alice", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3291"}
{"paraphrased": "employee who started in alices end date", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3292"}
{"paraphrased": "gender of people who started their study before 2005", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3293"}
{"paraphrased": "whose hight is at least 180cm", "source": "person whose height is at least 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3294"}
{"paraphrased": "who is single and is friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_train_3295"}
{"paraphrased": "what is the gender of an employee who does not have mckinsey as an employer", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3296"}
{"paraphrased": "what is the relationship status of student who ended in 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3297"}
{"paraphrased": "what people have a height of 180 cm and a birth city of new york", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3298"}
{"paraphrased": "people that started work when alice was born or earlier", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3299"}
{"paraphrased": "people that started work after 2004 or after 2010", "source": "employee whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3300"}
{"paraphrased": "employee who shares end date with employee alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3301"}
{"paraphrased": "people who joined the institution after 2004", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3302"}
{"paraphrased": "which people are 180 cm tall and started school in 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3303"}
{"paraphrased": "people who joined study in years other than 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3304"}
{"paraphrased": "a worker who began in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3305"}
{"paraphrased": "a friend of a student ending in 2004 or before", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3306"}
{"paraphrased": "people who are a friend of a friend of alices", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3307"}
{"paraphrased": "what males were born in 2004", "source": "person whose gender is male and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3308"}
{"paraphrased": "find employee whose last day at work is before alices start date", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3309"}
{"paraphrased": "what city were the most people born in", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3310"}
{"paraphrased": "name the student who the quit the job with alice", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3311"}
{"paraphrased": "person who has male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_train_3312"}
{"paraphrased": "students that will begin to work on the same day alices leaves her job", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3313"}
{"paraphrased": "relationship status of students starting after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3314"}
{"paraphrased": "relationship status of students who joined before 2005", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3315"}
{"paraphrased": "which employee has been employed by the most employers", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3316"}
{"paraphrased": "what city is the birthplace of students with an end date no later than 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3317"}
{"paraphrased": "find people who are friends of alices friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_train_3318"}
{"paraphrased": "where were the people that go to a university other than brown born", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3319"}
{"paraphrased": "employees who started after alices birthdate", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3320"}
{"paraphrased": "what date in 2004 did alice stop working", "source": "end date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3321"}
{"paraphrased": "whome is alice friends with who also have a birthdate of 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3322"}
{"paraphrased": "who is friends with the person who started school before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3323"}
{"paraphrased": "what employee has less than two jobs", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3324"}
{"paraphrased": "which is the field of study of alice", "source": "field of study of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string field_of_study)))", "qid": "socialnetwork_train_3325"}
{"paraphrased": "people joined their study before alice born", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3326"}
{"paraphrased": "people that were born after alice started school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3327"}
{"paraphrased": "student whose end date is before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3328"}
{"paraphrased": "people that did not stop working in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3329"}
{"paraphrased": "what city has the least births", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3330"}
{"paraphrased": "people who were born between 2004 and 2010", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_train_3331"}
{"paraphrased": "birthplace of employees who dont study computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3332"}
{"paraphrased": "which person 180 cm tall is a software engineer", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3333"}
{"paraphrased": "find all people who were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_train_3334"}
{"paraphrased": "people that studied at brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_train_3335"}
{"paraphrased": "find students with last day before or same as alices", "source": "student whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3336"}
{"paraphrased": "what genders are the people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3337"}
{"paraphrased": "what is the gender of employee who started in year other than 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3338"}
{"paraphrased": "find relationship status of employee with last day in 2004 or before", "source": "relationship status that is relationship status of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3339"}
{"paraphrased": "who is friends with employees before or on 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3340"}
{"paraphrased": "who is friends with someone born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3341"}
{"paraphrased": "which employees have a start date between 2004 and 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3342"}
{"paraphrased": "birthplace of students who started no earlier than 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3343"}
{"paraphrased": "birthplace of people who did not start their job in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3344"}
{"paraphrased": "students who started no earlier than alices birthdate", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3345"}
{"paraphrased": "student whose start date is before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3346"}
{"paraphrased": "find the people joined work before 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3347"}
{"paraphrased": "who started school the earliest", "source": "student that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3348"}
{"paraphrased": "find me people that are friends with students leaving before and after 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3349"}
{"paraphrased": "what is the gender of the employee who started in 2004 or later", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3350"}
{"paraphrased": "employee who started before end date of student alice", "source": "employee whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3351"}
{"paraphrased": "employee who is not employed by mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3352"}
{"paraphrased": "what is the relationship status of student whose start date is not 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3353"}
{"paraphrased": "what employees had start dates on 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3354"}
{"paraphrased": "people that started working before alices birthdate", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3355"}
{"paraphrased": "what university does alice study at", "source": "university of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))", "qid": "socialnetwork_train_3356"}
{"paraphrased": "find employees with last day not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3357"}
{"paraphrased": "students whose end date is later than the end date of alice", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3358"}
{"paraphrased": "name a male who is 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3359"}
{"paraphrased": "students who began school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3360"}
{"paraphrased": "what is alices date of birth", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_train_3361"}
{"paraphrased": "people that started work when alice did or before", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3362"}
{"paraphrased": "what is height of alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_train_3363"}
{"paraphrased": "what is the birthplace of employees whose last day was no later than 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3364"}
{"paraphrased": "which employees quit after 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3365"}
{"paraphrased": "current users who are 180 cm tall", "source": "person that is logged in and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3366"}
{"paraphrased": "person that is studying the most things at school", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3367"}
{"paraphrased": "who was born in over two places", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_train_3368"}
{"paraphrased": "people that started school on or after the day alice stopped school", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3369"}
{"paraphrased": "in which cities were employees who started working after 2004 born", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3370"}
{"paraphrased": "a student ending at the same time as alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3371"}
{"paraphrased": "give me the genders of the students who graduate in 2004 or sooner", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3372"}
{"paraphrased": "universities where all 180 cm tall people studied", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3373"}
{"paraphrased": "find me students whose end dates are the same as the start date of alice", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3374"}
{"paraphrased": "who has friends with students that have a start date of 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3375"}
{"paraphrased": "find all of alices single friends", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3376"}
{"paraphrased": "find employees with last day on or after alices first day", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3377"}
{"paraphrased": "people who are friends with students who started after 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3378"}
{"paraphrased": "employees whose last day is the same as alices first day at the job", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3379"}
{"paraphrased": "find birthplaces of employees who started after 2004", "source": "city that is birthplace of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3380"}
{"paraphrased": "what is the gender of the person whose birthdate is in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_train_3381"}
{"paraphrased": "which of alices friends is 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3382"}
{"paraphrased": "when did alice quit her software engineer job", "source": "end date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_end_date)))", "qid": "socialnetwork_train_3383"}
{"paraphrased": "a friend of a student not starting in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3384"}
{"paraphrased": "is alices field of study computer science", "source": "field of study of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string field_of_study)))", "qid": "socialnetwork_train_3385"}
{"paraphrased": "what is the gender of people that started working in or before 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3386"}
{"paraphrased": "which student started in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3387"}
{"paraphrased": "which students left after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3388"}
{"paraphrased": "friend of employee whose start date is smaller than 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3389"}
{"paraphrased": "alices quit date", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_train_3390"}
{"paraphrased": "what employee has an end date that is the same as that of alice", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3391"}
{"paraphrased": "where were employees who finish on or before 2004 born", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3392"}
{"paraphrased": "the relationship status of a worker who didnt leave in 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3393"}
{"paraphrased": "who was born after 2004 that is friends with alice", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3394"}
{"paraphrased": "what students have been at college for the least amount of time", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3395"}
{"paraphrased": "people that are 180 cm or 200 cm tall", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_train_3396"}
{"paraphrased": "people who were born in new york", "source": "person whose birthplace is new york and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3397"}
{"paraphrased": "people who are friends with employees who started working before or after 2004", "source": "person that is friends with employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3398"}
{"paraphrased": "which student started school after alice was born", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3399"}
{"paraphrased": "what students have an end date that is either 2004 or 2010 and no greater", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3400"}
{"paraphrased": "what is the birthplace of employees who started in 2004 or later", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3401"}
{"paraphrased": "what is the relationship status of a student studying something other than computer science", "source": "relationship status that is relationship status of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3402"}
{"paraphrased": "birthplace of employees who didnt start working in 2004", "source": "city that is birthplace of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3403"}
{"paraphrased": "find employees friend with title other than software engineer", "source": "person that is friends with employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3404"}
{"paraphrased": "employee whose start date is not after the end date of employee alice", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3405"}
{"paraphrased": "find employees who have a start date later than that of the end date of employee alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3406"}
{"paraphrased": "people that stopped working when alice was born  or before", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3407"}
{"paraphrased": "who is a software engineer or program manager", "source": "software engineer or program manager", "target": "(call listValue (call concat en.job_title.software_engineer en.job_title.program_manager))", "qid": "socialnetwork_train_3408"}
{"paraphrased": "what students have a start date earlier than that of employee alice", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3409"}
{"paraphrased": "which relationship status represents no more than two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3410"}
{"paraphrased": "people that stopped working after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3411"}
{"paraphrased": "what is the relationship status of students that did not finish school in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3412"}
{"paraphrased": "find the least common relationship status", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3413"}
{"paraphrased": "what is the gender of the person alice is friends with", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3414"}
{"paraphrased": "who is studying two things or less", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3415"}
{"paraphrased": "what is the gender of employees whose end date is less than 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3416"}
{"paraphrased": "who is shorter than 180cm", "source": "person whose height is smaller than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3417"}
{"paraphrased": "an employee with the longest start date", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3418"}
{"paraphrased": "what is the last date of employee alice who started in 2004", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_train_3419"}
{"paraphrased": "what is relationship status of employee whose last day was after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3420"}
{"paraphrased": "which employees started no later than 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3421"}
{"paraphrased": "people who were born in 2004 and are single", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_train_3422"}
{"paraphrased": "what does alice study at brown university", "source": "field of study of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string field_of_study)))", "qid": "socialnetwork_train_3423"}
{"paraphrased": "find people that are friends with students who have quit after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3424"}
{"paraphrased": "which students have the most majors", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3425"}
{"paraphrased": "employee whose end date is not after birth date of alice", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3426"}
{"paraphrased": "name a person with whom alice is not friends", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_train_3427"}
{"paraphrased": "find the gender of people with a height of 180 cm", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3428"}
{"paraphrased": "what person is friends with people that do not work for mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3429"}
{"paraphrased": "people who are shorter than 181 cm", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_train_3430"}
{"paraphrased": "what is alices exact start date in 2004", "source": "start date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_train_3431"}
{"paraphrased": "find me employees that have worked for no more than two employers", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3432"}
{"paraphrased": "what is the birthplace of students who graduated before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3433"}
{"paraphrased": "what person has a height of 180 cm and a job title of software engineer", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3434"}
{"paraphrased": "what people are logged in who are also friends with alice", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_train_3435"}
{"paraphrased": "relationship status of employee whose employer is not mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3436"}
{"paraphrased": "male 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3437"}
{"paraphrased": "who stopped going to school after 2004", "source": "student whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3438"}
{"paraphrased": "which employee quit the day alice started", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3439"}
{"paraphrased": "people born the same day as or after alice started school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3440"}
{"paraphrased": "relationship status of student that left school before or on 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3441"}
{"paraphrased": "males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3442"}
{"paraphrased": "who is 180 cm tall and is female", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3443"}
{"paraphrased": "what is the students gender who ended at least in 2004", "source": "gender that is gender of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3444"}
{"paraphrased": "who works for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3445"}
{"paraphrased": "find all single people", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3446"}
{"paraphrased": "who started school most recently", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3447"}
{"paraphrased": "what is the gender of students with a start date 2004 or later", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3448"}
{"paraphrased": "what employees have an end date no later than 2004 or 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3449"}
{"paraphrased": "who is friends with alice and was born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3450"}
{"paraphrased": "student whose end date is not before start date of student alice", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3451"}
{"paraphrased": "people born in new york that are 180 cm tall", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_train_3452"}
{"paraphrased": "people born before 2004", "source": "person whose birthdate is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3453"}
{"paraphrased": "who has less than two friends", "source": "person that is friends with less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3454"}
{"paraphrased": "all 180 cm tall software engineers", "source": "person whose height is 180 cm and whose job title is software engineer", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string job_title) (string =) en.job_title.software_engineer))", "qid": "socialnetwork_train_3455"}
{"paraphrased": "what is the relationship status of a student whose end date is earlier than 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3456"}
{"paraphrased": "what are the students birthplaces who started before 2004", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3457"}
{"paraphrased": "which peolpe are exactly 180 cm tall", "source": "person whose height is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3458"}
{"paraphrased": "who graduated after alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3459"}
{"paraphrased": "what is the birthdate of the person who is 180 cm", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3460"}
{"paraphrased": "employee whose last date was before the day alice started", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3461"}
{"paraphrased": "who is the employee leaving the company after alice leaves", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3462"}
{"paraphrased": "who was born after 2003", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_train_3463"}
{"paraphrased": "which of my friends is at some school other than brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3464"}
{"paraphrased": "find me males born in 2004", "source": "person whose birthdate is 2004 and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3465"}
{"paraphrased": "people 180 cm tall who are single", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3466"}
{"paraphrased": "find me all people who are older than alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3467"}
{"paraphrased": "which employee has an end date of at least 2004", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3468"}
{"paraphrased": "who is friends with a student who graduated in 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3469"}
{"paraphrased": "student whose end date is not after atart date of student alice", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3470"}
{"paraphrased": "which people are friends of alices friends", "source": "person that person that alice is friends with is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3471"}
{"paraphrased": "student whose start date is not after end date of employee alice", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3472"}
{"paraphrased": "what is alices end date", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3473"}
{"paraphrased": "students finishing on or before alices birthday", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3474"}
{"paraphrased": "find someone born on or after alices first day of employment", "source": "person whose birthdate is at least start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_train_3475"}
{"paraphrased": "what employee has an end date that is not in 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3476"}
{"paraphrased": "find employees who have a start date earlier than that of employee alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3477"}
{"paraphrased": "find the birth city of employees who have an end date of 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3478"}
{"paraphrased": "find people having a relationship with people who are 180 cm tall", "source": "person whose relationship status is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3479"}
{"paraphrased": "what is alices start date at brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_train_3480"}
{"paraphrased": "what employees have an end date before 2004", "source": "employee whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3481"}
{"paraphrased": "180 cm tall persons studied in brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3482"}
{"paraphrased": "students finishing contemporaneous to or before alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3483"}
{"paraphrased": "find the friends of students whose end date is later than 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3484"}
{"paraphrased": "ppeople who joined studies after alice joined the job", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3485"}
{"paraphrased": "people born on or before alices birthday", "source": "person whose birthdate is at most birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_train_3486"}
{"paraphrased": "what is the job title of alice who started in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3487"}
{"paraphrased": "find the relationship statuses of people whom alice is friends with", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3488"}
{"paraphrased": "which employee ended no greater than alices birthdate", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3489"}
{"paraphrased": "what is the gender of no more than two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3490"}
{"paraphrased": "employees finishing before alice", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3491"}
{"paraphrased": "what is the relationship status of students who stated before 2004", "source": "relationship status that is relationship status of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3492"}
{"paraphrased": "student whose start date is start date of employee alice", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3493"}
{"paraphrased": "who is the tallest person", "source": "person that has the largest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string max) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_train_3494"}
{"paraphrased": "all 180 cm tall females", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3495"}
{"paraphrased": "what employees have an end date that is before student alices start date", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3496"}
{"paraphrased": "what cities are the birthplaces of people who have a height of 180 cm", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_train_3497"}
{"paraphrased": "who has over two relationship status", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_train_3498"}
{"paraphrased": "who is 180 cm and is in the field of computer science", "source": "person whose height is 180 cm and whose field of study is computer science", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string field_of_study) (string =) en.field.computer_science))", "qid": "socialnetwork_train_3499"}
{"paraphrased": "person who is shorter than 180 cm or 200 cm", "source": "person whose height is smaller than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_train_3500"}
{"paraphrased": "birthplaces of employees starting before 2004", "source": "city that is birthplace of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3501"}
{"paraphrased": "what is the birthplace of an employee who does not work for mckinsey", "source": "city that is birthplace of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3502"}
{"paraphrased": "which employee ended earlier than alices start date", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3503"}
{"paraphrased": "what is job title of alice whose employment end date is in 2004", "source": "job title of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_train_3504"}
{"paraphrased": "what city was alice and bob born in", "source": "city that is birthplace of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_train_3505"}
{"paraphrased": "the gender of an employee whos not a software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3506"}
{"paraphrased": "whose birthdate is on or after alices start date", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_train_3507"}
{"paraphrased": "people that started working when alice stopped school or after", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3508"}
{"paraphrased": "a student starting after alice ends", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3509"}
{"paraphrased": "when did alice finish school", "source": "end date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))", "qid": "socialnetwork_train_3510"}
{"paraphrased": "name a city that fewer than two of the people were born in", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3511"}
{"paraphrased": "180 cm tall persons who were born in the same place where alice was born", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_train_3512"}
{"paraphrased": "who has friends that are students who have a start date before 2004", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3513"}
{"paraphrased": "find students with last days on or before alices first day", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_train_3514"}
{"paraphrased": "what is the average height of a person", "source": "average height of person", "target": "(call listValue (call aggregate (string avg) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_train_3515"}
{"paraphrased": "find me a male born in new york", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3516"}
{"paraphrased": "what people are friends of students who have a start date no earlier than 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3517"}
{"paraphrased": "employees finishing after 2004", "source": "employee whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3518"}
{"paraphrased": "what cities were people that are currently online born in", "source": "city that is birthplace of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_train_3519"}
{"paraphrased": "what is the gender of employees who dont work for mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3520"}
{"paraphrased": "name a person of the same gender as alice who is 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_train_3521"}
{"paraphrased": "people who were not friends before 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_train_3522"}
{"paraphrased": "employees who started working on or after the day alice ended school", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3523"}
{"paraphrased": "connection to someone who will have graduated before 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3524"}
{"paraphrased": "who is 180 cm tall and goes to brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_train_3525"}
{"paraphrased": "find employees starting after alices birthday", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_train_3526"}
{"paraphrased": "which person has a relationship status the same as alice", "source": "person whose relationship status is relationship status that is relationship status of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) en.person.alice)))", "qid": "socialnetwork_train_3527"}
{"paraphrased": "what is the relationship status of students who are not at brown", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3528"}
{"paraphrased": "people whose height is 180 cm", "source": "person whose height is 180 cm and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_train_3529"}
{"paraphrased": "who are all of alices guy friends", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_train_3530"}
{"paraphrased": "find the friends of all people who list their relationship status as single", "source": "person that is friends with person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_train_3531"}
{"paraphrased": "who is friends with the student who did not start in 2004", "source": "person that student whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3532"}
{"paraphrased": "who has at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_train_3533"}
{"paraphrased": "people that are friends with someone that finished school before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_train_3534"}
{"paraphrased": "find the gender of employees who have a start date greater than 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_0"}
{"paraphrased": "gender of employees who began working by 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_1"}
{"paraphrased": "find persons who are friends with students who started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_2"}
{"paraphrased": "who has been a student longer than alice has been employed", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_3"}
{"paraphrased": "what student has the latest start date", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_4"}
{"paraphrased": "student whose end date is not before 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_5"}
{"paraphrased": "gender of employee whose end date is after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_6"}
{"paraphrased": "employees who have the same start date as alice", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_7"}
{"paraphrased": "find people with at least two relationship statuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_8"}
{"paraphrased": "relationship status of employees who finish after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_9"}
{"paraphrased": "friends with employee who quit their job till 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_10"}
{"paraphrased": "people who are 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_11"}
{"paraphrased": "who are the friends of employees with a start date before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_12"}
{"paraphrased": "who is 180 cm tall and single", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_13"}
{"paraphrased": "find students friends who started in 2004 or later", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_14"}
{"paraphrased": "students whose end date is smaller than 2004 and 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_15"}
{"paraphrased": "which student left after student alice started", "source": "student whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_16"}
{"paraphrased": "people who are friends with alice and currently online", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_17"}
{"paraphrased": "what employee has the greatest number of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_18"}
{"paraphrased": "which city are most people born in", "source": "city that is birthplace of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string max) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_19"}
{"paraphrased": "people that started school when alice did or after", "source": "student whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_20"}
{"paraphrased": "find someone born after alices graduation date", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_21"}
{"paraphrased": "what is the relationship status of did not attend brown university", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_22"}
{"paraphrased": "who are alices single friends", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_23"}
{"paraphrased": "an employee who left the company before alice began with it", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_24"}
{"paraphrased": "who started school when alice started working", "source": "student whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_25"}
{"paraphrased": "find people who are friends with students whom are not part of brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_26"}
{"paraphrased": "what was alices last day of going to brown university", "source": "end date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_end_date)))", "qid": "socialnetwork_test_27"}
{"paraphrased": "people who are friends with employees that are not named mickinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_28"}
{"paraphrased": "who has at least two relationship status", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_29"}
{"paraphrased": "find the city of birth for the employee who quit before 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_30"}
{"paraphrased": "students who started school before alice started her job", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_31"}
{"paraphrased": "what employees started the same day as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_32"}
{"paraphrased": "students who began school before alice graduated", "source": "student whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_33"}
{"paraphrased": "what is the relationship status of employees who have a start date that is 2004 or later", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_34"}
{"paraphrased": "student that graduates at least before alice starts school", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_35"}
{"paraphrased": "find the friends of the people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_36"}
{"paraphrased": "what is the birthplace of students who started no earlier than 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_37"}
{"paraphrased": "friends of alice who are 180 cm tall", "source": "person that alice is friends with and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_38"}
{"paraphrased": "people that stopped working when alice started school or before", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_39"}
{"paraphrased": "who has a height of 180 and is logged in", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_40"}
{"paraphrased": "find students friend with last day in 2004 or later", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_41"}
{"paraphrased": "find friends of people who did not study computer science in school", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_42"}
{"paraphrased": "what city was the single person born in", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_43"}
{"paraphrased": "find all people with friends who finished school before 2004", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_44"}
{"paraphrased": "find people who are the same gender as alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_45"}
{"paraphrased": "people who are friends with students who ended school after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_46"}
{"paraphrased": "the relationship status of people born in 2004", "source": "relationship status that is relationship status of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_47"}
{"paraphrased": "who has less than two relationship status", "source": "person that has less than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string <) (number 2)))", "qid": "socialnetwork_test_48"}
{"paraphrased": "what is birthplace of employee with last day in 2004 or later", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_49"}
{"paraphrased": "what is the birth date of alice", "source": "birthdate of alice", "target": "(call listValue (call getProperty en.person.alice (string birthdate)))", "qid": "socialnetwork_test_50"}
{"paraphrased": "people who were not born in 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_51"}
{"paraphrased": "what student has a start date that is no less than alice", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_52"}
{"paraphrased": "what day does alice start", "source": "start date of student alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))", "qid": "socialnetwork_test_53"}
{"paraphrased": "find employees with fewest job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_54"}
{"paraphrased": "relationship statuses of students who began school after 2004", "source": "relationship status that is relationship status of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_55"}
{"paraphrased": "find me all students who attended either brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_56"}
{"paraphrased": "where is alice born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_57"}
{"paraphrased": "person who has the least friends", "source": "person that the least number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_58"}
{"paraphrased": "find all males who are 180 cm tall", "source": "person whose height is 180 cm and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_59"}
{"paraphrased": "what is the birthplace of students who graduated before 2002", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_60"}
{"paraphrased": "what gender has two or fewer people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_61"}
{"paraphrased": "who is a student whose end date is at least alices birthday", "source": "student whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_62"}
{"paraphrased": "employee who started working on 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_63"}
{"paraphrased": "who is friends with either alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_64"}
{"paraphrased": "what person was born in 2004 and is logged in", "source": "person that is logged in and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_65"}
{"paraphrased": "what students have an end date that is later than that of employee alice", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_66"}
{"paraphrased": "what city were more than two people born in", "source": "city that is birthplace of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_67"}
{"paraphrased": "find students with an end date not of 2004", "source": "student whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_68"}
{"paraphrased": "relationship status of employee whose end date is not 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_69"}
{"paraphrased": "find cities where at least two people were born", "source": "city that is birthplace of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_70"}
{"paraphrased": "students who are not studying computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_71"}
{"paraphrased": "what employee has an end date that is the same as the start date of alice", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_72"}
{"paraphrased": "find me at least two person with the same relationship status", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_73"}
{"paraphrased": "name all students with two or fewer fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_74"}
{"paraphrased": "find students friend who started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_75"}
{"paraphrased": "which gender is present in most number", "source": "gender that is gender of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.gender) (string !type)) (string max) (call reverse (string gender)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_76"}
{"paraphrased": "people born in 2004 that are single", "source": "person whose birthdate is 2004 and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_77"}
{"paraphrased": "what is the gender of the employee who did not end in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_78"}
{"paraphrased": "which students left by the end of 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_79"}
{"paraphrased": "students whose start date is no earlier than alices", "source": "student whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_80"}
{"paraphrased": "friends of employees who started after 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_81"}
{"paraphrased": "find me the employee who quit before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_82"}
{"paraphrased": "what is the most common relationship status", "source": "relationship status that is relationship status of the most number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string max) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_83"}
{"paraphrased": "find the birth city of fewer than two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_84"}
{"paraphrased": "find people who are friends with employees who have a start date of 2004 or later", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_85"}
{"paraphrased": "who is friends with the person who started school during or after 2004", "source": "person that student whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_86"}
{"paraphrased": "employees with less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_87"}
{"paraphrased": "which students went to fewer than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_88"}
{"paraphrased": "student that is enrolled in the most universities", "source": "student that has the most number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_89"}
{"paraphrased": "what are the birthplaces of two persons or less", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_90"}
{"paraphrased": "who was employer of alice who finished in 2004", "source": "employer of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_91"}
{"paraphrased": "what is the gender of people that stopped working before 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_92"}
{"paraphrased": "employee whose start date is after start date of employee alice", "source": "employee whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_93"}
{"paraphrased": "who has most number of friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_94"}
{"paraphrased": "employee who is same sex who left more other employee started in 2004", "source": "gender that is gender of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_95"}
{"paraphrased": "which of my friends have a single status", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_96"}
{"paraphrased": "where were people that started school before 2004 born", "source": "city that is birthplace of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_97"}
{"paraphrased": "find alices friends born in new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_98"}
{"paraphrased": "what are students genders with last days after 2004", "source": "gender that is gender of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_99"}
{"paraphrased": "what is the gender of employees who quit on or after 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_100"}
{"paraphrased": "all 180 cm tall people who were born in new york", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_101"}
{"paraphrased": "find employes whom have a start day that is later than the start date of student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_102"}
{"paraphrased": "employee whose start date is not after 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_103"}
{"paraphrased": "who is the the student whose end date was 2004 friends with", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_104"}
{"paraphrased": "which employees have start dates the same as alices last day", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_105"}
{"paraphrased": "name of employees friends who started before 2004", "source": "person that is friends with employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_106"}
{"paraphrased": "which students graduate the day of alices last day at work", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_107"}
{"paraphrased": "students starting at the same time as alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_108"}
{"paraphrased": "working people with two or less job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_109"}
{"paraphrased": "student whose start date is not after start date of student alice", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_110"}
{"paraphrased": "friend of employee whose end date is at most 2004", "source": "person that employee whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_111"}
{"paraphrased": "a student with the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_112"}
{"paraphrased": "find the gender of employees with the job title that is not software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_113"}
{"paraphrased": "who is the shortest person in my network", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_test_114"}
{"paraphrased": "find employees whose last day is the same or later than alices", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_115"}
{"paraphrased": "employees with the soonest finish date", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_116"}
{"paraphrased": "what is the field of study of the 180 cm tall person", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_117"}
{"paraphrased": "find relationship statuses for students with an end date that is no later than 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_118"}
{"paraphrased": "find me the employee who quit between 2004 and 2010", "source": "employee whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_119"}
{"paraphrased": "find all the people with at least two birthdays", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_test_120"}
{"paraphrased": "find me a person born after alices first day of school", "source": "person whose birthdate is larger than start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_121"}
{"paraphrased": "what is the gender of people that finished school before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_122"}
{"paraphrased": "friend of student whose end date is not less than 2004", "source": "person that is friends with student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_123"}
{"paraphrased": "which employee started after 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_124"}
{"paraphrased": "how tall is alice", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_125"}
{"paraphrased": "which of alices friends are currently online", "source": "person that is logged in and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_126"}
{"paraphrased": "find me employees with less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_127"}
{"paraphrased": "relationship statuses of students who ended school in or before 2004", "source": "relationship status that is relationship status of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_128"}
{"paraphrased": "what students have a start date later than the birthdate of alice", "source": "student whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_129"}
{"paraphrased": "student whose end date is before end date of employee alice", "source": "student whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_130"}
{"paraphrased": "people who are friends with an employee that started no later than 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_131"}
{"paraphrased": "student whose start date is largest", "source": "student that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_132"}
{"paraphrased": "find employee with the earliest start date", "source": "employee that has the smallest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_133"}
{"paraphrased": "which students graduate after alices birthdate", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_134"}
{"paraphrased": "a student ending after alice", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_135"}
{"paraphrased": "employees who quit before alice joined", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_136"}
{"paraphrased": "single person 180 cm tall", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_137"}
{"paraphrased": "find employees starting before alice", "source": "employee whose start date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_138"}
{"paraphrased": "what was alices job title in 2004", "source": "job title of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string job_title)))", "qid": "socialnetwork_test_139"}
{"paraphrased": "student whose start date is before end date of student alice", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_140"}
{"paraphrased": "find employees with a start date that is equal to the end date of employee alice", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_141"}
{"paraphrased": "find someone shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_142"}
{"paraphrased": "what is the gender of employees who left their jobs before 2004", "source": "gender that is gender of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_143"}
{"paraphrased": "gender of students starting before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_144"}
{"paraphrased": "persons born in 2004 or 2010", "source": "person whose birthdate is 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1))))", "qid": "socialnetwork_test_145"}
{"paraphrased": "find all the people with two relationship statuses", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_test_146"}
{"paraphrased": "what student lists the most fields of study", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_147"}
{"paraphrased": "what students have the latest end date", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_148"}
{"paraphrased": "which company employs people who 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_149"}
{"paraphrased": "find birth cities of employees who have a job title that is not software engineer", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_150"}
{"paraphrased": "people that are friends with people that quit their jobs before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_151"}
{"paraphrased": "find me all employees that have the same end date as alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_152"}
{"paraphrased": "what is the relationship status of employees that started before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_153"}
{"paraphrased": "all people born in new york", "source": "city that is birthplace of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_154"}
{"paraphrased": "people who are friends with the people who quit after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_155"}
{"paraphrased": "who started working in 2004 or 2010", "source": "employee whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_156"}
{"paraphrased": "alices online friends", "source": "person that is friends with alice and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string logged_in)))", "qid": "socialnetwork_test_157"}
{"paraphrased": "gender of students not starting in 2004", "source": "gender that is gender of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_158"}
{"paraphrased": "a student with less than two universities", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_159"}
{"paraphrased": "find relationship status of students whose last day was after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_160"}
{"paraphrased": "what is alices gender", "source": "gender of alice", "target": "(call listValue (call getProperty en.person.alice (string gender)))", "qid": "socialnetwork_test_161"}
{"paraphrased": "people who were born after alice quit her job", "source": "person whose birthdate is at most end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_162"}
{"paraphrased": "who has friends who do not have computer science as a major", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_163"}
{"paraphrased": "people who were born on or after alices first day of school", "source": "person whose birthdate is at least start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))))", "qid": "socialnetwork_test_164"}
{"paraphrased": "people who male and friends with alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_165"}
{"paraphrased": "friend of employee whose start date is larger than 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_166"}
{"paraphrased": "which employee was most recently hired", "source": "employee that has the largest start date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_167"}
{"paraphrased": "students whose end date is before alices", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_168"}
{"paraphrased": "what person is friends with employee who ended earlier than 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_169"}
{"paraphrased": "what are the friends like for people who started working before 2004", "source": "person that employee whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_170"}
{"paraphrased": "friend of student who is not student of brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_171"}
{"paraphrased": "what are the birthplaces of alices friends", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_172"}
{"paraphrased": "find students friends who started before 2004", "source": "person that is friends with student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_173"}
{"paraphrased": "what is the birthplace of employees who started in 2004 or before", "source": "city that is birthplace of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_174"}
{"paraphrased": "find students who have a start date that is either 2004 or 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_175"}
{"paraphrased": "people born after 2004", "source": "person whose birthdate is larger than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_176"}
{"paraphrased": "which employee started after alice quit", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_177"}
{"paraphrased": "which student started after alice quit her job", "source": "student whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_178"}
{"paraphrased": "where was alice born", "source": "birthplace of alice", "target": "(call listValue (call getProperty en.person.alice (string birthplace)))", "qid": "socialnetwork_test_179"}
{"paraphrased": "who are people who work anywhere but mckinsey friends with", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_180"}
{"paraphrased": "who did alice work for as a software engineer", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_test_181"}
{"paraphrased": "people who have friends and did not quit their job in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_182"}
{"paraphrased": "people that are friends of alice", "source": "person that alice is friends with and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_183"}
{"paraphrased": "who has same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_184"}
{"paraphrased": "birthplace of less than two people", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_185"}
{"paraphrased": "relationship status of employee starting before 2004", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_186"}
{"paraphrased": "people who quit after alices birthday", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_187"}
{"paraphrased": "what city do two people share as a birthplace", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_188"}
{"paraphrased": "which student ended on alices start date", "source": "student whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_189"}
{"paraphrased": "find students who have an end date the same as employee alice", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_190"}
{"paraphrased": "find employees with last days of either 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_191"}
{"paraphrased": "find the birthplace of people who are 180 cm tall", "source": "person whose birthplace is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_192"}
{"paraphrased": "where were students born who started after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_193"}
{"paraphrased": "people completed their study before alice", "source": "student whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_194"}
{"paraphrased": "who is taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_195"}
{"paraphrased": "friends of friends of all singles", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_196"}
{"paraphrased": "what are the relationship statuses of student who did not graduate in 2004", "source": "relationship status that is relationship status of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_197"}
{"paraphrased": "people 180 cm tall", "source": "person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_198"}
{"paraphrased": "what is the relationship status of a friend of male", "source": "relationship status that is relationship status of person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_199"}
{"paraphrased": "gender of all employees who started in 2004 or later", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_200"}
{"paraphrased": "friends of people who joined their studies before 2005", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_201"}
{"paraphrased": "find students with a start date no later than 2004 and their friends", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_202"}
{"paraphrased": "student who shares start date with student alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_203"}
{"paraphrased": "people that have at least 2 genders", "source": "person that has at least two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string >=) (number 2)))", "qid": "socialnetwork_test_204"}
{"paraphrased": "was the student who graduated before 2004 a male or a female", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_205"}
{"paraphrased": "find people who have the same gender as alice and are 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_test_206"}
{"paraphrased": "field of study of people who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_207"}
{"paraphrased": "people with only one birthplace", "source": "person that has less than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_test_208"}
{"paraphrased": "find employees whom have the same end date as alices birthday", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_209"}
{"paraphrased": "find people with friends that went to school but not brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_210"}
{"paraphrased": "find friends of people who are logged in", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_211"}
{"paraphrased": "what employee started on the same day alice quit her job", "source": "employee whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_212"}
{"paraphrased": "alices graduation date in computer science", "source": "end date of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string education_end_date)))", "qid": "socialnetwork_test_213"}
{"paraphrased": "which student has an end date after alices birthdate", "source": "student whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_214"}
{"paraphrased": "which student quit on alices birthday", "source": "student whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_215"}
{"paraphrased": "find the gender of people born in 2004", "source": "gender that is gender of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_216"}
{"paraphrased": "who is a person that is a male and whose height is 180 cm", "source": "person whose gender is male and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_217"}
{"paraphrased": "find the students that graduated before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_218"}
{"paraphrased": "find students whose last day was after employee alices", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_219"}
{"paraphrased": "who is not friends with a student whos end date is not 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_220"}
{"paraphrased": "what person is friends with the employee that quit before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_221"}
{"paraphrased": "students who completed in or after 2004", "source": "student whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_222"}
{"paraphrased": "who stopped working the day alice was born", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_223"}
{"paraphrased": "gender of student whose start date is not after 2004", "source": "gender that is gender of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_224"}
{"paraphrased": "employee whose end date is start date of employee alice", "source": "employee whose end date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_225"}
{"paraphrased": "alice quit her job in 2004 when did she start it", "source": "start date of employee alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date) (string =) (date 2004 -1 -1)) (string employment_start_date)))", "qid": "socialnetwork_test_226"}
{"paraphrased": "in which university does alice study", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_227"}
{"paraphrased": "who are alices friends friends", "source": "person that is friends with person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_228"}
{"paraphrased": "what is the relationship status of students who are not brown university students", "source": "relationship status that is relationship status of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_229"}
{"paraphrased": "employees who started working on or before the day alice as born", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_230"}
{"paraphrased": "what students have an end date earlier than 2004 or 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_231"}
{"paraphrased": "find oneperson birthplaces", "source": "city that is birthplace of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_232"}
{"paraphrased": "people who have friends that were born in 2004", "source": "person that is friends with person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_233"}
{"paraphrased": "find friends of employees whose last day is before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_234"}
{"paraphrased": "what is the relationship status of alice or bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_235"}
{"paraphrased": "what is the gender of that person", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_236"}
{"paraphrased": "friends of people who joined their jobs before 2005", "source": "person that employee whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_237"}
{"paraphrased": "who is friends with a person whose height is 180 cm", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_238"}
{"paraphrased": "people that are taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_239"}
{"paraphrased": "relationship status of people who quit their job after 2003", "source": "relationship status that is relationship status of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_240"}
{"paraphrased": "relationship status of employees who start before 2004", "source": "relationship status that is relationship status of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_241"}
{"paraphrased": "what city in new york is the persons birthplace", "source": "city that is birthplace of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_242"}
{"paraphrased": "which employee started no later than 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_243"}
{"paraphrased": "what person was born on alices graduation date", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_test_244"}
{"paraphrased": "wnich students are not majoring in computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_245"}
{"paraphrased": "which students graduate no sooner than alices graduation day", "source": "student whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_246"}
{"paraphrased": "what is the relationship status of people that started school in or after 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_247"}
{"paraphrased": "people born on or after the day alice stopped attending school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_248"}
{"paraphrased": "name the city where a student was born who is not studying computer science", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_249"}
{"paraphrased": "what student no more than two fields of study", "source": "student that has at most two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_250"}
{"paraphrased": "what is relationship status of employees with last day other than 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_251"}
{"paraphrased": "person who is 180 or 200cm tall", "source": "person whose height is 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call concat (number 180 en.cm) (number 200 en.cm))))", "qid": "socialnetwork_test_252"}
{"paraphrased": "whats the relationship status  of the employee who does not work for mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_253"}
{"paraphrased": "people that have friends that are currently online", "source": "person that person that is logged in is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_254"}
{"paraphrased": "student who joined after alice left", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_255"}
{"paraphrased": "gender of a student who does not study computer science", "source": "gender that is gender of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_256"}
{"paraphrased": "which employee has the same start date as alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_257"}
{"paraphrased": "find student whose first day if before alices last day", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_258"}
{"paraphrased": "genders of people whom are single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_259"}
{"paraphrased": "what city is the birthplace of at most two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_260"}
{"paraphrased": "students that will start before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_261"}
{"paraphrased": "find student who attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_262"}
{"paraphrased": "employee starting before or when alice ends", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_263"}
{"paraphrased": "which student had started working after alice quitted", "source": "student whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_264"}
{"paraphrased": "find friends of males", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_265"}
{"paraphrased": "who are the friends of person who is 180 cm tall", "source": "person that is friends with person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_266"}
{"paraphrased": "employees who began working by the time alice started working", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_267"}
{"paraphrased": "student whose start date is before birth date of alice", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_268"}
{"paraphrased": "genders of students not at brown", "source": "gender that is gender of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_269"}
{"paraphrased": "what is the companys number", "source": "number of company", "target": "(call listValue (call .size (call getProperty (call singleton en.company) (string !type))))", "qid": "socialnetwork_test_270"}
{"paraphrased": "student whose start date is not after birth date of alice", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_271"}
{"paraphrased": "relationship status of employees whose end date is not 2004", "source": "relationship status that is relationship status of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_272"}
{"paraphrased": "find the people who are friends with students whose end date is farther than 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_273"}
{"paraphrased": "what is the gender of the person who is logged in", "source": "gender that is gender of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_274"}
{"paraphrased": "what cities are the birthplace of students who dont  are not from brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_275"}
{"paraphrased": "which students went to the smallest amount of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_276"}
{"paraphrased": "who started working up until alice started working", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_277"}
{"paraphrased": "gender of students that started after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_278"}
{"paraphrased": "what student started earlier than alices birthdate", "source": "student whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_279"}
{"paraphrased": "which employees started after alices last day of work", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_280"}
{"paraphrased": "find students attending brown or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_281"}
{"paraphrased": "students who finish the latest", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_282"}
{"paraphrased": "relationship status of two people", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_283"}
{"paraphrased": "people born before 2010", "source": "person whose birthdate is smaller than 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_284"}
{"paraphrased": "which employee has the same birthplace as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_285"}
{"paraphrased": "who has the fewest number of friends", "source": "person that is friends with the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string min) (string friend) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_286"}
{"paraphrased": "which people are not friends of alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_test_287"}
{"paraphrased": "friend of student whose end date is at most 2004", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_288"}
{"paraphrased": "employees who started their job before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_289"}
{"paraphrased": "student whose start date is before end date of employee alice", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_290"}
{"paraphrased": "what is the birthplace city of a student whose end date was not in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_291"}
{"paraphrased": "employees whose last day was in or before 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_292"}
{"paraphrased": "whos end date is after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_293"}
{"paraphrased": "what is the gender of max two people", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_294"}
{"paraphrased": "find birthplace cities of persons born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_295"}
{"paraphrased": "find people who have friends that are 180 cm tall", "source": "person that person whose height is 180 cm is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_296"}
{"paraphrased": "person that stopped working before alice stopped working", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_297"}
{"paraphrased": "people who joined work before alice", "source": "employee whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_298"}
{"paraphrased": "employee whose end date is same as that of student alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_299"}
{"paraphrased": "find a friend of alice or bob", "source": "person that is friends with alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_300"}
{"paraphrased": "relationship status of students finishing before 2004", "source": "relationship status that is relationship status of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_301"}
{"paraphrased": "which student has same end date as that of alice", "source": "student whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_302"}
{"paraphrased": "what single person is 180 cm tall", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_303"}
{"paraphrased": "find employees not with mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_304"}
{"paraphrased": "people who are shorter than alice", "source": "person whose height is smaller than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_305"}
{"paraphrased": "what employees left their jobs either in or after 2004 or 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_306"}
{"paraphrased": "what person is friends with a student whose end date is not 2004", "source": "person that is friends with student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_307"}
{"paraphrased": "what is thre relationship status of employees who started no earlier than 2004", "source": "relationship status that is relationship status of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_308"}
{"paraphrased": "who was born after alice left", "source": "person whose birthdate is larger than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_309"}
{"paraphrased": "find me student whose end date is after student alices", "source": "student whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_310"}
{"paraphrased": "students who finish before 2010", "source": "student whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_311"}
{"paraphrased": "relationship status that is relationship status of one person", "source": "relationship status that is relationship status of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_312"}
{"paraphrased": "what students have a field of study that is not computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_313"}
{"paraphrased": "people that started school in 2004 or 2010", "source": "student whose start date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_314"}
{"paraphrased": "people who joined the institution with alice", "source": "student whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_315"}
{"paraphrased": "students birthplace who started on or after 2004", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_316"}
{"paraphrased": "students who started after alice quit her job", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_317"}
{"paraphrased": "what person is at least the same height as that of alice", "source": "person whose height is at least height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_318"}
{"paraphrased": "who is 180 cm tall and goes to brown university", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_test_319"}
{"paraphrased": "friend of student whose field of study is not computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_320"}
{"paraphrased": "what employees have an end date that is later than that of student alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_321"}
{"paraphrased": "find student not attending brown university", "source": "student whose university is not brown university", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_322"}
{"paraphrased": "who is friends with the person who quit before 2004", "source": "person that employee whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_323"}
{"paraphrased": "find students starting on or after alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_324"}
{"paraphrased": "people that stopped working in or after 2004 or in or after 2010", "source": "employee whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_325"}
{"paraphrased": "find students that have the largest number of field studies", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_326"}
{"paraphrased": "how many people have the same employer as alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_327"}
{"paraphrased": "what is the employees relationship status who started after 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_328"}
{"paraphrased": "what is gender of employees who started before 2004", "source": "gender that is gender of employee whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_329"}
{"paraphrased": "which employee started in 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_330"}
{"paraphrased": "what university does alice study computer science at", "source": "university of student alice whose field of study is computer science", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string field_of_study) (string =) en.field.computer_science) (string university)))", "qid": "socialnetwork_test_331"}
{"paraphrased": "employee whose end date is start date of student alice", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_332"}
{"paraphrased": "student who does not graduate by 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_333"}
{"paraphrased": "find all the students that started after alice was hired", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_334"}
{"paraphrased": "what gender is not claimed by alice", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_335"}
{"paraphrased": "employee whose start date is before birth date of alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_336"}
{"paraphrased": "find employees who have the greatest amount of job titles", "source": "employee that has at most two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_337"}
{"paraphrased": "friend of employee whose end date is not after 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_338"}
{"paraphrased": "employee whose end date that is around alices start date", "source": "employee whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_339"}
{"paraphrased": "whose birthdate is 2004 that is friends with alice", "source": "person whose birthdate is 2004 and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_340"}
{"paraphrased": "friend of employee whose employer is not mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_341"}
{"paraphrased": "what male has a relationship status of single", "source": "person whose gender is male and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_342"}
{"paraphrased": "what gender has more than two people", "source": "gender that is gender of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_343"}
{"paraphrased": "find alices friend who is 180 cm tall", "source": "person whose height is 180 cm and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_344"}
{"paraphrased": "find the gender of alices friends", "source": "gender that is gender of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_345"}
{"paraphrased": "employee whose start date is after birth date of alice", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_346"}
{"paraphrased": "find the universities of people with a height of 180 cm", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_347"}
{"paraphrased": "single people who are 180 cm tall", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_348"}
{"paraphrased": "single person born in new york", "source": "person whose birthplace is new york and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_349"}
{"paraphrased": "which of mckinseys employees is 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_test_350"}
{"paraphrased": "employees  city of birth who was born at or before 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_351"}
{"paraphrased": "what person is friends with alice", "source": "person that is friends with alice and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_352"}
{"paraphrased": "what students have an end date that is equal to or greater than the end date of employee alice", "source": "student whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_353"}
{"paraphrased": "find me typical fields of study for people who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_354"}
{"paraphrased": "people who are born in new york or beijing", "source": "person whose birthplace is new york or beijing", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call concat en.city.new_york en.city.bejing)))", "qid": "socialnetwork_test_355"}
{"paraphrased": "which students are leaving prior to the date alice starts", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_356"}
{"paraphrased": "people that go to or went to the same university as alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_357"}
{"paraphrased": "who was born in new york and is 180 cm tall", "source": "person whose birthplace is new york and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_358"}
{"paraphrased": "what students have a start date that is after the start date of employee alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_359"}
{"paraphrased": "list the birthplaces of people who quit their jobs before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_360"}
{"paraphrased": "employees who started on or after alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_361"}
{"paraphrased": "city that a single person was born in", "source": "city that is birthplace of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_362"}
{"paraphrased": "employees whose last day was after alice started school", "source": "employee whose end date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_363"}
{"paraphrased": "employee who has been here longer than alice", "source": "employee whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_364"}
{"paraphrased": "who is friends with a person who gender is male", "source": "person that person whose gender is male is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_365"}
{"paraphrased": "students who left when alice started as a student", "source": "student whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_366"}
{"paraphrased": "find me an employee whose end date is equal to or earlier than the birthdate of student alice", "source": "employee whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_367"}
{"paraphrased": "who has two relationship status", "source": "person that has two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) (number 2)))", "qid": "socialnetwork_test_368"}
{"paraphrased": "employee who started on the end date of alice", "source": "employee whose start date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_369"}
{"paraphrased": "find people who have a relationship status of single who are also friends with alice", "source": "person whose relationship status is single and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_370"}
{"paraphrased": "people who quit their job on the same day or after alice got hired", "source": "employee whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_371"}
{"paraphrased": "cities where alice was not born", "source": "city that is not birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string !=) en.person.alice))", "qid": "socialnetwork_test_372"}
{"paraphrased": "find employees that have a start date that is earlier than the birthdate of alice", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_373"}
{"paraphrased": "find out if alice attended brown university", "source": "university of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string university)))", "qid": "socialnetwork_test_374"}
{"paraphrased": "employee who left before alice was born", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_375"}
{"paraphrased": "find me the relationship status of the person that does not work for mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_376"}
{"paraphrased": "what is the birthplace of students that dont go to brown", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_377"}
{"paraphrased": "what is the gender of employees whose last day was no earlier than 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_378"}
{"paraphrased": "who was born in two or more places", "source": "person that has at least two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >=) (number 2)))", "qid": "socialnetwork_test_379"}
{"paraphrased": "people that are friends with someone that stopped working in or after 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_380"}
{"paraphrased": "what people are friends with students whoese end date is before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_381"}
{"paraphrased": "the gender of an employee starting before or during 2004", "source": "gender that is gender of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_382"}
{"paraphrased": "find people who are 180 cm tall and quit in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_383"}
{"paraphrased": "find employees who have a job title that is neither software engineer or program manager", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_384"}
{"paraphrased": "which employees last day was before the day alice started school", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_385"}
{"paraphrased": "find when students named alice started attending brown university", "source": "start date of student alice whose university is brown university", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string university) (string =) en.university.brown) (string education_start_date)))", "qid": "socialnetwork_test_386"}
{"paraphrased": "employees who have the same job title as alice", "source": "employee whose job title is job title of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string job_title)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_387"}
{"paraphrased": "what is the relationship status of an employee who didnt start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_388"}
{"paraphrased": "which students attended the fewest universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_389"}
{"paraphrased": "employees who joined before 2004", "source": "employee whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_390"}
{"paraphrased": "people who were born before alice quit her job", "source": "person whose birthdate is smaller than end date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))))", "qid": "socialnetwork_test_391"}
{"paraphrased": "who is 180 cm tall and has the same birth date as alice", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_test_392"}
{"paraphrased": "employees who started working before the day alice was born", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_393"}
{"paraphrased": "gender of employees whose end date is later than 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_394"}
{"paraphrased": "find students with a start date that is later than that of employee alice", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_395"}
{"paraphrased": "find friends of alice with a birthdate of 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_396"}
{"paraphrased": "what employee has an end date no later than the end date of alice", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_397"}
{"paraphrased": "people that have a friend that works for someone other than mckinsey", "source": "person that is friends with employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_398"}
{"paraphrased": "friend of employee whose end date is before 2004", "source": "person that is friends with employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_399"}
{"paraphrased": "friends of people who completed their studies before 2005", "source": "person that student whose end date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_400"}
{"paraphrased": "city where at least two people were born", "source": "city that is birthplace of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_401"}
{"paraphrased": "birth city of employees whose end date is not 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_402"}
{"paraphrased": "which employees started work before alices birthday", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_403"}
{"paraphrased": "who is friends with students whose end date is 2004 or later", "source": "person that student whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_404"}
{"paraphrased": "relationship status of students who left in or after 2004", "source": "relationship status that is relationship status of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_405"}
{"paraphrased": "which people are friends with students who graduate no later than 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_406"}
{"paraphrased": "people that stopped school when alice stopped working", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_407"}
{"paraphrased": "what is the birthplace of students who strated no later than 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_408"}
{"paraphrased": "which employee quit before alice quit her job", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_409"}
{"paraphrased": "people that started working when alice stopped working or before", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_410"}
{"paraphrased": "what employees have an end date that is no later than that of student alice", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_411"}
{"paraphrased": "which one of alices friends was born in new york", "source": "person whose birthplace is new york and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_412"}
{"paraphrased": "find me an employees city of birth excluding any software engineers", "source": "city that is birthplace of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_413"}
{"paraphrased": "people who birthdates are after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_414"}
{"paraphrased": "people that started school after alice", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_415"}
{"paraphrased": "find a person whom is friends with students whose field of study is not computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_416"}
{"paraphrased": "when did alice start her job", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_417"}
{"paraphrased": "what is students gender with last day other than 2004", "source": "gender that is gender of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_418"}
{"paraphrased": "who is friends with someone who enrolled in school during or before 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_419"}
{"paraphrased": "find friends of students graduating after 2004", "source": "person that student whose end date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_420"}
{"paraphrased": "person that was only born in one place", "source": "person that has less than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <) (number 2)))", "qid": "socialnetwork_test_421"}
{"paraphrased": "people born in or before 2004", "source": "person whose birthdate is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_422"}
{"paraphrased": "what online person is single", "source": "person that is logged in and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_423"}
{"paraphrased": "what is the most end date of student alice", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_424"}
{"paraphrased": "what person is friends with a student who does not study computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_425"}
{"paraphrased": "find people who are friends with either alice or bob", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_426"}
{"paraphrased": "what city was alices friend born in", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_427"}
{"paraphrased": "what students have the fewest fields of study", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_428"}
{"paraphrased": "what is the relationship status of a student who had a start date in 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_429"}
{"paraphrased": "what is the relationship status of people that stopped working before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_430"}
{"paraphrased": "what gender is the student that starts before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_431"}
{"paraphrased": "people who were born in new york and are male", "source": "person whose birthplace is new york and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_432"}
{"paraphrased": "student whose start date is end date of employee alice", "source": "student whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_433"}
{"paraphrased": "people with male friends", "source": "person that is friends with person whose gender is male", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male)))", "qid": "socialnetwork_test_434"}
{"paraphrased": "employees who began working in or after 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_435"}
{"paraphrased": "which people share a friend with bob or alice", "source": "person that alice or bob is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_436"}
{"paraphrased": "people who have more than two friends", "source": "person that is friends with more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_437"}
{"paraphrased": "find friends that are friends with alice", "source": "person that person that is friends with alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_438"}
{"paraphrased": "find people with two or more relationship statuses", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_439"}
{"paraphrased": "an employer with the least employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_440"}
{"paraphrased": "who is younger than or same as alic", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_441"}
{"paraphrased": "friends of alice in similar relationships", "source": "relationship status that is relationship status of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_442"}
{"paraphrased": "birthplace of students who started before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_443"}
{"paraphrased": "find cities that more than two people were born in", "source": "city that is birthplace of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_444"}
{"paraphrased": "people who quit their job after 2003", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_445"}
{"paraphrased": "gender of students whose end date is before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_446"}
{"paraphrased": "name a man who is friends with alice", "source": "person whose gender is male and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_447"}
{"paraphrased": "employee who has most number of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_448"}
{"paraphrased": "birth city of student whose start date is not after 2004", "source": "city that is birthplace of student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_449"}
{"paraphrased": "find people who are greater in height than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_450"}
{"paraphrased": "what is the relationship status of the working people that do not work for mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_451"}
{"paraphrased": "what is alices start date as software engineer", "source": "start date of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employment_start_date)))", "qid": "socialnetwork_test_452"}
{"paraphrased": "which students last day was the same as alices", "source": "student whose end date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_453"}
{"paraphrased": "what employee has a start date that is no earlier than the end date of alice", "source": "employee whose start date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_454"}
{"paraphrased": "find relationship status of employees not with mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_455"}
{"paraphrased": "employees who start when alice leaves", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_456"}
{"paraphrased": "people that have at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_457"}
{"paraphrased": "what persons relationship status is single and was born in new york", "source": "person whose relationship status is single and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_458"}
{"paraphrased": "which employee has a start date of at least 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_459"}
{"paraphrased": "people who were born on or after alices last day of school", "source": "person whose birthdate is at least end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_460"}
{"paraphrased": "where was the 180 cm tall person born", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_461"}
{"paraphrased": "when did alice who started working in 2004 finish working", "source": "end date of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employment_end_date)))", "qid": "socialnetwork_test_462"}
{"paraphrased": "which students started after alices first day of school", "source": "student whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_463"}
{"paraphrased": "find all of alices friends that were born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_464"}
{"paraphrased": "students who start after alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_465"}
{"paraphrased": "person who worked with highest number of employees", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_466"}
{"paraphrased": "alices friends with a height of 180 cm", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_467"}
{"paraphrased": "what logged in person was born in new york", "source": "person whose birthplace is new york and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string logged_in)))", "qid": "socialnetwork_test_468"}
{"paraphrased": "find me the employee who started around the time alice departed", "source": "employee whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_469"}
{"paraphrased": "what was alices first day of work", "source": "start date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))", "qid": "socialnetwork_test_470"}
{"paraphrased": "which students started no later than alices first day of work", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_471"}
{"paraphrased": "people who are friends with alice and single", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_472"}
{"paraphrased": "what is the relationship status of alice or bob", "source": "relationship status that is relationship status of alice or bob", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call concat en.person.alice en.person.bob)))", "qid": "socialnetwork_test_473"}
{"paraphrased": "which employee did not start in 2004", "source": "employee whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_474"}
{"paraphrased": "people who are friends with the smployee starting by 2994", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_475"}
{"paraphrased": "what is the birth city of the student who didnt end in 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_476"}
{"paraphrased": "people that stopped school when alice stopped working or before", "source": "student whose end date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_477"}
{"paraphrased": "people who have more than two relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_478"}
{"paraphrased": "a friend of someone born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_479"}
{"paraphrased": "an employee that ends before alice begins", "source": "employee whose end date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_480"}
{"paraphrased": "frinds of alice currently logged in", "source": "person that is logged in and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_481"}
{"paraphrased": "people born in the same place as alice", "source": "person whose birthplace is birthplace of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) (call getProperty en.person.alice (string birthplace))))", "qid": "socialnetwork_test_482"}
{"paraphrased": "what is the gender of the student that graduated before 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_483"}
{"paraphrased": "what people have more than two birthplaces", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_test_484"}
{"paraphrased": "what gender is alice not", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_485"}
{"paraphrased": "what student has the fewest majors", "source": "student that has the least number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_486"}
{"paraphrased": "employee whose end date is  birth date of alice", "source": "employee whose end date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_487"}
{"paraphrased": "people that stopped working before 2004 or before 2010", "source": "employee whose end date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_488"}
{"paraphrased": "people who are friends with the student leaving by 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_489"}
{"paraphrased": "who are friends of people who werent working until at least 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_490"}
{"paraphrased": "birthplace of a student not attending brown university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_491"}
{"paraphrased": "people that stopped going to school when alice started working or before", "source": "student whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_492"}
{"paraphrased": "where were the people that stopped school in or after 2004 born", "source": "city that is birthplace of student whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_493"}
{"paraphrased": "a worker who started after student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_494"}
{"paraphrased": "what person who started in 2004 is 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_495"}
{"paraphrased": "students who enrolled in or before 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_496"}
{"paraphrased": "gender of employees not working for mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_497"}
{"paraphrased": "people that are friends with someone that stopped working in or before 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_498"}
{"paraphrased": "people that finished school on or after the day alice started working", "source": "student whose end date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_499"}
{"paraphrased": "which students started after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_500"}
{"paraphrased": "what person has at least two friends", "source": "person that at least two person is friends with", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_501"}
{"paraphrased": "males that are currently online", "source": "person whose gender is male and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string logged_in)))", "qid": "socialnetwork_test_502"}
{"paraphrased": "people that started school after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_503"}
{"paraphrased": "genders of students finishing before 2004", "source": "gender that is gender of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_504"}
{"paraphrased": "what students have an end date before 2004 and who are their friends", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_505"}
{"paraphrased": "employees who started before alice was born", "source": "employee whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_506"}
{"paraphrased": "what gender of employees started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_507"}
{"paraphrased": "gender of student who started after 2004", "source": "gender that is gender of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_508"}
{"paraphrased": "which people at brown university are 180 cm in height", "source": "person whose height is 180 cm and whose university is brown university", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string university) (string =) en.university.brown))", "qid": "socialnetwork_test_509"}
{"paraphrased": "birthplace of students whose end date is after 2004", "source": "city that is birthplace of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_510"}
{"paraphrased": "people that started school in or after 2004 or in or after 2010", "source": "student whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_511"}
{"paraphrased": "find employees with last day after alices", "source": "employee whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_512"}
{"paraphrased": "employees joining before 2004", "source": "employee whose start date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_513"}
{"paraphrased": "find someone born during or before 2010", "source": "person whose birthdate is at most 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_514"}
{"paraphrased": "people in a mutually exclusive relationship", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_515"}
{"paraphrased": "which employees last day was after 2004", "source": "employee whose end date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_516"}
{"paraphrased": "people who are taller than 180 cm or 200 cm", "source": "person whose height is larger than 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_517"}
{"paraphrased": "what city is the birthplace of two people", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_518"}
{"paraphrased": "employees who began working by 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_519"}
{"paraphrased": "which people are friends with employees whose last day was no sooner than 2004", "source": "person that is friends with employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_520"}
{"paraphrased": "what are students relationship status who started in 2004 or later", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_521"}
{"paraphrased": "name a friend of alice", "source": "person that person that is friends with alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_522"}
{"paraphrased": "an employee who started on or after alices birthday", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_523"}
{"paraphrased": "friends of people born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_524"}
{"paraphrased": "relationship status of employee joining after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_525"}
{"paraphrased": "find me a list of employees who are employed by mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_526"}
{"paraphrased": "what is the field of study of alice who finished in 2004", "source": "field of study of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string field_of_study)))", "qid": "socialnetwork_test_527"}
{"paraphrased": "person that has the smallest number of employees", "source": "employee that has the least number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_528"}
{"paraphrased": "students finishing before 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_529"}
{"paraphrased": "friends of students finishing before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_530"}
{"paraphrased": "student who has minimum number of universities", "source": "student that has the least number of university", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string university))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_531"}
{"paraphrased": "person who completed the education latest", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_532"}
{"paraphrased": "an employee that starts during or before 2004", "source": "employee whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_533"}
{"paraphrased": "what employees are not employed by mickinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_534"}
{"paraphrased": "what person is friends with the person who was born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_535"}
{"paraphrased": "who employs alice as a software engineer", "source": "employer of employee alice whose job title is software engineer", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string job_title) (string =) en.job_title.software_engineer) (string employer)))", "qid": "socialnetwork_test_536"}
{"paraphrased": "people with the same relationship status as alice and are also 180 cm tall", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_test_537"}
{"paraphrased": "employees who are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_538"}
{"paraphrased": "what is the job title of those who are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_539"}
{"paraphrased": "what city is the birthplace of no more than two people", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_540"}
{"paraphrased": "who was born on the day alice finished school", "source": "person whose birthdate is end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))", "qid": "socialnetwork_test_541"}
{"paraphrased": "what relationships status represents the fewest people", "source": "relationship status that is relationship status of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.relationship_status) (string !type)) (string min) (call reverse (string relationship_status)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_542"}
{"paraphrased": "find students finishing after 2004", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_543"}
{"paraphrased": "find people who went to brown university or ucla", "source": "brown university or ucla", "target": "(call listValue (call concat en.university.brown en.university.ucla))", "qid": "socialnetwork_test_544"}
{"paraphrased": "people who are shorter than 180 cm", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_545"}
{"paraphrased": "connections of friends who started dating before 2004", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_546"}
{"paraphrased": "which employees are working jobs other than softwhere engineer", "source": "employee whose job title is not software engineer", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_547"}
{"paraphrased": "people with two genders or less", "source": "person that has at most two gender", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string gender) (string <=) (number 2)))", "qid": "socialnetwork_test_548"}
{"paraphrased": "what is thre relationships status of employees whose last day was before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_549"}
{"paraphrased": "which student started earlier than alices end date", "source": "student whose start date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_550"}
{"paraphrased": "find employees starting on alices last day", "source": "employee whose start date is end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_551"}
{"paraphrased": "which employees last day was after alices first day", "source": "employee whose end date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_552"}
{"paraphrased": "who is not born on 2004", "source": "person whose birthdate is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string !=) (date 2004 -1 -1)))", "qid": "socialnetwork_test_553"}
{"paraphrased": "find all employees who quit in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_554"}
{"paraphrased": "where were the people that stopped working in or before 2004 born", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_555"}
{"paraphrased": "find people whose birthplace is new york", "source": "person whose gender is male and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_556"}
{"paraphrased": "people that have two or fewer birthplaces listed", "source": "person that has at most two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string <=) (number 2)))", "qid": "socialnetwork_test_557"}
{"paraphrased": "people born in or after 2004", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_558"}
{"paraphrased": "what online person is 180 cm tall", "source": "person whose height is 180 cm and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string logged_in)))", "qid": "socialnetwork_test_559"}
{"paraphrased": "person who is not a friend of alice", "source": "person that not is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string !=) en.person.alice))", "qid": "socialnetwork_test_560"}
{"paraphrased": "what people are friends with alice and have a birthplace of new york", "source": "person that alice is friends with and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_561"}
{"paraphrased": "relationship status of students starting after or in 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_562"}
{"paraphrased": "what is the gender of people that stopped working in or after 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_563"}
{"paraphrased": "who is alices employer", "source": "employer of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_564"}
{"paraphrased": "any male who is single", "source": "person whose gender is male and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_565"}
{"paraphrased": "who is the boss of alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_566"}
{"paraphrased": "city with birthplace of two person", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_567"}
{"paraphrased": "find friends of employees who did not start in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_568"}
{"paraphrased": "what is relationship status of students who did not start in 2004", "source": "relationship status that is relationship status of student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_569"}
{"paraphrased": "gender which is same as at least two persons", "source": "gender that is gender of at least two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string >=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_570"}
{"paraphrased": "which city has minimum number of people born in", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_571"}
{"paraphrased": "either single or married", "source": "single or married", "target": "(call listValue (call concat en.relationship_status.single en.relationship_status.married))", "qid": "socialnetwork_test_572"}
{"paraphrased": "who has more than two relationship status", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_573"}
{"paraphrased": "find people employed by mckinsey who are 180 cm tall", "source": "person whose height is 180 cm and whose employer is mckinsey", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string employer) (string =) en.company.mckinsey))", "qid": "socialnetwork_test_574"}
{"paraphrased": "find students starting before 2004", "source": "student whose start date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_575"}
{"paraphrased": "people completed study before alice started study", "source": "student whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_576"}
{"paraphrased": "who is friends with the employee that quit in 2004", "source": "person that is friends with employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_577"}
{"paraphrased": "what is the birthplace of people currently online", "source": "city that is birthplace of person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in))))", "qid": "socialnetwork_test_578"}
{"paraphrased": "find people born the same day or later than alice", "source": "person whose birthdate is at least birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_579"}
{"paraphrased": "what employee started no greater than alices end date", "source": "employee whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_580"}
{"paraphrased": "where was alice born", "source": "city that is birthplace of alice and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) en.person.alice) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_test_581"}
{"paraphrased": "what is the relationship status of employees who did not start in 2004", "source": "relationship status that is relationship status of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_582"}
{"paraphrased": "who is born on same date that of alice", "source": "person whose birthdate is birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty en.person.alice (string birthdate))))", "qid": "socialnetwork_test_583"}
{"paraphrased": "what is alices height", "source": "height of alice", "target": "(call listValue (call getProperty en.person.alice (string height)))", "qid": "socialnetwork_test_584"}
{"paraphrased": "what are genders of employees whose last day was after 2004", "source": "gender that is gender of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_585"}
{"paraphrased": "what is the relationship status of two individuals", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_586"}
{"paraphrased": "people who were not born in new york", "source": "person whose birthplace is not new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string !=) en.city.new_york))", "qid": "socialnetwork_test_587"}
{"paraphrased": "find me a list of employees whose start date was in 2004 or 2010", "source": "employee whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_588"}
{"paraphrased": "what city is the birthplace of an employee who quit after 2004", "source": "city that is birthplace of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_589"}
{"paraphrased": "what gender are those two people", "source": "gender that is gender of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_590"}
{"paraphrased": "person with two or more birthplaces", "source": "person that has more than two birthplace", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string >) (number 2)))", "qid": "socialnetwork_test_591"}
{"paraphrased": "student not studying fewer than two fields of study", "source": "student that has less than two field of study", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string field_of_study) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_592"}
{"paraphrased": "what employees have the greatest amount of job titles", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_593"}
{"paraphrased": "find all people who were born in 2004", "source": "person whose birthdate is 2004 and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_594"}
{"paraphrased": "a student that started between 2001 and 2010", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_595"}
{"paraphrased": "cities where alices friends were born", "source": "city that is birthplace of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_596"}
{"paraphrased": "people born in the most cities", "source": "person that has the most number of birthplace", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (string birthplace)))", "qid": "socialnetwork_test_597"}
{"paraphrased": "find the people who joined studies before alice joined work", "source": "student whose start date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_598"}
{"paraphrased": "a friend of a student that isnt in computer science", "source": "person that is friends with student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_599"}
{"paraphrased": "what people have a relationship status of single whom are also friends with alice", "source": "person whose relationship status is single and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_600"}
{"paraphrased": "when did alice quit", "source": "end date of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date)))", "qid": "socialnetwork_test_601"}
{"paraphrased": "what person has a relationship status of not single", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_602"}
{"paraphrased": "a friend of a student that ends before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_603"}
{"paraphrased": "friend of employee whose start date is at least 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_604"}
{"paraphrased": "a 180 cm tall person with same relationship status as alice", "source": "person whose height is 180 cm and that is relationship status of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string relationship_status)) (string =) en.person.alice))", "qid": "socialnetwork_test_605"}
{"paraphrased": "who is the person who has logged in ", "source": "person that is logged in", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)))", "qid": "socialnetwork_test_606"}
{"paraphrased": "students from brown university or ucla", "source": "student whose university is brown university or ucla", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call concat en.university.brown en.university.ucla))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_607"}
{"paraphrased": "student who did not join in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_608"}
{"paraphrased": "who is friends with the employee who did not start in 2004", "source": "person that employee whose start date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_609"}
{"paraphrased": "who did alice start to work for in 2004", "source": "employer of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_610"}
{"paraphrased": "find someone who has at most two friends", "source": "person that is friends with at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_611"}
{"paraphrased": "which employee worked before 2004", "source": "employee whose end date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_612"}
{"paraphrased": "which employee quit on or before the student alice", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_613"}
{"paraphrased": "people that started working after alice started school", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_614"}
{"paraphrased": "student who started earliest", "source": "student that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_615"}
{"paraphrased": "find students with an end date that is no greater than alice", "source": "student whose end date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_616"}
{"paraphrased": "people who were born before alice graduated school", "source": "person whose birthdate is smaller than end date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))))", "qid": "socialnetwork_test_617"}
{"paraphrased": "find all students who graduated between 2004 and 2010", "source": "student whose end date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_618"}
{"paraphrased": "what is the field of study of those who are 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_619"}
{"paraphrased": "find someone with the same gender as alice", "source": "person whose gender is gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call getProperty en.person.alice (string gender))))", "qid": "socialnetwork_test_620"}
{"paraphrased": "what is the relationship status of two or less people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_621"}
{"paraphrased": "students starting before or contemporaneous to when alice finishes", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_622"}
{"paraphrased": "find me all people who were born in new york", "source": "person whose birthplace is new york and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_623"}
{"paraphrased": "which students graduate after alices last day at work", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_624"}
{"paraphrased": "a friend of someone with a start date of at least 2004", "source": "person that employee whose start date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_625"}
{"paraphrased": "friends of people who became students in 2004 or earlier", "source": "person that student whose start date is at most 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_626"}
{"paraphrased": "what is the employer of a person that is 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_627"}
{"paraphrased": "find me employees whose end date is the same as alices bithdate", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_628"}
{"paraphrased": "people that started school in or before 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_629"}
{"paraphrased": "employee who resigned recently", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_630"}
{"paraphrased": "fine me employees starting before alices birthday", "source": "employee whose start date is smaller than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_631"}
{"paraphrased": "find students of same gender who quit the job before 2004 ", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_632"}
{"paraphrased": "who is friends with someone who doesnt work for mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_633"}
{"paraphrased": "people who are friends with those who joined studies in or after 2004", "source": "person that is friends with student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_634"}
{"paraphrased": "who is younger than alice", "source": "person whose birthdate is larger than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_635"}
{"paraphrased": "which employee started on the same date as alice", "source": "employee whose start date is start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_636"}
{"paraphrased": "people born on or before the day alice started her job", "source": "person whose birthdate is at most start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_637"}
{"paraphrased": "find the employee that has less than two job titles", "source": "employee that has less than two job title", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string job_title) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_638"}
{"paraphrased": "persons whose height is 180 cm or higher", "source": "person whose height is at least 180 cm or 200 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (call concat (number 180 en.cm) (number 200 en.cm)))))", "qid": "socialnetwork_test_639"}
{"paraphrased": "what is the relationship status of working people that are not software engineers", "source": "relationship status that is relationship status of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_640"}
{"paraphrased": "whom are people with a relationship status of single friends with", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_641"}
{"paraphrased": "find employees who have a start date that is no greater than that of employee alice", "source": "employee whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_642"}
{"paraphrased": "what is the gender of students who strated no earlier than 2004", "source": "gender that is gender of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_643"}
{"paraphrased": "student who quit before alice was hired", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_644"}
{"paraphrased": "an employee starting before or when alice was born", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_645"}
{"paraphrased": "a 180 cm person born in new york", "source": "person whose height is 180 cm and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_646"}
{"paraphrased": "find people with a height of 180 cm and a state date of 2004", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_647"}
{"paraphrased": "students not starting in 2004", "source": "student whose start date is not 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_648"}
{"paraphrased": "find me all people with relationship status of two people", "source": "relationship status that is relationship status of more than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string >) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_649"}
{"paraphrased": "what person has more than two friends", "source": "person that is friends with two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_650"}
{"paraphrased": "what day did alice stop school in 2004", "source": "end date of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string education_end_date)))", "qid": "socialnetwork_test_651"}
{"paraphrased": "find students with a start date earlier than 2004 and their friends", "source": "person that student whose start date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_652"}
{"paraphrased": "employees for two employers maximum", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_653"}
{"paraphrased": "employees not working for mckinsey", "source": "employee whose employer is not mckinsey", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_654"}
{"paraphrased": "people with friends that finished school in or before 2004", "source": "person that is friends with student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_655"}
{"paraphrased": "who is not friends with alice", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_656"}
{"paraphrased": "what is the gender of the person born in new york", "source": "gender that is gender of person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_657"}
{"paraphrased": "what is the gender of students sho started before 2004", "source": "gender that is gender of student whose start date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_658"}
{"paraphrased": "people that are friends with someone that started school in or before 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_659"}
{"paraphrased": "people who quit their job before alice started school", "source": "employee whose end date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_660"}
{"paraphrased": "find someone taller than 180 cm", "source": "person whose height is larger than 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_661"}
{"paraphrased": "who was born before alice", "source": "person whose birthdate is smaller than birthdate of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate)))))", "qid": "socialnetwork_test_662"}
{"paraphrased": "what is the gender of an employee with an end date no earlier than 2004", "source": "gender that is gender of employee whose end date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_663"}
{"paraphrased": "what are genders of employees who started after 2004", "source": "gender that is gender of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_664"}
{"paraphrased": "people born on the day alice started school", "source": "person whose birthdate is start date of student alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))", "qid": "socialnetwork_test_665"}
{"paraphrased": "employees who started working in or after 2004", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_666"}
{"paraphrased": "which people are friends with students who graduate after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_667"}
{"paraphrased": "which student has attended less than two universitys", "source": "student that has less than two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_668"}
{"paraphrased": "who is the person that is friends with the student and graduated in 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_669"}
{"paraphrased": "which employee quit working before alice graduated from school", "source": "employee whose end date is smaller than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_670"}
{"paraphrased": "what is not alices gender", "source": "gender that is not gender of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string !=) en.person.alice))", "qid": "socialnetwork_test_671"}
{"paraphrased": "what is the relationship status of alices friends", "source": "relationship status that is relationship status of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_672"}
{"paraphrased": "student ending after alice", "source": "student whose end date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_673"}
{"paraphrased": "people who have friends that go to a school other than brown", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_674"}
{"paraphrased": "who is friends with the person who started going to school after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_675"}
{"paraphrased": "which students started after 2004", "source": "student whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_676"}
{"paraphrased": "what is alices job title while working for mckinsey", "source": "job title of employee alice whose employer is mckinsey", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employer) (string =) en.company.mckinsey) (string job_title)))", "qid": "socialnetwork_test_677"}
{"paraphrased": "people that are friends with someone born in new york", "source": "person that is friends with person whose birthplace is new york", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_678"}
{"paraphrased": "find employees with last day same or later than alices", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_679"}
{"paraphrased": "student with the highest number of subjects", "source": "student that has the most number of field of study", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string field_of_study))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_680"}
{"paraphrased": "what city is the birthplace of the employees who stoped working for us before 2004", "source": "city that is birthplace of employee whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_681"}
{"paraphrased": "find me a person who is not 180cm tall", "source": "person whose height is not 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string !=) (number 180 en.cm)))", "qid": "socialnetwork_test_682"}
{"paraphrased": "people who quit job with and after alice", "source": "employee whose end date is at least end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_683"}
{"paraphrased": "a friend of a student starting after 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_684"}
{"paraphrased": "which people are 180 cm tall and the same height as alice", "source": "person whose height is 180 cm and that is height of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string height)) (string =) en.person.alice))", "qid": "socialnetwork_test_685"}
{"paraphrased": "people who quit job in 2004 and 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_686"}
{"paraphrased": "find employees who have a start date that is the same as employee alice or greater", "source": "employee whose start date is at least start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_687"}
{"paraphrased": "who is friends with the student who ended after 2004", "source": "person that is friends with student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_688"}
{"paraphrased": "find the students that studied either computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_689"}
{"paraphrased": "students who began school the same day alice started working", "source": "student whose start date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_690"}
{"paraphrased": "find students starting after alice", "source": "student whose start date is larger than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_691"}
{"paraphrased": "alices friends who born in new york", "source": "person whose birthplace is new york and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_692"}
{"paraphrased": "people who have the same birthplace as alice and are 180 cm tall", "source": "person whose height is 180 cm and that is birthplace of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthplace)) (string =) en.person.alice))", "qid": "socialnetwork_test_693"}
{"paraphrased": "height of a person", "source": "total height of person", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_test_694"}
{"paraphrased": "birthplaces of students starting after 2004", "source": "city that is birthplace of student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_695"}
{"paraphrased": "who is friends with the non computer science major", "source": "person that student whose field of study is not computer science is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_696"}
{"paraphrased": "students who started on or before alices end date", "source": "student whose start date is at most end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_697"}
{"paraphrased": "what is the relationship status of employees who start date was 2004 or before", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_698"}
{"paraphrased": "whats the relationships status of the employee that doesnt work at mckinsey", "source": "relationship status that is relationship status of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_699"}
{"paraphrased": "what city is the birthplace of students before 2004", "source": "city that is birthplace of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_700"}
{"paraphrased": "friends of people worked in companies other than mckinsey", "source": "person that employee whose employer is not mckinsey is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_701"}
{"paraphrased": "find birthplace of student with last day other than 2004", "source": "city that is birthplace of student whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_702"}
{"paraphrased": "which person has the most number of friends", "source": "person that the most number of person is friends with", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.person) (string !type)) (string max) (call reverse (string friend)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_703"}
{"paraphrased": "what students started after alice left", "source": "student whose start date is larger than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_704"}
{"paraphrased": "friend of employee whose start date after 2004", "source": "person that is friends with employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_705"}
{"paraphrased": "people who were born before alice started her job", "source": "person whose birthdate is smaller than start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date)))))", "qid": "socialnetwork_test_706"}
{"paraphrased": "what employee quit their job last", "source": "employee that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_707"}
{"paraphrased": "who is friends with students whos start date is at most 2004", "source": "person that is friends with student whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_708"}
{"paraphrased": "whats the relationship status of the student that is leaving her job after 2004", "source": "relationship status that is relationship status of student whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_709"}
{"paraphrased": "friends of students not starting in 2004", "source": "person that is friends with student whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string education_start_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_710"}
{"paraphrased": "what university does the 180 cm tall person go to", "source": "university that is university of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.university) (string !type)) (call reverse (string university)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_711"}
{"paraphrased": "what gender are employees who have a start date of 2004 or greater", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_712"}
{"paraphrased": "find me all people born after 2004", "source": "person whose birthdate is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_713"}
{"paraphrased": "whose relationship status is single", "source": "relationship status that is relationship status of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_714"}
{"paraphrased": "find employee with last day before alices start date", "source": "employee whose end date is smaller than start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_715"}
{"paraphrased": "find fields of study for those 180 cm tall", "source": "field that is field of study of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.field) (string !type)) (call reverse (string field_of_study)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_716"}
{"paraphrased": "what is the birthdays of employees who left before 2004", "source": "city that is birthplace of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_717"}
{"paraphrased": "friend of employee whose start date not after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_718"}
{"paraphrased": "find the friends of singlestatus people", "source": "person that person whose relationship status is single is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_719"}
{"paraphrased": "employees who finish with alice", "source": "employee whose end date is end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_720"}
{"paraphrased": "people that stopped working when alice did or after", "source": "employee whose end date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_721"}
{"paraphrased": "students who started before alice quit her job", "source": "student whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_722"}
{"paraphrased": "what person is a friend of a student that started after 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_723"}
{"paraphrased": "who is the shortest person", "source": "person that has the smallest height", "target": "(call listValue (call superlative (call getProperty (call singleton en.person) (string !type)) (string min) (call ensureNumericProperty (string height))))", "qid": "socialnetwork_test_724"}
{"paraphrased": "find students who attend alices university", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_725"}
{"paraphrased": "students whose end date is on or before alices birthdate", "source": "student whose end date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_726"}
{"paraphrased": "employees who started in either 2004 or 2010", "source": "employee whose start date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_727"}
{"paraphrased": "people who are single and 180 cm tall", "source": "person whose relationship status is single and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_728"}
{"paraphrased": "who was born after 2004", "source": "person whose birthdate is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >) (call ensureNumericEntity (date 2004 -1 -1))))", "qid": "socialnetwork_test_729"}
{"paraphrased": "find the gender of employees with a start date not equal to 2004", "source": "gender that is gender of employee whose start date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_730"}
{"paraphrased": "in which city were not more than two people born", "source": "city that is birthplace of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_731"}
{"paraphrased": "who is taller than alice", "source": "person whose height is larger than height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string height)))))", "qid": "socialnetwork_test_732"}
{"paraphrased": "what people are friends with alice and also have a relationship status of single", "source": "person that is friends with alice and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_733"}
{"paraphrased": "find mutual friends of alice", "source": "person that person that is friends with alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_734"}
{"paraphrased": "find people who have more than two relationship statuses", "source": "person that has more than two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >) (number 2)))", "qid": "socialnetwork_test_735"}
{"paraphrased": "people that are at most 180 cm tall", "source": "person whose height is at most 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string <=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_736"}
{"paraphrased": "what is the gender of the employee whose start date is in 2004", "source": "gender that is gender of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_737"}
{"paraphrased": "find the birth city of two people", "source": "city that is birthplace of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_738"}
{"paraphrased": "relationship status of employee whose start date is larger than 2004", "source": "relationship status that is relationship status of employee whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_739"}
{"paraphrased": "what people share the birthdate of alice and have a height of 180 cm", "source": "person whose height is 180 cm and that is birthdate of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string birthdate)) (string =) en.person.alice))", "qid": "socialnetwork_test_740"}
{"paraphrased": "what person is the same gender as the 180 cm tall person", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_741"}
{"paraphrased": "students who started after 2004 or 2010", "source": "student whose start date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_742"}
{"paraphrased": "find employees with a start date that is later than 2004", "source": "employee whose start date is larger than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_743"}
{"paraphrased": "what cities were people born in 2004 born in", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_744"}
{"paraphrased": "friend of employee whose end date is not 2004", "source": "person that is friends with employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_745"}
{"paraphrased": "what male is friends with alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_746"}
{"paraphrased": "relationship status of employees who finish before 2004", "source": "relationship status that is relationship status of employee whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_747"}
{"paraphrased": "find students friends not attending brown university", "source": "person that is friends with student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_748"}
{"paraphrased": "which students started no later than 2004", "source": "student whose start date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_749"}
{"paraphrased": "a student with the most recent end date", "source": "student that has the largest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string max) (call ensureNumericProperty (string education_end_date)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_750"}
{"paraphrased": "find the people joined work after alices birth", "source": "employee whose start date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_751"}
{"paraphrased": "find an employee whom has a start date later than the end date of student alice", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_752"}
{"paraphrased": "friends of friends of people born in new york", "source": "person that person whose birthplace is new york is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthplace) (string =) en.city.new_york)))", "qid": "socialnetwork_test_753"}
{"paraphrased": "find the relationship status of no more than two people", "source": "relationship status that is relationship status of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_754"}
{"paraphrased": "which women are 180 cm tall", "source": "person whose height is 180 cm and that is gender of alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (call reverse (string gender)) (string =) en.person.alice))", "qid": "socialnetwork_test_755"}
{"paraphrased": "alices 6 foot tall friend", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_756"}
{"paraphrased": "people that stopped working when alice was born or after", "source": "employee whose end date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_757"}
{"paraphrased": "which employees had their last day no later than alices graduation", "source": "employee whose end date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_758"}
{"paraphrased": "what gender are the working people that are not software engineers", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_759"}
{"paraphrased": "what people are friend with students who have a start date later than 2004", "source": "person that is friends with student whose start date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_760"}
{"paraphrased": "which student that does not stufy computer science was born in this city", "source": "city that is birthplace of student whose field of study is not computer science", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_761"}
{"paraphrased": "people who have joined before alice quits her job", "source": "employee whose start date is at least end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_762"}
{"paraphrased": "what is the total height of a person", "source": "total height of person", "target": "(call listValue (call aggregate (string sum) (call getProperty (call getProperty (call singleton en.person) (string !type)) (string height))))", "qid": "socialnetwork_test_763"}
{"paraphrased": "what students have a start date that is no later than student alices end date", "source": "student whose start date is at most end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_764"}
{"paraphrased": "people working with mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_765"}
{"paraphrased": "what gender is the employee who is not a software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_766"}
{"paraphrased": "people who joined their work with or after alice", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_767"}
{"paraphrased": "what student started school before 2004 or 2010", "source": "student whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_768"}
{"paraphrased": "find employees who have a start date that is either less than 2004 or 2010", "source": "employee whose start date is smaller than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_769"}
{"paraphrased": "who has the most jobs", "source": "employee that has the most number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_770"}
{"paraphrased": "an employee with the least job titles", "source": "employee that has the least number of job title", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string min) (string job_title))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_771"}
{"paraphrased": "birthplace of a student ending before or in 2004", "source": "city that is birthplace of student whose end date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_772"}
{"paraphrased": "people who are friends of employees with a 2004 end date", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_773"}
{"paraphrased": "student who is enrolled on the day of alices birthday", "source": "student whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_774"}
{"paraphrased": "which students graduate in 2004 or 2010", "source": "student whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_775"}
{"paraphrased": "friend of student whose end date is before 2004", "source": "person that is friends with student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_776"}
{"paraphrased": "find employee starting earlier than alices last day", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_777"}
{"paraphrased": "any male born in new york", "source": "person whose gender is male and whose birthplace is new york", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) en.gender.male) (string birthplace) (string =) en.city.new_york))", "qid": "socialnetwork_test_778"}
{"paraphrased": "what people is alice not friends with", "source": "person that alice not is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string !=) en.person.alice))", "qid": "socialnetwork_test_779"}
{"paraphrased": "find people 180 cm tall born in 2004", "source": "person whose height is 180 cm and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_780"}
{"paraphrased": "which people have the same gender as fewer than two people", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_781"}
{"paraphrased": "which people born in 2004 are 180 cm tall", "source": "person whose birthdate is 2004 and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_782"}
{"paraphrased": "who is a person whose start date was after 2004 friends with", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_783"}
{"paraphrased": "find the least common birthplace", "source": "city that is birthplace of the least number of person", "target": "(call listValue (call countSuperlative (call getProperty (call singleton en.city) (string !type)) (string min) (call reverse (string birthplace)) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_784"}
{"paraphrased": "what is the gender of employee with title other than software engineer", "source": "gender that is gender of employee whose job title is not software engineer", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string job_title) (string !=) en.job_title.software_engineer)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_785"}
{"paraphrased": "students whose graduation year is at least 2004 or 2010", "source": "student whose end date is at least 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_786"}
{"paraphrased": "what is the relationship status for two people", "source": "relationship status that is relationship status of two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_787"}
{"paraphrased": "find students whose fields are computer science or history", "source": "student whose field of study is computer science or history", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string =) (call concat en.field.computer_science en.field.history))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_788"}
{"paraphrased": "who is 180 cm tall and friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_789"}
{"paraphrased": "employees starting contemporaneous to alice", "source": "employee whose start date is start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_790"}
{"paraphrased": "who is friends with the student who began school later than 2004", "source": "person that student whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_791"}
{"paraphrased": "what employee started after student alice left", "source": "employee whose start date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_792"}
{"paraphrased": "find the friends of students that did not graduate in 2004", "source": "person that student whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string education_end_date) (string !=) (date 2004 -1 -1))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_793"}
{"paraphrased": "employee whose end date is not before 2004", "source": "employee whose end date is at least 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_794"}
{"paraphrased": "who is the employer of the person who is 180 cm tall", "source": "company that is employer of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.company) (string !type)) (call reverse (string employer)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_795"}
{"paraphrased": "which employee has the earliest end date", "source": "employee that has the smallest end date", "target": "(call listValue (call getProperty ((lambda s (call superlative (var s) (string min) (call ensureNumericProperty (string employment_end_date)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_796"}
{"paraphrased": "men that are friends with alice", "source": "person that is friends with alice and whose gender is male", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string gender) (string =) en.gender.male))", "qid": "socialnetwork_test_797"}
{"paraphrased": "find alices friend that was born in 2004", "source": "person that is friends with alice and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_798"}
{"paraphrased": "name a person in at least two relationships", "source": "person that has at least two relationship status", "target": "(call listValue (call countComparative (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string >=) (number 2)))", "qid": "socialnetwork_test_799"}
{"paraphrased": "where were the people that started school in or after 2004 born", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_800"}
{"paraphrased": "birth place  of students whose start date is smaller than 2004 and 2010", "source": "city that is birthplace of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_801"}
{"paraphrased": "where is the birthplace of the student not going to brown  university", "source": "city that is birthplace of student whose university is not brown university", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_802"}
{"paraphrased": "what is the gender of alices friends", "source": "gender that is gender of person that is friends with alice", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_803"}
{"paraphrased": "people who are friends of alices friends", "source": "person that is friends with person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_804"}
{"paraphrased": "what is the birth city of employees with an end date that is not 2004", "source": "city that is birthplace of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_805"}
{"paraphrased": "of all the people who are 180 cm tall which of them share birthdays", "source": "person whose birthdate is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_806"}
{"paraphrased": "what is the gender of a 180 cm person", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_807"}
{"paraphrased": "what people are friends with alice and have a birthdate of 2004", "source": "person whose birthdate is 2004 and that alice is friends with", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1)) (call reverse (string friend)) (string =) en.person.alice))", "qid": "socialnetwork_test_808"}
{"paraphrased": "is the person whos 180 cm tall a male female or other", "source": "gender that is gender of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_809"}
{"paraphrased": "which employee ended later than alices birthdate", "source": "employee whose end date is larger than birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_810"}
{"paraphrased": "someone 180 cm tall who stopped in 2004", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_811"}
{"paraphrased": "which students started no later than alice did", "source": "student whose start date is at most start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_812"}
{"paraphrased": "employee whose start date is not after birth date of alice", "source": "employee whose start date is at least birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_813"}
{"paraphrased": "what university did alice stop attending in 2004", "source": "university of student alice whose end date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string student))) (string education_end_date) (string =) (date 2004 -1 -1)) (string university)))", "qid": "socialnetwork_test_814"}
{"paraphrased": "what gender has less than two people", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_815"}
{"paraphrased": "student who finishes earlier than alice enrollment", "source": "student whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_816"}
{"paraphrased": "who has friends born in 2004", "source": "person that person whose birthdate is 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_817"}
{"paraphrased": "people who are currently in a relationship", "source": "person whose relationship status is not single", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string !=) en.relationship_status.single))", "qid": "socialnetwork_test_818"}
{"paraphrased": "which students graduate no later than 2004", "source": "student whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_819"}
{"paraphrased": "people who study computer science or history", "source": "computer science or history", "target": "(call listValue (call concat en.field.computer_science en.field.history))", "qid": "socialnetwork_test_820"}
{"paraphrased": "what employee was terminated when alice was born", "source": "employee whose end date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_821"}
{"paraphrased": "a friend of alice friend", "source": "person that person that is friends with alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice)))", "qid": "socialnetwork_test_822"}
{"paraphrased": "what person has the same height as alice", "source": "person whose height is height of alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (call getProperty en.person.alice (string height))))", "qid": "socialnetwork_test_823"}
{"paraphrased": "find the gender of fewer than two people", "source": "gender that is gender of less than two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_824"}
{"paraphrased": "in what city was alices friend born", "source": "city that is birthplace of person that alice is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice)))", "qid": "socialnetwork_test_825"}
{"paraphrased": "what employee started after or during when alice started school", "source": "employee whose start date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_826"}
{"paraphrased": "people that are friends with someone that started working in or after 2004", "source": "person that is friends with employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_827"}
{"paraphrased": "friends of employees who start before or in 2004", "source": "person that is friends with employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_828"}
{"paraphrased": "which people are friends with employees whose last day of work was no earlier than 2004", "source": "person that employee whose end date is at least 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_829"}
{"paraphrased": "a friend of an employee who did not quit in 2004", "source": "person that employee whose end date is not 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_830"}
{"paraphrased": "find someone born during or after 2004", "source": "person whose birthdate is at least 2004 or 2010", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string birthdate)) (string >=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1)))))", "qid": "socialnetwork_test_831"}
{"paraphrased": "people that are friends with the new emplyees that stars after 2004", "source": "person that employee whose start date is larger than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_832"}
{"paraphrased": "employee with one employer", "source": "employee that has less than two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_833"}
{"paraphrased": "what people have a height of 180 and are friends with alice", "source": "person whose height is 180 cm and that is friends with alice", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string friend) (string =) en.person.alice))", "qid": "socialnetwork_test_834"}
{"paraphrased": "what gender are those who are 180 cm tall", "source": "person whose gender is person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string gender) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_835"}
{"paraphrased": "friends of people studied in universities other than brown university", "source": "person that student whose university is not brown university is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (string university) (string !=) en.university.brown)) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_836"}
{"paraphrased": "find all people who are friends with alice and are 180 cm tall", "source": "person that is friends with alice and whose height is 180 cm", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string friend) (string =) en.person.alice) (string height) (string =) (number 180 en.cm)))", "qid": "socialnetwork_test_837"}
{"paraphrased": "find all people that are single and online", "source": "person whose relationship status is single and that is logged in", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single) (string logged_in)))", "qid": "socialnetwork_test_838"}
{"paraphrased": "a worker who started before alice left", "source": "employee whose start date is smaller than end date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_839"}
{"paraphrased": "people who studied subjects other than computer science", "source": "student whose field of study is not computer science", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string field_of_study) (string !=) en.field.computer_science)) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_840"}
{"paraphrased": "which gender do no more than 2 people identify as", "source": "gender that is gender of at most two person", "target": "(call listValue (call countComparative (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string <=) (number 2) (call getProperty (call singleton en.person) (string !type))))", "qid": "socialnetwork_test_841"}
{"paraphrased": "who is the student whose end date was at least 2004 friends with", "source": "person that student whose end date is smaller than 2004 is friends with", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_842"}
{"paraphrased": "find people who are 180 cm tall and single", "source": "person whose height is 180 cm and whose relationship status is single", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string relationship_status) (string =) en.relationship_status.single))", "qid": "socialnetwork_test_843"}
{"paraphrased": "student whose university of is same as that of student alice", "source": "student whose university is university of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string university) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string university)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_844"}
{"paraphrased": "what is the relationship status of employees whose last day was after 2004", "source": "relationship status that is relationship status of employee whose end date is larger than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_845"}
{"paraphrased": "city of birth for people employed since 2004", "source": "city that is birthplace of employee whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_846"}
{"paraphrased": "which students are software engineers or program managers", "source": "employee whose job title is software engineer or program manager", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string job_title) (string =) (call concat en.job_title.software_engineer en.job_title.program_manager))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_847"}
{"paraphrased": "who is employer of alice", "source": "employer of employee alice", "target": "(call listValue (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))", "qid": "socialnetwork_test_848"}
{"paraphrased": "find the birthplaces of people born in 2004", "source": "city that is birthplace of person whose birthdate is 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (date 2004 -1 -1))))", "qid": "socialnetwork_test_849"}
{"paraphrased": "people who started in 2004 and are 180 cm tall", "source": "person whose height is 180 cm and whose start date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_start_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_850"}
{"paraphrased": "employees who finished before alice started", "source": "employee whose end date is at most start date of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_851"}
{"paraphrased": "what employees have an end date no later than 2004", "source": "employee whose end date is at most 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_852"}
{"paraphrased": "what is the gender of a person who is single", "source": "gender that is gender of person whose relationship status is single", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string relationship_status) (string =) en.relationship_status.single)))", "qid": "socialnetwork_test_853"}
{"paraphrased": "employees finishing when or after alice starts", "source": "employee whose end date is at least start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >=) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_854"}
{"paraphrased": "find employees with two employers or less", "source": "employee that has at most two employer", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string employer) (string <=) (number 2))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_855"}
{"paraphrased": "what is the gender of working people that did not stop in 2004", "source": "gender that is gender of employee whose end date is not 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string !=) (date 2004 -1 -1))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_856"}
{"paraphrased": "which employee ended in 2004 or 2010", "source": "employee whose end date is 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_end_date) (string =) (call concat (date 2004 -1 -1) (date 2010 -1 -1)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_857"}
{"paraphrased": "which employee quit school before alice started", "source": "employee whose end date is smaller than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string <) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_858"}
{"paraphrased": "find a person who is 180 cm or taller", "source": "person whose height is at least 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (call ensureNumericProperty (string height)) (string >=) (call ensureNumericEntity (number 180 en.cm))))", "qid": "socialnetwork_test_859"}
{"paraphrased": "find employee who works with alice", "source": "employee whose employer is employer of employee alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employer)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_860"}
{"paraphrased": "people who joined their studies before 2011", "source": "student whose start date is at most 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_861"}
{"paraphrased": "employee whose start date is after start date of student alice", "source": "employee whose start date is larger than start date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_start_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_862"}
{"paraphrased": "relationship status of students who started no earlier than 2004", "source": "relationship status that is relationship status of student whose start date is at least 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string >=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_863"}
{"paraphrased": "friend of alice with birthdate in 2004", "source": "person that alice is friends with and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (call reverse (string friend)) (string =) en.person.alice) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_864"}
{"paraphrased": "which students graduated after 2004 or 2010", "source": "student whose end date is larger than 2004 or 2010", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string >) (call ensureNumericEntity (call concat (date 2004 -1 -1) (date 2010 -1 -1))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_865"}
{"paraphrased": "what is the gender of the employee who is not employed by mckinsey", "source": "gender that is gender of employee whose employer is not mckinsey", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (string employer) (string !=) en.company.mckinsey)) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_866"}
{"paraphrased": "people who have a birthday on the same day alice started her job", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_867"}
{"paraphrased": "which employees work for mckinsey or google", "source": "employee whose employer is mckinsey or google", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employer) (string =) (call concat en.company.mckinsey en.company.google))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_868"}
{"paraphrased": "what are genders of students whose last day is before 2004", "source": "gender that is gender of student whose end date is smaller than 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.gender) (string !type)) (call reverse (string gender)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student))))", "qid": "socialnetwork_test_869"}
{"paraphrased": "which students went to no more two universities", "source": "student that has at most two university", "target": "(call listValue (call getProperty ((lambda s (call countComparative (var s) (string university) (string <=) (number 2))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_870"}
{"paraphrased": "find alice or bob", "source": "alice or bob", "target": "(call listValue (call concat en.person.alice en.person.bob))", "qid": "socialnetwork_test_871"}
{"paraphrased": "people that stopped school before 2004", "source": "student whose end date is smaller than 2004", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_end_date)) (string <) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_872"}
{"paraphrased": "who do the most people work for", "source": "employee that has the most number of employer", "target": "(call listValue (call getProperty ((lambda s (call countSuperlative (var s) (string max) (string employer))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_873"}
{"paraphrased": "whos end date is 2004 and is 180 cm tall", "source": "person whose height is 180 cm and whose end date is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm)) (string education_end_date) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_874"}
{"paraphrased": "job titles of people who are 180 cm tall", "source": "job title that is job title of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.job_title) (string !type)) (call reverse (string job_title)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_875"}
{"paraphrased": "students who started before or on alices birthdate", "source": "student whose start date is at most birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string education_start_date)) (string <=) (call ensureNumericEntity (call getProperty en.person.alice (string birthdate))))) (call domain (string student))) (string student)))", "qid": "socialnetwork_test_876"}
{"paraphrased": "find relationship status of employees starting in 2004 or earlier", "source": "relationship status that is relationship status of employee whose start date is at most 2004", "target": "(call listValue (call filter (call getProperty (call singleton en.relationship_status) (string !type)) (call reverse (string relationship_status)) (string =) (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_start_date)) (string <=) (call ensureNumericEntity (date 2004 -1 -1)))) (call domain (string employee))) (string employee))))", "qid": "socialnetwork_test_877"}
{"paraphrased": "who was born on start date of alice", "source": "person whose birthdate is start date of employee alice", "target": "(call listValue (call filter (call getProperty (call singleton en.person) (string !type)) (string birthdate) (string =) (call getProperty (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date))))", "qid": "socialnetwork_test_878"}
{"paraphrased": "who did alice start working for in 2004", "source": "employer of employee alice whose start date is 2004", "target": "(call listValue (call getProperty (call filter (call getProperty en.person.alice (call reverse (string employee))) (string employment_start_date) (string =) (date 2004 -1 -1)) (string employer)))", "qid": "socialnetwork_test_879"}
{"paraphrased": "an employee starting when alice was born", "source": "employee whose start date is birthdate of alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (string employment_start_date) (string =) (call getProperty en.person.alice (string birthdate)))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_880"}
{"paraphrased": "online people who were born in 2004", "source": "person that is logged in and whose birthdate is 2004", "target": "(call listValue (call filter (call filter (call getProperty (call singleton en.person) (string !type)) (string logged_in)) (string birthdate) (string =) (date 2004 -1 -1)))", "qid": "socialnetwork_test_881"}
{"paraphrased": "employee whose end date after end date of student alice", "source": "employee whose end date is larger than end date of student alice", "target": "(call listValue (call getProperty ((lambda s (call filter (var s) (call ensureNumericProperty (string employment_end_date)) (string >) (call ensureNumericEntity (call getProperty (call getProperty en.person.alice (call reverse (string student))) (string education_end_date))))) (call domain (string employee))) (string employee)))", "qid": "socialnetwork_test_882"}
{"paraphrased": "find the birthplace of all people 180 cm tall", "source": "city that is birthplace of person whose height is 180 cm", "target": "(call listValue (call filter (call getProperty (call singleton en.city) (string !type)) (call reverse (string birthplace)) (string =) (call filter (call getProperty (call singleton en.person) (string !type)) (string height) (string =) (number 180 en.cm))))", "qid": "socialnetwork_test_883"}
